from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.conf import settings
import os

class Command(BaseCommand):
    help = '–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ—î–∫—Ç—É –¥–æ –¥–µ–ø–ª–æ—é: –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—è, –º–µ–¥—ñ–∞, —Ç–µ—Å—Ç–∏'

    def add_arguments(self, parser):
        parser.add_argument(
            '--skip-spelling',
            action='store_true',
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—ó',
        )
        parser.add_argument(
            '--skip-media',
            action='store_true', 
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫—É –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤',
        )
        parser.add_argument(
            '--skip-tests',
            action='store_true',
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è',
        )

    def handle(self, *args, **options):
        self.stdout.write("üöÄ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –¥–µ–ø–ª–æ—é...\n")
        
        # –ö—Ä–æ–∫ 1: –ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Ä–æ—Å—ñ–π—Å—å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        if not options['skip_spelling']:
            self.stdout.write("üßπ –ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Ä–æ—Å—ñ–π—Å—å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É...")
            try:
                call_command('clean_russian_content')
                self.stdout.write(self.style.SUCCESS("   ‚úÖ –†–æ—Å—ñ–π—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—á–∏—â–µ–Ω–∏–π"))
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ: {str(e)}"))
                return
        
        # –ö—Ä–æ–∫ 2: –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ—Å—ñ–π—Å—å–∫–∏—Ö –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
        if not options['skip_spelling']:
            self.stdout.write("üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ—Å—ñ–π—Å—å–∫–∏—Ö –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...")
            try:
                call_command('remove_russian_categories')
                self.stdout.write(self.style.SUCCESS("   ‚úÖ –†–æ—Å—ñ–π—Å—å–∫—ñ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ"))
            except Exception as e:
                self.stdout.write(self.style.WARNING(f"   ‚ö†Ô∏è –î—É–±–ª—ñ–∫–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –∞–±–æ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω—ñ: {str(e)}"))
        
        # –ö—Ä–æ–∫ 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—ó
        if not options['skip_spelling']:
            self.stdout.write("\n‚úèÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—ó...")
            try:
                call_command('check_spelling_errors', '--fix')
                self.stdout.write(self.style.SUCCESS("   ‚úÖ –û—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ"))
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—ó: {str(e)}"))
                return
        
        # –ö—Ä–æ–∫ 4: –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤
        if not options['skip_media']:
            self.stdout.write("\nüìÅ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤...")
            try:
                call_command('copy_media_to_static', '--clean')
                self.stdout.write(self.style.SUCCESS("   ‚úÖ –ú–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω—ñ"))
                
                call_command('prepare_portfolio')
                self.stdout.write(self.style.SUCCESS("   ‚úÖ –ü–æ—Ä—Ç—Ñ–æ–ª—ñ–æ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–µ"))
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤—Ü—ñ –º–µ–¥—ñ–∞: {str(e)}"))
        
        # –ö—Ä–æ–∫ 5: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        if not options['skip_tests']:
            self.stdout.write("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤...")
            try:
                call_command('test_deployment')
                self.stdout.write(self.style.SUCCESS("   ‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ"))
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ: {str(e)}"))
                return
        
        # –ö—Ä–æ–∫ 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
        self.stdout.write("\nüìä –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞...")
        
        from mainapp.models import Product, Category, Portfolio, Review
        
        products_count = Product.objects.count()
        categories_count = Category.objects.count()
        portfolios_count = Portfolio.objects.count()
        reviews_count = Review.objects.count()
        
        self.stdout.write(f"   üì¶ –¢–æ–≤–∞—Ä—ñ–≤: {products_count}")
        self.stdout.write(f"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ–π: {categories_count}")
        self.stdout.write(f"   üèóÔ∏è –ü—Ä–æ—î–∫—Ç—ñ–≤ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ: {portfolios_count}")
        self.stdout.write(f"   ‚≠ê –í—ñ–¥–≥—É–∫—ñ–≤: {reviews_count}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤
        media_path = os.path.join(settings.BASE_DIR, 'media')
        static_media_path = os.path.join(settings.BASE_DIR, 'static', 'media')
        
        if os.path.exists(media_path):
            media_files = sum([len(files) for r, d, files in os.walk(media_path)])
            self.stdout.write(f"   üì∏ –ú–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤: {media_files}")
        
        if os.path.exists(static_media_path):
            static_files = sum([len(files) for r, d, files in os.walk(static_media_path)])
            self.stdout.write(f"   üìÅ –°—Ç–∞—Ç–∏—á–Ω–∏—Ö –º–µ–¥—ñ–∞: {static_files}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ—Å—ñ–π—Å—å–∫–∏—Ö –∑–∞–ª–∏—à–∫—ñ–≤
        russian_categories = Category.objects.filter(
            name__icontains='–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã'
        ) | Category.objects.filter(
            name__icontains='–ò–Ω–≤–µ—Ä—Ç–æ—Ä—ã'
        ) | Category.objects.filter(
            name__icontains='–°–æ–ª–Ω–µ—á–Ω—ã–µ'
        )
        
        if russian_categories.exists():
            self.stdout.write(self.style.WARNING(f"   ‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {russian_categories.count()} —Ä–æ—Å—ñ–π—Å—å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"))
            for cat in russian_categories:
                self.stdout.write(f"      - {cat.name}")
        else:
            self.stdout.write(self.style.SUCCESS("   ‚úÖ –†–æ—Å—ñ–π—Å—å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"))
        
        # –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ –¥–µ–ø–ª–æ—é
        self.stdout.write(
            self.style.SUCCESS(
                f"\nüéâ –ü–†–û–Ñ–ö–¢ –ì–û–¢–û–í–ò–ô –î–û –î–ï–ü–õ–û–Æ!\n\n"
                f"üìã –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:\n"
                f"   1. git add .\n"
                f"   2. git commit -m 'üöÄ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –¥–µ–ø–ª–æ—é: –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—è + –º–µ–¥—ñ–∞'\n"
                f"   3. git push origin main\n\n"
                f"üí° –ü—Ä–∏ –¥–µ–ø–ª–æ—ó –Ω–∞ Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–æ–Ω–∞—î—Ç—å—Å—è:\n"
                f"   - –ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Ä–æ—Å—ñ–π—Å—å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
                f"   - –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ—Å—ñ–π—Å—å–∫–∏—Ö –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤\n"
                f"   - –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫\n"
                f"   - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤\n"
                f"   - –ó–±—ñ—Ä —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤\n\n"
                f"üîó –§–∞–π–ª build.sh –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏"
            )
        ) 