"""
–§—ñ–Ω–∞–ª—å–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç—É –¥–æ –¥–µ–ø–ª–æ—é –Ω–∞ Render
–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª—è—î –≤—Å–µ —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–ª–æ—é
"""
import os
import shutil
from django.core.management.base import BaseCommand
from django.conf import settings
from django.core.management import call_command
from mainapp.models import Product, ProductImage, Category, Brand
from django.db import transaction

class Command(BaseCommand):
    help = '–§—ñ–Ω–∞–ª—å–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç—É –¥–æ –¥–µ–ø–ª–æ—é –Ω–∞ Render'

    def add_arguments(self, parser):
        parser.add_argument(
            '--full-check',
            action='store_true',
            help='–ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É'
        )
        parser.add_argument(
            '--fix-images',
            action='store_true', 
            help='–í–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏'
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üöÄ –§–Ü–ù–ê–õ–¨–ù–ê –ü–Ü–î–ì–û–¢–û–í–ö–ê –î–û –î–ï–ü–õ–û–Æ –ù–ê RENDER'))
        self.stdout.write('='*60)
        
        full_check = options['full_check']
        fix_images = options['fix_images']
        
        issues_found = 0
        fixes_applied = 0
        
        # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        self.stdout.write('\n1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ production –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...')
        if self.check_production_settings():
            self.stdout.write(self.style.SUCCESS('   ‚úÖ Production –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è OK'))
        else:
            issues_found += 1
            self.stdout.write(self.style.ERROR('   ‚ùå –ü—Ä–æ–±–ª–µ–º–∏ –∑ production –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏'))
        
        # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ—Å—ñ–π—Å—å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        self.stdout.write('\n2Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ—Å—ñ–π—Å—å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É...')
        russian_issues = self.check_russian_content()
        if russian_issues == 0:
            self.stdout.write(self.style.SUCCESS('   ‚úÖ –†–æ—Å—ñ–π—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π'))
        else:
            issues_found += russian_issues
            self.stdout.write(self.style.WARNING(f'   ‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {russian_issues} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ —Ä–æ—Å—ñ–π—Å—å–∫–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º'))
            self.stdout.write('   üîß –ó–∞–ø—É—Å—Ç—ñ—Ç—å: python manage.py clean_russian_content --fix')
        
        # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        self.stdout.write('\n3Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...')
        db_issues = self.check_database_structure()
        if db_issues == 0:
            self.stdout.write(self.style.SUCCESS('   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ'))
        else:
            issues_found += db_issues
        
        # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤ (–ö–†–ò–¢–ò–ß–ù–û!)
        self.stdout.write('\n4Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤...')
        media_issues = self.check_media_files(fix_images)
        if media_issues == 0:
            self.stdout.write(self.style.SUCCESS('   ‚úÖ –í—Å—ñ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏ –Ω–∞ –º—ñ—Å—Ü—ñ'))
        else:
            issues_found += media_issues
            if fix_images:
                self.stdout.write('   üîß –í–∏–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏...')
                self.fix_media_issues()
                fixes_applied += 1
        
        # 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ static —Ñ–∞–π–ª—ñ–≤
        self.stdout.write('\n5Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤...')
        if self.check_static_files():
            self.stdout.write(self.style.SUCCESS('   ‚úÖ –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –≥–æ—Ç–æ–≤—ñ'))
        else:
            issues_found += 1
        
        # 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ URL —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
        self.stdout.write('\n6Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ URL —Å—Ç—Ä—É–∫—Ç—É—Ä–∏...')
        if self.check_urls():
            self.stdout.write(self.style.SUCCESS('   ‚úÖ URL —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞'))
        else:
            issues_found += 1
        
        # 7. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –¥–µ–ø–ª–æ—é
        if issues_found == 0:
            self.stdout.write('\n7Ô∏è‚É£ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è Render...')
            self.prepare_for_render()
            
            self.stdout.write('\n' + '='*60)
            self.stdout.write(self.style.SUCCESS('üéâ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í–ò–ô –î–û –î–ï–ü–õ–û–Æ!'))
            self.stdout.write(self.style.SUCCESS('–ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –¥–µ–ø–ª–æ–π –Ω–∞ Render'))
            self.stdout.write('='*60)
        else:
            self.stdout.write('\n' + '='*60)
            self.stdout.write(self.style.ERROR(f'‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ {issues_found} –ø—Ä–æ–±–ª–µ–º'))
            self.stdout.write(self.style.WARNING('–í–∏–ø—Ä–∞–≤—Ç–µ –ø—Ä–æ–±–ª–µ–º–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ—î–º:'))
            
            if russian_issues > 0:
                self.stdout.write('   ‚Ä¢ python manage.py clean_russian_content --fix')
            if media_issues > 0:
                self.stdout.write('   ‚Ä¢ python manage.py final_render_prepare --fix-images')
            
            self.stdout.write('='*60)

    def check_production_settings(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î production –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        required_settings = [
            'STATIC_ROOT',
            'MEDIA_ROOT', 
            'WHITENOISE_USE_FINDERS',
            'DATABASES'
        ]
        
        for setting in required_settings:
            if not hasattr(settings, setting):
                self.stdout.write(f'   ‚ùå –í—ñ–¥—Å—É—Ç–Ω—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {setting}')
                return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ MEDIA_URL
        if settings.MEDIA_URL != '/static/media/':
            self.stdout.write(f'   ‚ùå MEDIA_URL –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ /static/media/, –∞ –Ω–µ {settings.MEDIA_URL}')
            return False
            
        return True

    def check_russian_content(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–æ—Å—ñ–π—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        russian_patterns = [
            '—ã', '—ç', '—ä', '—ë',  # —Ä–æ—Å—ñ–π—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏
            '—Ü–∏–∏', '—Ç—Å—è',         # —Ä–æ—Å—ñ–π—Å—å–∫—ñ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è
            '–º–æ—â–Ω–æ—Å—Ç—å', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', '–≥–∞—Ä–∞–Ω—Ç–∏—è'  # —Ä–æ—Å—ñ–π—Å—å–∫—ñ —Å–ª–æ–≤–∞
        ]
        
        issues = 0
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–≤–∞—Ä–∏
        for product in Product.objects.all():
            for pattern in russian_patterns:
                if (pattern in product.name.lower() or 
                    pattern in product.description.lower()):
                    issues += 1
                    break
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        for category in Category.objects.all():
            for pattern in russian_patterns:
                if pattern in category.name.lower():
                    issues += 1
                    break
        
        return issues

    def check_database_structure(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        issues = 0
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —î —Ç–æ–≤–∞—Ä–∏
        if Product.objects.count() == 0:
            self.stdout.write('   ‚ö†Ô∏è –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –±–∞–∑—ñ')
            issues += 1
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —î –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        if Category.objects.count() == 0:
            self.stdout.write('   ‚ö†Ô∏è –ù–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤ –±–∞–∑—ñ')
            issues += 1
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —î –±—Ä–µ–Ω–¥–∏
        if Brand.objects.count() == 0:
            self.stdout.write('   ‚ö†Ô∏è –ù–µ–º–∞—î –±—Ä–µ–Ω–¥—ñ–≤ –≤ –±–∞–∑—ñ')
            issues += 1
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –º–∞—é—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        products_without_images = Product.objects.filter(image='').count()
        if products_without_images > 0:
            self.stdout.write(f'   ‚ö†Ô∏è {products_without_images} —Ç–æ–≤–∞—Ä—ñ–≤ –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å')
            issues += 1
        
        return issues

    def check_media_files(self, fix_mode=False):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏"""
        issues = 0
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞–ø–∫—É media
        media_root = os.path.join(settings.BASE_DIR, 'media')
        if not os.path.exists(media_root):
            self.stdout.write('   ‚ùå –ü–∞–ø–∫–∞ media –Ω–µ —ñ—Å–Ω—É—î')
            issues += 1
            return issues
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞–ø–∫—É products
        products_dir = os.path.join(media_root, 'products')
        if not os.path.exists(products_dir):
            self.stdout.write('   ‚ùå –ü–∞–ø–∫–∞ media/products –Ω–µ —ñ—Å–Ω—É—î')
            issues += 1
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –º–∞—é—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        for product in Product.objects.all():
            if product.image:
                image_path = os.path.join(settings.BASE_DIR, 'media', str(product.image))
                if not os.path.exists(image_path):
                    self.stdout.write(f'   ‚ùå –í—ñ–¥—Å—É—Ç–Ω—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {product.image}')
                    issues += 1
        
        return issues

    def check_static_files(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏"""
        static_dirs = [
            os.path.join(settings.BASE_DIR, 'static', 'css'),
            os.path.join(settings.BASE_DIR, 'static', 'js'),
            os.path.join(settings.BASE_DIR, 'static', 'images'),
        ]
        
        for static_dir in static_dirs:
            if not os.path.exists(static_dir):
                self.stdout.write(f'   ‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –ø–∞–ø–∫–∞: {static_dir}')
                return False
        
        return True

    def check_urls(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î URL —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        try:
            from django.urls import reverse
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ URL
            test_urls = [
                'mainapp:index',
                'mainapp:catalog', 
                'mainapp:portfolio',
                'mainapp:reviews'
            ]
            
            for url_name in test_urls:
                try:
                    reverse(url_name)
                except:
                    self.stdout.write(f'   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑ URL: {url_name}')
                    return False
            
            return True
        except Exception as e:
            self.stdout.write(f'   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ URLs: {e}')
            return False

    def fix_media_issues(self):
        """–í–∏–ø—Ä–∞–≤–ª—è—î –ø—Ä–æ–±–ª–µ–º–∏ –∑ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∞–º–∏"""
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–∞–ø–∫–∏
        media_dirs = [
            os.path.join(settings.BASE_DIR, 'media'),
            os.path.join(settings.BASE_DIR, 'media', 'products'),
            os.path.join(settings.BASE_DIR, 'media', 'products', 'gallery'),
            os.path.join(settings.BASE_DIR, 'media', 'portfolio'),
            os.path.join(settings.BASE_DIR, 'media', 'brands'),
        ]
        
        for media_dir in media_dirs:
            os.makedirs(media_dir, exist_ok=True)
        
        self.stdout.write('   ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–µ–¥—ñ–∞ –ø–∞–ø–∫–∏')

    def prepare_for_render(self):
        """–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –¥–µ–ø–ª–æ—é –Ω–∞ Render"""
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ setup_media_for_production
        call_command('setup_media_for_production', '--verify')
        
        # –û—á–∏—â–∞—î–º–æ –∫–µ—à
        call_command('clear_all_cache')
        
        # –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
        static_media = os.path.join(settings.BASE_DIR, 'staticfiles', 'media')
        if os.path.exists(static_media):
            files_count = len([f for f in os.listdir(static_media) if f.endswith(('.jpg', '.jpeg', '.png'))])
            self.stdout.write(f'   ‚úÖ –ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {files_count} –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è Render')
        
        self.stdout.write('   ‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ –¥–µ–ø–ª–æ—é!') 