"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–µ–ø–ª–æ—é - –ø–µ—Ä–µ–≤—ñ—Ä—è—î –≤—Å—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
"""
import os
import requests
from django.core.management.base import BaseCommand
from django.conf import settings
from django.test import Client
from django.urls import reverse
from mainapp.models import Product, Portfolio, Review, Category, Brand


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç—É—î –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –¥–æ –¥–µ–ø–ª–æ—é'

    def add_arguments(self, parser):
        parser.add_argument(
            '--url',
            type=str,
            help='URL —Å–∞–π—Ç—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–¥–ª—è production)',
            default='http://localhost:8000'
        )

    def handle(self, *args, **options):
        self.test_url = options['url']
        self.client = Client()
        
        self.stdout.write('üß™ –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–µ–ø–ª–æ—é...\n')
        
        # –¢–µ—Å—Ç–∏
        self.test_database_data()
        self.test_static_files()
        self.test_media_files()
        self.test_pages()
        self.test_portfolio_images()
        self.test_spelling_errors()
        
        self.stdout.write(
            self.style.SUCCESS('\n‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ! –ì–æ—Ç–æ–≤–æ –¥–æ –¥–µ–ø–ª–æ—é! üöÄ')
        )

    def test_database_data(self):
        """–¢–µ—Å—Ç –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö –≤ –±–∞–∑—ñ"""
        self.stdout.write('üìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –±–∞–∑–∏...')
        
        products_count = Product.objects.count()
        categories_count = Category.objects.count()
        brands_count = Brand.objects.count()
        portfolio_count = Portfolio.objects.count()
        reviews_count = Review.objects.count()
        
        assert products_count > 0, "‚ùå –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –±–∞–∑—ñ!"
        assert categories_count > 0, "‚ùå –ù–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤ –±–∞–∑—ñ!"
        assert brands_count > 0, "‚ùå –ù–µ–º–∞—î –±—Ä–µ–Ω–¥—ñ–≤ –≤ –±–∞–∑—ñ!"
        assert portfolio_count > 0, "‚ùå –ù–µ–º–∞—î –ø—Ä–æ–µ–∫—Ç—ñ–≤ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ!"
        assert reviews_count > 0, "‚ùå –ù–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤!"
        
        self.stdout.write(f'  ‚úÖ Products: {products_count}')
        self.stdout.write(f'  ‚úÖ Categories: {categories_count}')
        self.stdout.write(f'  ‚úÖ Brands: {brands_count}')
        self.stdout.write(f'  ‚úÖ Portfolio: {portfolio_count}')
        self.stdout.write(f'  ‚úÖ Reviews: {reviews_count}')

    def test_static_files(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
        self.stdout.write('\nüóÇÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤...')
        
        static_media_path = os.path.join(settings.BASE_DIR, 'static', 'media')
        
        if os.path.exists(static_media_path):
            # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Ñ–∞–π–ª–∏
            total_files = 0
            for root, dirs, files in os.walk(static_media_path):
                total_files += len([f for f in files if f.lower().endswith(('.jpg', '.jpeg', '.png'))])
            
            assert total_files > 0, "‚ùå –ù–µ–º–∞—î –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤ –≤ static/media!"
            self.stdout.write(f'  ‚úÖ –ú–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤ –≤ static: {total_files}')
        else:
            self.stdout.write('  ‚ö†Ô∏è –ü–∞–ø–∫–∞ static/media –Ω–µ —ñ—Å–Ω—É—î')

    def test_media_files(self):
        """–¢–µ—Å—Ç –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤"""
        self.stdout.write('\nüìÅ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤...')
        
        media_path = os.path.join(settings.BASE_DIR, 'media')
        portfolio_path = os.path.join(media_path, 'portfolio')
        products_path = os.path.join(media_path, 'products')
        
        # –¢–µ—Å—Ç –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ
        if os.path.exists(portfolio_path):
            portfolio_files = [f for f in os.listdir(portfolio_path) 
                             if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
            self.stdout.write(f'  ‚úÖ Portfolio –∑–æ–±—Ä–∞–∂–µ–Ω—å: {len(portfolio_files)}')
        else:
            self.stdout.write('  ‚ö†Ô∏è –ü–∞–ø–∫–∞ media/portfolio –Ω–µ —ñ—Å–Ω—É—î')
        
        # –¢–µ—Å—Ç —Ç–æ–≤–∞—Ä—ñ–≤
        if os.path.exists(products_path):
            product_files = [f for f in os.listdir(products_path) 
                           if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
            self.stdout.write(f'  ‚úÖ Product –∑–æ–±—Ä–∞–∂–µ–Ω—å: {len(product_files)}')

    def test_pages(self):
        """–¢–µ—Å—Ç —Å—Ç–æ—Ä—ñ–Ω–æ–∫ —Å–∞–π—Ç—É"""
        self.stdout.write('\nüåê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫...')
        
        pages = [
            ('/', '–ì–æ–ª–æ–≤–Ω–∞'),
            ('/catalog/', '–ö–∞—Ç–∞–ª–æ–≥'),
            ('/portfolio/', '–ü–æ—Ä—Ç—Ñ–æ–ª—ñ–æ'),
            ('/reviews/', '–í—ñ–¥–≥—É–∫–∏'),
        ]
        
        for url, name in pages:
            try:
                response = self.client.get(url)
                assert response.status_code == 200, f"‚ùå {name} –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!"
                self.stdout.write(f'  ‚úÖ {name} ({response.status_code})')
            except Exception as e:
                self.stdout.write(f'  ‚ùå {name}: {e}')

    def test_portfolio_images(self):
        """–¢–µ—Å—Ç –∑–æ–±—Ä–∞–∂–µ–Ω—å –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ"""
        self.stdout.write('\nüé® –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ...')
        
        portfolios = Portfolio.objects.all()
        for portfolio in portfolios:
            images = portfolio.all_images
            self.stdout.write(f'  üì∑ "{portfolio.title}": {len(images)} –∑–æ–±—Ä–∞–∂–µ–Ω—å')
            
            if images:
                self.stdout.write(f'    ‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω—ñ')
                for img in images[:3]:  # –ø–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3
                    self.stdout.write(f'      - {img}')
                if len(images) > 3:
                    self.stdout.write(f'      ... —Ç–∞ —â–µ {len(images) - 3}')
            else:
                self.stdout.write(f'    ‚ö†Ô∏è –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ')

        self.stdout.write(f'\nüìä –ó–∞–≥–∞–ª–æ–º –ø—Ä–æ–µ–∫—Ç—ñ–≤: {len(portfolios)}')

    def test_spelling_errors(self):
        """–¢–µ—Å—Ç –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫"""
        self.stdout.write('\n‚úèÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—ó...')
        
        from django.core.management import call_command
        from io import StringIO
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—ó
        out = StringIO()
        try:
            call_command('check_spelling_errors', stdout=out)
            output = out.getvalue()
            
            if '–ü–û–ú–ò–õ–û–ö –ù–ï –ó–ù–ê–ô–î–ï–ù–û' in output:
                self.stdout.write('  ‚úÖ –û—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ')
            elif '–ó–ù–ê–ô–î–ï–ù–û –ü–û–ú–ò–õ–ö–ò' in output:
                self.stdout.write('  ‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ (–±—É–¥—É—Ç—å –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ –ø—Ä–∏ –¥–µ–ø–ª–æ—ó)')
                # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç
                lines = output.split('\n')
                error_count = 0
                for line in lines:
                    if '–í—Å—å–æ–≥–æ –ø–æ–º–∏–ª–æ–∫:' in line:
                        self.stdout.write(f'    {line.strip()}')
                        break
            else:
                self.stdout.write('  ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—ó –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ')
                
        except Exception as e:
            self.stdout.write(f'  ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—ó: {str(e)}') 