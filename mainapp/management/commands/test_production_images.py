"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ç–æ–≤–∞—Ä—ñ–≤ –≤ production —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ
–ü–µ—Ä–µ–≤—ñ—Ä—è—î —â–æ –≤—Å—ñ URL –≥–µ–Ω–µ—Ä—É—é—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∞ —Ñ–∞–π–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ
"""
from django.core.management.base import BaseCommand
from django.conf import settings
from mainapp.models import Product, ProductImage
import os
import requests


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ç–æ–≤–∞—Ä—ñ–≤ –≤ production'

    def add_arguments(self, parser):
        parser.add_argument(
            '--check-urls',
            action='store_true',
            help='–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ HTTP –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å URL –∑–æ–±—Ä–∞–∂–µ–Ω—å'
        )
        parser.add_argument(
            '--limit',
            type=int,
            default=10,
            help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏'
        )

    def handle(self, *args, **options):
        self.stdout.write('üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ç–æ–≤–∞—Ä—ñ–≤...')
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.stdout.write(f'üìÇ MEDIA_URL: {settings.MEDIA_URL}')
        self.stdout.write(f'üìÅ MEDIA_ROOT: {settings.MEDIA_ROOT}')
        self.stdout.write(f'üîß DEBUG: {settings.DEBUG}')
        
        # –¢–µ—Å—Ç—É—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é URL
        limit = options['limit']
        products = Product.objects.filter(image__isnull=False)[:limit]
        
        self.stdout.write(f'\nüñºÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ {len(products)} —Ç–æ–≤–∞—Ä—ñ–≤...')
        
        success_count = 0
        error_count = 0
        
        for product in products:
            try:
                # –ì–µ–Ω–µ—Ä—É—î–º–æ URL —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
                image_url = product.image_url
                
                if image_url:
                    self.stdout.write(f'   ‚úÖ {product.name[:40]}...')
                    self.stdout.write(f'      URL: {image_url}')
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
                    if settings.MEDIA_URL == '/static/media/':
                        # –ü—Ä–æ–¥–∞–∫—à–Ω: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤ staticfiles
                        file_path = image_url.replace('/static/media/', '')
                        local_path = os.path.join(settings.STATIC_ROOT, 'media', file_path)
                    else:
                        # –õ–æ–∫–∞–ª—å–Ω–∞ —Ä–æ–∑—Ä–æ–±–∫–∞: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤ media
                        file_path = image_url.replace('/media/', '')
                        local_path = os.path.join(settings.MEDIA_ROOT, file_path)
                    
                    if os.path.exists(local_path):
                        self.stdout.write(f'      üìÅ –§–∞–π–ª —ñ—Å–Ω—É—î: {local_path}')
                        success_count += 1
                    else:
                        self.stdout.write(f'      ‚ùå –§–∞–π–ª –ù–ï —ñ—Å–Ω—É—î: {local_path}')
                        error_count += 1
                        
                    # HTTP –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫—â–æ –∑–∞–ø–∏—Ç–∞–Ω–æ
                    if options['check_urls']:
                        self.check_http_url(image_url)
                        
                else:
                    self.stdout.write(f'   ‚ùå {product.name[:40]}... - –ø–æ—Ä–æ–∂–Ω—ñ–π URL')
                    error_count += 1
                    
            except Exception as e:
                self.stdout.write(f'   üí• {product.name[:40]}... - –ø–æ–º–∏–ª–∫–∞: {e}')
                error_count += 1
        
        # –¢–µ—Å—Ç—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.test_product_images(limit)
        
        # –ü—ñ–¥—Å—É–º–æ–∫
        self.stdout.write(f'\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:')
        self.stdout.write(f'   ‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success_count}')
        self.stdout.write(f'   ‚ùå –ü–æ–º–∏–ª–∫–∏: {error_count}')
        
        if error_count == 0:
            self.stdout.write(
                self.style.SUCCESS('üéâ –í—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ!')
            )
        else:
            self.stdout.write(
                self.style.WARNING(f'‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {error_count} –ø—Ä–æ–±–ª–µ–º –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏')
            )

    def test_product_images(self, limit):
        """–¢–µ—Å—Ç—É—î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤"""
        self.stdout.write(f'\nüñºÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å...')
        
        images = ProductImage.objects.select_related('product')[:limit]
        
        for image in images:
            try:
                image_url = image.image_url
                if image_url:
                    self.stdout.write(f'   ‚úÖ {image.product.name[:30]}... (–¥–æ–¥–∞—Ç–∫–æ–≤–µ)')
                    self.stdout.write(f'      URL: {image_url}')
                else:
                    self.stdout.write(f'   ‚ùå {image.product.name[:30]}... - –ø–æ—Ä–æ–∂–Ω—ñ–π URL –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è')
            except Exception as e:
                self.stdout.write(f'   üí• –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}')

    def check_http_url(self, url):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î HTTP –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å URL"""
        try:
            # –î–æ–¥–∞—î–º–æ –±–∞–∑–æ–≤–∏–π –¥–æ–º–µ–Ω —è–∫—â–æ URL –≤—ñ–¥–Ω–æ—Å–Ω–∏–π
            if url.startswith('/'):
                test_url = f'http://localhost:8000{url}'  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            else:
                test_url = url
                
            response = requests.head(test_url, timeout=5)
            if response.status_code == 200:
                self.stdout.write(f'      üåê HTTP OK: {response.status_code}')
            else:
                self.stdout.write(f'      üåê HTTP ERROR: {response.status_code}')
        except Exception as e:
            self.stdout.write(f'      üåê HTTP –ø–æ–º–∏–ª–∫–∞: {e}') 