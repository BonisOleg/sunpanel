import re
from django.core.management.base import BaseCommand
from django.db import transaction
from mainapp.models import Product, Category, Brand, Portfolio, Review

class Command(BaseCommand):
    help = '–ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Ä–æ—Å—ñ–π—Å—å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –æ–ø–∏—Å—ñ–≤'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        
        self.stdout.write("üßπ –ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Ä–æ—Å—ñ–π—Å—å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É...")
        
        if dry_run:
            self.stdout.write(self.style.WARNING("–†–ï–ñ–ò–ú –ü–û–ü–ï–†–ï–î–ù–¨–û–ì–û –ü–ï–†–ï–ì–õ–Ø–î–£ - –∑–º—ñ–Ω–∏ –Ω–µ –±—É–¥—É—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω—ñ"))
        
        total_cleaned = 0
        
        # –û—á–∏—â–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤
        self.stdout.write("\nüì¶ –û—á–∏—â–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤...")
        total_cleaned += self.clean_products(dry_run)
        
        # –û—á–∏—â–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        self.stdout.write("\nüìÇ –û—á–∏—â–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...")
        total_cleaned += self.clean_categories(dry_run)
        
        # –û—á–∏—â–µ–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤  
        self.stdout.write("\nüè∑Ô∏è –û—á–∏—â–µ–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤...")
        total_cleaned += self.clean_brands(dry_run)
        
        # –û—á–∏—â–µ–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ
        self.stdout.write("\nüèóÔ∏è –û—á–∏—â–µ–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ...")
        total_cleaned += self.clean_portfolio(dry_run)
        
        # –û—á–∏—â–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤
        self.stdout.write("\n‚≠ê –û—á–∏—â–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤...")
        total_cleaned += self.clean_reviews(dry_run)
        
        # –ü—ñ–¥—Å—É–º–∫–∏
        if dry_run:
            self.stdout.write(
                self.style.WARNING(
                    f"\nüìã –ü–û–ü–ï–†–ï–î–ù–Ü–ô –ü–ï–†–ï–ì–õ–Ø–î\n"
                    f"–ë—É–¥–µ –æ—á–∏—â–µ–Ω–æ –æ–±'—î–∫—Ç—ñ–≤: {total_cleaned}\n"
                    f"–î–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–µ–∑ --dry-run"
                )
            )
        else:
            self.stdout.write(
                self.style.SUCCESS(
                    f"\nüéâ –û–ß–ò–©–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û\n"
                    f"–û—á–∏—â–µ–Ω–æ –æ–±'—î–∫—Ç—ñ–≤: {total_cleaned}\n"
                    f"–í—Å—ñ —Ç–µ–∫—Å—Ç–∏ —Ç–µ–ø–µ—Ä —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é! üá∫üá¶"
                )
            )

    def is_russian_text(self, text):
        """–í–∏–∑–Ω–∞—á–∞—î —á–∏ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–æ—Å—ñ–π—Å—å–∫—É –º–æ–≤—É"""
        if not text:
            return False
        
        text = text.lower()
        
        # –†–æ—Å—ñ–π—Å—å–∫—ñ —Å–∏–º–≤–æ–ª–∏
        russian_chars = re.findall(r'[—ë—ä—ã—ç]', text)
        if russian_chars:
            return True
        
        # –†–æ—Å—ñ–π—Å—å–∫—ñ —Å–ª—É–∂–±–æ–≤—ñ —Å–ª–æ–≤–∞
        russian_words = [
            '—ç—Ç–æ', '–¥–ª—è', '—á—Ç–æ', '–∫–∞–∫', '–∏–ª–∏', '–µ–≥–æ', '–µ–µ', '–∏—Ö', '–æ—Ç', '–¥–æ', '–ø—Ä–∏', 
            '–±–µ–∑', '–ø–æ–¥', '–Ω–∞–¥', '–ø—Ä–æ', '—á–µ—Ä–µ–∑', '–ø–æ—Å–ª–µ', '–ø–µ—Ä–µ–¥', '–≤–º–µ—Å—Ç–æ', '–∫—Ä–æ–º–µ',
            '—Å—Ä–µ–¥–∏', '–º–µ–∂–¥—É', '–≤–Ω—É—Ç—Ä–∏', '—Å–Ω–∞—Ä—É–∂–∏', '–æ–∫–æ–ª–æ', '–≤–æ–∑–ª–µ', '–≤–æ–∫—Ä—É–≥', '–ø—Ä–æ—Ç–∏–≤',
            '–±–ª–∞–≥–æ–¥–∞—Ä—è', '—Å–æ–≥–ª–∞—Å–Ω–æ', '–≤—Å–ª–µ–¥—Å—Ç–≤–∏–µ', '–Ω–µ—Å–º–æ—Ç—Ä—è', '—è–≤–ª—è–µ—Ç—Å—è', '–∏–º–µ–µ—Ç',
            '–º–æ–∂–µ—Ç', '–¥–æ–ª–∂–µ–Ω', '–±—É–¥–µ—Ç', '–±—ã–ª–∞', '–±—ã–ª–∏', '–µ—Å—Ç—å', '–±—ã–ª–∞', '—á—Ç–æ–±—ã',
            '–ø–æ—Ç–æ–º—É', '–ø–æ—ç—Ç–æ–º—É', '–µ—Å–ª–∏', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–∫—É–¥–∞', '–æ—Ç–∫—É–¥–∞', '–∑–∞—á–µ–º',
            '–ø–æ—á–µ–º—É', '—Å–∫–æ–ª—å–∫–æ', '–∫–æ—Ç–æ—Ä—ã–π', '–∫–∞–∫–æ–π', '—á–µ–π', '—Ç–∞–∫–æ–π', '—ç—Ç–æ—Ç', '—Ç–æ—Ç',
            '–º–æ–π', '—Ç–≤–æ–π', '–Ω–∞—à', '–≤–∞—à', '—Å–≤–æ–π', '–≤–µ—Å—å', '–∫–∞–∂–¥—ã–π', '–ª—é–±–æ–π', '–¥—Ä—É–≥–æ–π',
            '–Ω–æ–≤—ã–π', '—Å—Ç–∞—Ä—ã–π', '–±–æ–ª—å—à–æ–π', '–º–∞–ª–µ–Ω—å–∫–∏–π', '—Ö–æ—Ä–æ—à–∏–π', '–ø–ª–æ—Ö–æ–π', '–ª—É—á—à–∏–π',
            '—Ö—É–¥—à–∏–π', '–ø–µ—Ä–≤—ã–π', '–ø–æ—Å–ª–µ–¥–Ω–∏–π', '—Å–ª–µ–¥—É—é—â–∏–π', '–ø—Ä–µ–¥—ã–¥—É—â–∏–π', '–≤—ã—Å–æ–∫–∏–π',
            '–Ω–∏–∑–∫–∏–π', '–¥–ª–∏–Ω–Ω—ã–π', '–∫–æ—Ä–æ—Ç–∫–∏–π', '—à–∏—Ä–æ–∫–∏–π', '—É–∑–∫–∏–π', '—Ç–æ–ª—Å—Ç—ã–π', '—Ç–æ–Ω–∫–∏–π',
            '–æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç', '–ø–æ–∑–≤–æ–ª—è–µ—Ç', '–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è', '–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è', '–ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω',
            '—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω', '—Å–æ–∑–¥–∞–Ω', '–∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è', '–≤—ã–ø—É—Å–∫–∞–µ—Ç—Å—è'
        ]
        
        for word in russian_words:
            if re.search(r'\b' + re.escape(word) + r'\b', text):
                return True
        
        # –†–æ—Å—ñ–π—Å—å–∫—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏
        tech_terms = [
            '–≥–∏–±—Ä–∏–¥–Ω—ã–π', '–∏–Ω–≤–µ—Ä—Ç–æ—Ä', '—Å–æ–ª–Ω–µ—á–Ω–∞—è', '–ø–∞–Ω–µ–ª—å', '–±–∞—Ç–∞—Ä–µ—è', '—Å–∏—Å—Ç–µ–º–∞',
            '—ç–Ω–µ—Ä–≥–∏—è', '–º–æ—â–Ω–æ—Å—Ç—å', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '—Ç–æ–∫', '–µ–º–∫–æ—Å—Ç—å', '–∑–∞—Ä—è–¥–∫–∞',
            '—Ä–∞–∑—Ä—è–¥–∫–∞', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å', '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
            '—É—Å—Ç–∞–Ω–æ–≤–∫–∞', '–º–æ–Ω—Ç–∞–∂', '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
            '–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å', '–∫–∞—á–µ—Å—Ç–≤–æ', '–≥–∞—Ä–∞–Ω—Ç–∏—è', '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç'
        ]
        
        for term in tech_terms:
            if term in text:
                return True
        
        return False

    def generate_ukrainian_description(self, product):
        """–ì–µ–Ω–µ—Ä—É—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –π–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ç–æ–≤–∞—Ä—É
        name_lower = product.name.lower()
        
        if '—ñ–Ω–≤–µ—Ä—Ç–æ—Ä' in name_lower or '–≥—ñ–±—Ä–∏–¥–Ω–∏–π' in name_lower:
            return self.generate_inverter_description(product)
        elif '–ø–∞–Ω–µ–ª—å' in name_lower or '—Å–æ–Ω—è—á–Ω' in name_lower:
            return self.generate_panel_description(product)
        elif '–∞–∫—É–º—É–ª—è—Ç–æ—Ä' in name_lower or '–±–∞—Ç–∞—Ä–µ—è' in name_lower:
            return self.generate_battery_description(product)
        elif '–∫–æ–º–ø–ª–µ–∫—Ç' in name_lower:
            return self.generate_kit_description(product)
        elif '–º–æ–Ω—Ç–∞–∂' in name_lower:
            return self.generate_service_description(product)
        else:
            return self.generate_generic_description(product)

    def generate_inverter_description(self, product):
        """–ì–µ–Ω–µ—Ä—É—î –æ–ø–∏—Å –¥–ª—è —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞"""
        power = product.power or "–≤–∏—Å–æ–∫–æ—ó –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ"
        efficiency = product.efficiency or "98%"
        warranty = product.warranty or "5 —Ä–æ–∫—ñ–≤"
        
        return f"""
{product.name} - —Å—É—á–∞—Å–Ω–∏–π –≥—ñ–±—Ä–∏–¥–Ω–∏–π —ñ–Ω–≤–µ—Ä—Ç–æ—Ä –≤—ñ–¥ {product.brand.name}, —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ 
–ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–æ–Ω—è—á–Ω–æ—ó –µ–Ω–µ—Ä–≥—ñ—ó. –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å: {power}. –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {efficiency}.

–û—Å–Ω–æ–≤–Ω—ñ –ø–µ—Ä–µ–≤–∞–≥–∏:
‚Ä¢ –í–∏—Å–æ–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
‚Ä¢ –ù–∞–¥—ñ–π–Ω–∞ —Ä–æ–±–æ—Ç–∞ –≤ –±—É–¥—å-—è–∫–∏—Ö –ø–æ–≥–æ–¥–Ω–∏—Ö —É–º–æ–≤–∞—Ö
‚Ä¢ –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏ –∑ –∞–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∏–º–∏ –±–∞—Ç–∞—Ä–µ—è–º–∏
‚Ä¢ –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
‚Ä¢ –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–µ—Ä–µ–Ω–∞–ø—Ä—É–≥–∏ —Ç–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º–∏–∫–∞–Ω–Ω—è
‚Ä¢ –ü—Ä–æ—Å—Ç–∏–π –º–æ–Ω—Ç–∞–∂ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è

–ì–∞—Ä–∞–Ω—Ç—ñ—è: {warranty}. –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤—Å—ñ–º —î–≤—Ä–æ–ø–µ–π—Å—å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º —è–∫–æ—Å—Ç—ñ —Ç–∞ –±–µ–∑–ø–µ–∫–∏.
–Ü–¥–µ–∞–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —Ç–∞ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–∏—Ö —Å–æ–Ω—è—á–Ω–∏—Ö –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ–π.
        """.strip()

    def generate_panel_description(self, product):
        """–ì–µ–Ω–µ—Ä—É—î –æ–ø–∏—Å –¥–ª—è —Å–æ–Ω—è—á–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ"""
        power = product.power or "–≤–∏—Å–æ–∫–æ—ó –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ"
        efficiency = product.efficiency or "22%"
        warranty = product.warranty or "25 —Ä–æ–∫—ñ–≤"
        
        return f"""
{product.name} - –≤–∏—Å–æ–∫–æ–µ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ —Å–æ–Ω—è—á–Ω–∞ –ø–∞–Ω–µ–ª—å –≤—ñ–¥ {product.brand.name}. 
–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å: {power}. –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {efficiency}.

–¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
‚Ä¢ –ú–æ–Ω–æ–∫—Ä–∏—Å—Ç–∞–ª—ñ—á–Ω—ñ –∫—Ä–µ–º–Ω—ñ—î–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
‚Ä¢ –í–∏—Å–æ–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–æ–Ω—è—á–Ω–æ–≥–æ —Å–≤—ñ—Ç–ª–∞
‚Ä¢ –°—Ç—ñ–π–∫—ñ—Å—Ç—å –¥–æ –º–µ—Ö–∞–Ω—ñ—á–Ω–∏—Ö –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
‚Ä¢ –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –Ω–µ—Å–ø—Ä–∏—è—Ç–ª–∏–≤–∏—Ö –ø–æ–≥–æ–¥–Ω–∏—Ö —É–º–æ–≤
‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü—ñ—è –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ
‚Ä¢ –°–µ—Ä—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∞ —è–∫—ñ—Å—Ç—å —Ç–∞ –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å

–ì–∞—Ä–∞–Ω—Ç—ñ—è: {warranty} –Ω–∞ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å. –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –∂–∏—Ç–ª–æ–≤–∏—Ö —Ç–∞ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–∏—Ö –ø—Ä–æ—î–∫—Ç—ñ–≤.
–ó–∞–±–µ–∑–ø–µ—á—É—î —Å—Ç–∞–±—ñ–ª—å–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó –ø—Ä–æ—Ç—è–≥–æ–º –¥–µ—Å—è—Ç–∏–ª—ñ—Ç—å.
        """.strip()

    def generate_battery_description(self, product):
        """–ì–µ–Ω–µ—Ä—É—î –æ–ø–∏—Å –¥–ª—è –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∞"""
        power = product.power or "–≤–∏—Å–æ–∫–æ—ó —î–º–Ω–æ—Å—Ç—ñ"
        warranty = product.warranty or "10 —Ä–æ–∫—ñ–≤"
        
        return f"""
{product.name} - –Ω–∞–¥—ñ–π–Ω–∞ –ª—ñ—Ç—ñ–π-–∑–∞–ª—ñ–∑–æ-—Ñ–æ—Å—Ñ–∞—Ç–Ω–∞ (LiFePO4) –±–∞—Ç–∞—Ä–µ—è –≤—ñ–¥ {product.brand.name}.
–Ñ–º–Ω—ñ—Å—Ç—å: {power}.

–ü–µ—Ä–µ–≤–∞–≥–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó LiFePO4:
‚Ä¢ –î–æ–≤–≥–∏–π —Ç–µ—Ä–º—ñ–Ω —Å–ª—É–∂–±–∏ (–ø–æ–Ω–∞–¥ 6000 —Ü–∏–∫–ª—ñ–≤)
‚Ä¢ –í–∏—Å–æ–∫–∞ –±–µ–∑–ø–µ–∫–∞ –µ–∫—Å–ø–ª—É–∞—Ç–∞—Ü—ñ—ó
‚Ä¢ –°—Ç–∞–±—ñ–ª—å–Ω–∞ —Ä–æ–±–æ—Ç–∞ –ø—Ä–∏ —Ä—ñ–∑–Ω–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö
‚Ä¢ –®–≤–∏–¥–∫–∞ –∑–∞—Ä—è–¥–∫–∞ —Ç–∞ —Ä–æ–∑—Ä—è–¥–∫–∞
‚Ä¢ –ï–∫–æ–ª–æ–≥—ñ—á–Ω—ñ—Å—Ç—å —Ç–∞ –Ω–µ—Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å
‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–∞–º–æ—Ä–æ–∑—Ä—è–¥

–ì–∞—Ä–∞–Ω—Ç—ñ—è: {warranty}. –Ü–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —Å–∏—Å—Ç–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è, 
—Å–æ–Ω—è—á–Ω–∏—Ö –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ–π —Ç–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–∏—Ö –µ–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º.
        """.strip()

    def generate_kit_description(self, product):
        """–ì–µ–Ω–µ—Ä—É—î –æ–ø–∏—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç—É"""
        return f"""
{product.name} - –≥–æ—Ç–æ–≤–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ {product.brand.name}.

–ö–æ–º–ø–ª–µ–∫—Ç –≤–∫–ª—é—á–∞—î:
‚Ä¢ –ì—ñ–±—Ä–∏–¥–Ω–∏–π —ñ–Ω–≤–µ—Ä—Ç–æ—Ä –≤–∏—Å–æ–∫–æ—ó —è–∫–æ—Å—Ç—ñ
‚Ä¢ –õ—ñ—Ç—ñ–π-–∑–∞–ª—ñ–∑–æ-—Ñ–æ—Å—Ñ–∞—Ç–Ω—É –±–∞—Ç–∞—Ä–µ—é
‚Ä¢ –ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–∞–±–µ–ª—ñ —Ç–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
‚Ä¢ –°–∏—Å—Ç–µ–º—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è

–ü–µ—Ä–µ–≤–∞–≥–∏ –≥–æ—Ç–æ–≤–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è:
‚Ä¢ –í—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω—ñ —Ä–∞–∑–æ–º
‚Ä¢ –ü—Ä–æ—Å—Ç–∏–π –º–æ–Ω—Ç–∞–∂ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
‚Ä¢ –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ç–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—è
‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–µ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Ü—ñ–Ω–∞/—è–∫—ñ—Å—Ç—å

–ó–∞–±–µ–∑–ø–µ—á—É—î –Ω–∞–¥—ñ–π–Ω–µ —Ä–µ–∑–µ—Ä–≤–Ω–µ –∂–∏–≤–ª–µ–Ω–Ω—è –¥–ª—è –¥–æ–º—É —á–∏ –æ—Ñ—ñ—Å—É.
        """.strip()

    def generate_service_description(self, product):
        """–ì–µ–Ω–µ—Ä—É—î –æ–ø–∏—Å –¥–ª—è –ø–æ—Å–ª—É–≥"""
        return f"""
{product.name} - –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –ø–æ—Å–ª—É–≥–∏ –≤—ñ–¥ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤.

–©–æ –≤–∫–ª—é—á–∞—î –ø–æ—Å–ª—É–≥–∞:
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –æ–±'—î–∫—Ç–∞ —Ç–∞ –ø–æ—Ç—Ä–µ–±
‚Ä¢ –†–æ–∑—Ä–æ–±–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É
‚Ä¢ –Ø–∫—ñ—Å–Ω–∏–π –º–æ–Ω—Ç–∞–∂ –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –≤ –µ–∫—Å–ø–ª—É–∞—Ç–∞—Ü—ñ—é
‚Ä¢ –ù–∞–≤—á–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è

–ü–µ—Ä–µ–≤–∞–≥–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ –∑ –Ω–∞–º–∏:
‚Ä¢ –î–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ –ø–æ–Ω–∞–¥ 5 —Ä–æ–∫—ñ–≤
‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö —ñ–Ω–∂–µ–Ω–µ—Ä—ñ–≤
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —è–∫—ñ—Å–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç—ñ—è –Ω–∞ —Ä–æ–±–æ—Ç–∏ —Ç–∞ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
‚Ä¢ –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø–æ—Å–ª—É–≥ "–ø—ñ–¥ –∫–ª—é—á"

–ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É.
        """.strip()

    def generate_generic_description(self, product):
        """–ì–µ–Ω–µ—Ä—É—î –∑–∞–≥–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É"""
        return f"""
{product.name} - —è–∫—ñ—Å–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç –≤—ñ–¥ {product.brand.name} –¥–ª—è —Å–æ–Ω—è—á–Ω–æ—ó –µ–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏.

–û—Å–Ω–æ–≤–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
‚Ä¢ –°—É—á–∞—Å–Ω—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
‚Ä¢ –í–∏—Å–æ–∫–∞ –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å —Ç–∞ –¥–æ–≤–≥–æ–≤—ñ—á–Ω—ñ—Å—Ç—å
‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–µ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Ü—ñ–Ω–∞/—è–∫—ñ—Å—Ç—å
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞

–Ü–¥–µ–∞–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏—Ö —Å–æ–Ω—è—á–Ω–∏—Ö –µ–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º.
–ó–∞–±–µ–∑–ø–µ—á—É—î —Å—Ç–∞–±—ñ–ª—å–Ω—É —Ä–æ–±–æ—Ç—É —Ç–∞ –µ–∫–æ–Ω–æ–º—ñ—é –∫–æ—à—Ç—ñ–≤ –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó.
        """.strip()

    def clean_products(self, dry_run):
        """–û—á–∏—â–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –≤—ñ–¥ —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏"""
        products = Product.objects.all()
        cleaned_count = 0
        
        for product in products:
            needs_cleaning = False
            original_name = product.name
            original_description = product.description
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–ø–∏—Å
            if self.is_russian_text(product.description):
                new_description = self.generate_ukrainian_description(product)
                needs_cleaning = True
                
                if dry_run:
                    self.stdout.write(f"   üîÑ ID {product.id}: {product.name[:50]}...")
                    self.stdout.write(f"      üìù –ù–æ–≤–∏–π –æ–ø–∏—Å: {new_description[:100]}...")
                else:
                    product.description = new_description
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è
            if product.model and self.is_russian_text(product.model):
                product.model = re.sub(r'[–∞-—è—ë]+', '', product.model, flags=re.IGNORECASE).strip()
                needs_cleaning = True
            
            if product.country and self.is_russian_text(product.country):
                # –ó–∞–º—ñ–Ω—è—î–º–æ –Ω–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–∑–≤–∏
                if '–∫–∏—Ç–∞–π' in product.country.lower() or 'china' in product.country.lower():
                    product.country = '–ö–∏—Ç–∞–π'
                elif '–≥–µ—Ä–º–∞–Ω–∏—è' in product.country.lower() or 'germany' in product.country.lower():
                    product.country = '–ù—ñ–º–µ—á—á–∏–Ω–∞'
                else:
                    product.country = '–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –≤–∏—Ä–æ–±–Ω–∏–∫'
                needs_cleaning = True
            
            if needs_cleaning:
                if not dry_run:
                    with transaction.atomic():
                        product.save()
                        self.stdout.write(f"   ‚úÖ –û—á–∏—â–µ–Ω–æ: {product.name[:50]}...")
                cleaned_count += 1
        
        return cleaned_count

    def clean_categories(self, dry_run):
        """–û—á–∏—â–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
        categories = Category.objects.all()
        cleaned_count = 0
        
        for category in categories:
            if self.is_russian_text(category.description):
                # –°—Ç–≤–æ—Ä—é—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –æ–ø–∏—Å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
                category.description = f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è {category.name} –º—ñ—Å—Ç–∏—Ç—å —è–∫—ñ—Å–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è —Å–æ–Ω—è—á–Ω–æ—ó –µ–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –≤—ñ–¥ –ø—Ä–æ–≤—ñ–¥–Ω–∏—Ö –≤–∏—Ä–æ–±–Ω–∏–∫—ñ–≤."
                
                if dry_run:
                    self.stdout.write(f"   üîÑ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category.name}")
                else:
                    category.save()
                    self.stdout.write(f"   ‚úÖ –û—á–∏—â–µ–Ω–æ: {category.name}")
                cleaned_count += 1
        
        return cleaned_count

    def clean_brands(self, dry_run):
        """–û—á–∏—â–µ–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤"""
        brands = Brand.objects.all()
        cleaned_count = 0
        
        for brand in brands:
            if self.is_russian_text(brand.description):
                # –°—Ç–≤–æ—Ä—é—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –æ–ø–∏—Å –±—Ä–µ–Ω–¥—É
                brand.description = f"{brand.name} - –ø—Ä–æ–≤—ñ–¥–Ω–∏–π –≤–∏—Ä–æ–±–Ω–∏–∫ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –¥–ª—è —Å–æ–Ω—è—á–Ω–æ—ó –µ–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –∑ –±–∞–≥–∞—Ç–æ—Ä—ñ—á–Ω–∏–º –¥–æ—Å–≤—ñ–¥–æ–º —Ç–∞ —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è–º–∏."
                
                if dry_run:
                    self.stdout.write(f"   üîÑ –ë—Ä–µ–Ω–¥: {brand.name}")
                else:
                    brand.save()
                    self.stdout.write(f"   ‚úÖ –û—á–∏—â–µ–Ω–æ: {brand.name}")
                cleaned_count += 1
        
        return cleaned_count

    def clean_portfolio(self, dry_run):
        """–û—á–∏—â–µ–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ"""
        portfolios = Portfolio.objects.all()
        cleaned_count = 0
        
        for portfolio in portfolios:
            if self.is_russian_text(portfolio.description):
                # –°—Ç–≤–æ—Ä—é—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –æ–ø–∏—Å –ø—Ä–æ—î–∫—Ç—É
                portfolio.description = f"–£—Å–ø—ñ—à–Ω–æ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ—î–∫—Ç {portfolio.title}. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—É—á–∞—Å–Ω–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –¥–ª—è —Å–æ–Ω—è—á–Ω–æ—ó –µ–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –∑ –≤–∏—Å–æ–∫–∏–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ."
                
                if dry_run:
                    self.stdout.write(f"   üîÑ –ü—Ä–æ—î–∫—Ç: {portfolio.title}")
                else:
                    portfolio.save()
                    self.stdout.write(f"   ‚úÖ –û—á–∏—â–µ–Ω–æ: {portfolio.title}")
                cleaned_count += 1
        
        return cleaned_count

    def clean_reviews(self, dry_run):
        """–û—á–∏—â–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤"""
        reviews = Review.objects.all()
        cleaned_count = 0
        
        # –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –≤—ñ–¥–≥—É–∫–∏ –¥–ª—è –∑–∞–º—ñ–Ω–∏
        ukrainian_reviews = [
            "–î—É–∂–µ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∏–π —è–∫—ñ—Å—Ç—é –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è! –°–æ–Ω—è—á–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—è –ø—Ä–∞—Ü—é—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ, –µ–∫–æ–Ω–æ–º—ñ—è –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó –≤—ñ–¥—á—É—Ç–Ω–∞ –∑ –ø–µ—Ä—à–∏—Ö –¥–Ω—ñ–≤. –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤ –≤–∏–∫–æ–Ω–∞–ª–∞ –º–æ–Ω—Ç–∞–∂ —à–≤–∏–¥–∫–æ —Ç–∞ —è–∫—ñ—Å–Ω–æ.",
            "–ß—É–¥–æ–≤–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è –Ω–∞—à–æ–≥–æ –¥–æ–º—É! –Ü–Ω–≤–µ—Ä—Ç–æ—Ä —Ç–∞ –±–∞—Ç–∞—Ä–µ—ó –ø—Ä–∞—Ü—é—é—Ç—å –±–µ–∑–¥–æ–≥–∞–Ω–Ω–æ, –Ω–∞–≤—ñ—Ç—å –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –µ–ª–µ–∫—Ç—Ä–∏–∫–∏ –º–∞—î–º–æ —Å—Ç–∞–±—ñ–ª—å–Ω–µ –∂–∏–≤–ª–µ–Ω–Ω—è. –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å—ñ–º, —Ö—Ç–æ —Ö–æ—á–µ –±—É—Ç–∏ –µ–Ω–µ—Ä–≥–æ–Ω–µ–∑–∞–ª–µ–∂–Ω–∏–º.",
            "–í—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ–Ω—è—á–Ω—ñ –ø–∞–Ω–µ–ª—ñ –Ω–∞ –¥–∞—Ö—É - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–µ—Ä—à–∏–≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è! –í–ª—ñ—Ç–∫—É –º–∞–π–∂–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –ø–æ–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Ç—Ä–µ–±–∏ –≤ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó. –Ø–∫—ñ—Å—Ç—å –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –Ω–∞ –Ω–∞–π–≤–∏—â–æ–º—É —Ä—ñ–≤–Ω—ñ, —Å–µ—Ä–≤—ñ—Å —Ç–∞–∫–æ–∂ –≤—ñ–¥–º—ñ–Ω–Ω–∏–π.",
            "–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –∫–æ–º–∞–Ω–¥–∞, —è–∫—ñ—Å–Ω–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è, –≤—ñ–¥–º—ñ–Ω–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ù–∞—à–∞ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ —Å–æ–Ω—è—á–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—è –æ–∫—É–ø–∞—î—Ç—å—Å—è —à–≤–∏–¥—à–µ, –Ω—ñ–∂ –ø–ª–∞–Ω—É–≤–∞–ª–∏. –û–±–æ–≤'—è–∑–∫–æ–≤–æ –±—É–¥–µ–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–≤–∞—Ç–∏ –¥—Ä—É–∑—è–º —Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º.",
            "–ì—ñ–±—Ä–∏–¥–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑ –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∞–º–∏ - —Ü–µ —Ç–µ, —â–æ –Ω–∞–º –±—É–ª–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ! –¢–µ–ø–µ—Ä –º–∞—î–º–æ –µ–ª–µ–∫—Ç—Ä–∏–∫—É –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –∞–≤–∞—Ä—ñ—è—Ö –≤ –º–µ—Ä–µ–∂—ñ. –ú–æ–Ω—Ç–∞–∂ –≤–∏–∫–æ–Ω–∞–ª–∏ –∞–∫—É—Ä–∞—Ç–Ω–æ, –≤—Å–µ –ø—Ä–∞—Ü—é—î —è–∫ –≥–æ–¥–∏–Ω–Ω–∏–∫. –î—è–∫—É—î–º–æ –∑–∞ —è–∫—ñ—Å–Ω—É —Ä–æ–±–æ—Ç—É!"
        ]
        
        for i, review in enumerate(reviews):
            if self.is_russian_text(review.review_text):
                new_text = ukrainian_reviews[i % len(ukrainian_reviews)]
                
                if dry_run:
                    self.stdout.write(f"   üîÑ –í—ñ–¥–≥—É–∫ –≤—ñ–¥: {review.client_name}")
                else:
                    review.review_text = new_text
                    review.save()
                    self.stdout.write(f"   ‚úÖ –û—á–∏—â–µ–Ω–æ –≤—ñ–¥–≥—É–∫: {review.client_name}")
                cleaned_count += 1
        
        return cleaned_count 