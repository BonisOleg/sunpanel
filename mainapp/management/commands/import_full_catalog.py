"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É –∫–∞—Ç–∞–ª–æ–≥—É –∑ Excel —Ç–∞–±–ª–∏—Ü—å
–Ü–º–ø–æ—Ä—Ç—É—î –≤—Å—ñ 42 —Ç–æ–≤–∞—Ä–∏ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è–º HTML
"""
import pandas as pd
import requests
import re
import os
import time
import hashlib
from urllib.parse import urlparse
from django.core.management.base import BaseCommand, CommandError
from django.core.files.base import ContentFile
from django.db import transaction
from django.utils.text import slugify
from mainapp.models import Product, Category, Brand, ProductImage
from bs4 import BeautifulSoup

class Command(BaseCommand):
    help = '–ü–æ–≤–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥—É –∑ Excel —Ç–∞–±–ª–∏—Ü—å (–≤—Å—ñ 42 —Ç–æ–≤–∞—Ä–∏)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear-existing',
            action='store_true',
            help='–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ —ñ–º–ø–æ—Ä—Ç–æ–º'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–†–µ–∂–∏–º –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É'
        )

    def handle(self, *args, **options):
        self.clear_existing = options['clear_existing']
        self.dry_run = options['dry_run']
        
        if self.dry_run:
            self.stdout.write(self.style.WARNING("üîç –†–ï–ñ–ò–ú –ü–û–ü–ï–†–ï–î–ù–¨–û–ì–û –ü–ï–†–ï–ì–õ–Ø–î–£"))
        
        self.stdout.write("üöÄ –ü–û–í–ù–ò–ô –Ü–ú–ü–û–†–¢ –ö–ê–¢–ê–õ–û–ì–£ (42 –¢–û–í–ê–†–ò)")
        self.stdout.write('='*60)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats = {
            'products_created': 0,
            'categories_created': 0,
            'brands_created': 0,
            'images_downloaded': 0,
            'products_skipped': 0,
            'products_translated': 0,
            'errors': 0
        }
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª–∏
            if not os.path.exists('export-products-10-07-25_11-38-56.xlsx'):
                raise CommandError('–§–∞–π–ª export-products-10-07-25_11-38-56.xlsx –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π')
            
            if not os.path.exists('second.xlsx'):
                raise CommandError('–§–∞–π–ª second.xlsx –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π')
            
            # –û—á–∏—â—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ —Ç–æ–≤–∞—Ä–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if self.clear_existing:
                self.clear_existing_products()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            self.create_main_categories()
            
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–æ–≤–∞—Ä–∏
            self.import_products()
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.show_final_stats()
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}"))
            raise

    def clear_existing_products(self):
        """–í–∏–¥–∞–ª—è—î –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ —Ç–æ–≤–∞—Ä–∏"""
        if self.dry_run:
            self.stdout.write("   [DRY RUN] –í–∏–¥–∞–ª–∏–≤ –±–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏")
            return
            
        count = Product.objects.count()
        if count > 0:
            Product.objects.all().delete()
            self.stdout.write(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ {count} —ñ—Å–Ω—É—é—á–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤")

    def create_main_categories(self):
        """–°—Ç–≤–æ—Ä—é—î 4 –æ—Å–Ω–æ–≤–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        categories_data = [
            {
                'name': '–Ü–Ω–≤–µ—Ä—Ç–æ—Ä–∏',
                'description': '–ì—ñ–±—Ä–∏–¥–Ω—ñ —Ç–∞ —Å–æ–Ω—è—á–Ω—ñ —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è'
            },
            {
                'name': '–ê–∫—É–º—É–ª—è—Ç–æ—Ä–Ω—ñ –±–∞—Ç–∞—Ä–µ—ó', 
                'description': 'LiFePO4 —Ç–∞ —ñ–Ω—à—ñ —Ç–∏–ø–∏ –∞–∫—É–º—É–ª—è—Ç–æ—Ä—ñ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó'
            },
            {
                'name': '–°–æ–Ω—è—á–Ω—ñ –ø–∞–Ω–µ–ª—ñ',
                'description': '–ú–æ–Ω–æ–∫—Ä–∏—Å—Ç–∞–ª—ñ—á–Ω—ñ —Ç–∞ –ø–æ–ª—ñ–∫—Ä–∏—Å—Ç–∞–ª—ñ—á–Ω—ñ —Å–æ–Ω—è—á–Ω—ñ –ø–∞–Ω–µ–ª—ñ'
            },
            {
                'name': '–ö–æ–º–ø–ª–µ–∫—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è',
                'description': '–ì–æ—Ç–æ–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –µ–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è'
            },
            {
                'name': '–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏',
                'description': '–ú–æ–Ω—Ç–∞–∂, –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è'
            }
        ]
        
        for cat_data in categories_data:
            if self.dry_run:
                self.stdout.write(f"   [DRY RUN] –°—Ç–≤–æ—Ä–∏–≤ –±–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {cat_data['name']}")
                continue
                
            category, created = Category.objects.get_or_create(
                name=cat_data['name'],
                defaults={
                    'description': cat_data['description'],
                    'is_active': True
                }
            )
            
            if created:
                self.stats['categories_created'] += 1
                self.stdout.write(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {category.name}")

    def get_category_mapping(self):
        """–ú–∞–ø—ñ–Ω–≥ –≥—Ä—É–ø —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        return {
            '–ò–Ω–≤–µ—Ä—Ç–æ—Ä—ã Must': '–Ü–Ω–≤–µ—Ä—Ç–æ—Ä–∏',
            '–ò–Ω–≤–µ—Ä—Ç–æ—Ä—ã Deye': '–Ü–Ω–≤–µ—Ä—Ç–æ—Ä–∏', 
            '–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã –¥–ª—è –ò–ë–ü MUST': '–ê–∫—É–º—É–ª—è—Ç–æ—Ä–Ω—ñ –±–∞—Ç–∞—Ä–µ—ó',
            '–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã –¥–ª—è –ò–ë–ü Deye': '–ê–∫—É–º—É–ª—è—Ç–æ—Ä–Ω—ñ –±–∞—Ç–∞—Ä–µ—ó',
            '–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã –¥–ª—è –ò–ë–ü lvtopsun': '–ê–∫—É–º—É–ª—è—Ç–æ—Ä–Ω—ñ –±–∞—Ç–∞—Ä–µ—ó',
            '–°–æ–ª–Ω–µ—á–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ Longi Solar': '–°–æ–Ω—è—á–Ω—ñ –ø–∞–Ω–µ–ª—ñ',
            '–°–æ–ª–Ω–µ—á–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ Risen Energy': '–°–æ–Ω—è—á–Ω—ñ –ø–∞–Ω–µ–ª—ñ',
            '–ê–≤—Ç–æ–Ω–æ–º–Ω—ñ —Ç–∞ –≥—ñ–±—Ä–∏–¥–Ω—ñ –∫–æ–º–ø–ª–µ–∫—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è': '–ö–æ–º–ø–ª–µ–∫—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è',
            '–î–æ–ø–æ–ª–Ω–∏–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏': '–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏'
        }

    def translate_russian_to_ukrainian(self, text):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É"""
        if pd.isna(text):
            return ""
            
        text = str(text).strip()
        
        # –°–ª–æ–≤–Ω–∏–∫ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
        translations = {
            # –ó–∞–≥–∞–ª—å–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏
            '–ì–∏–±—Ä–∏–¥–Ω—ã–π': '–ì—ñ–±—Ä–∏–¥–Ω–∏–π',
            '–∏–Ω–≤–µ—Ä—Ç–æ—Ä': '—ñ–Ω–≤–µ—Ä—Ç–æ—Ä',
            '–ò–Ω–≤–µ—Ä—Ç–æ—Ä': '–Ü–Ω–≤–µ—Ä—Ç–æ—Ä',
            '–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞—è': '–ê–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞',
            '–±–∞—Ç–∞—Ä–µ—è': '–±–∞—Ç–∞—Ä–µ—è',
            '–ë–∞—Ç–∞—Ä–µ—è': '–ë–∞—Ç–∞—Ä–µ—è',
            '–°–æ–ª–Ω–µ—á–Ω–∞—è': '–°–æ–Ω—è—á–Ω–∞',
            '–ø–∞–Ω–µ–ª—å': '–ø–∞–Ω–µ–ª—å',
            '–ü–∞–Ω–µ–ª—å': '–ü–∞–Ω–µ–ª—å',
            '–ö–æ–º–ø–ª–µ–∫—Ç': '–ö–æ–º–ø–ª–µ–∫—Ç',
            '—Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ': '—Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ',
            '–ø–∏—Ç–∞–Ω–∏—è': '–∂–∏–≤–ª–µ–Ω–Ω—è',
            '–∂–∏–∑–Ω–∏': '–∂–∏—Ç—Ç—è',
            '–º–æ—â–Ω–æ—Å—Ç—å': '–ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å',
            '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ': '–Ω–∞–ø—Ä—É–≥–∞',
            '–µ–º–∫–æ—Å—Ç—å': '—î–º–Ω—ñ—Å—Ç—å',
            '–≥–∞—Ä–∞–Ω—Ç–∏—è': '–≥–∞—Ä–∞–Ω—Ç—ñ—è',
            '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å': '–≤–∏—Ä–æ–±–Ω–∏–∫',
            '–≤—ã—Å–æ–∫–æ–µ': '–≤–∏—Å–æ–∫–µ',
            '–Ω–∏–∑–∫–æ–µ': '–Ω–∏–∑—å–∫–µ',
            '—Å–∏—Å—Ç–µ–º–∞': '—Å–∏—Å—Ç–µ–º–∞',
            '—Ö—Ä–∞–Ω–µ–Ω–∏—è': '–∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è',
            '—ç–Ω–µ—Ä–≥–∏–∏': '–µ–Ω–µ—Ä–≥—ñ—ó',
            '–º–æ–¥—É–ª–µ–π': '–º–æ–¥—É–ª—ñ–≤',
            '—É—Å–ª—É–≥–∏': '–ø–æ—Å–ª—É–≥–∏',
            '–º–æ–Ω—Ç–∞–∂': '–º–æ–Ω—Ç–∞–∂',
            '—É—Å—Ç–∞–Ω–æ–≤–∫–∞': '–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è',
            
            # –¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏
            '–∫–í—Ç': '–∫–í—Ç',
            '–∫–í—Ç—á': '–∫–í—Ç‚ãÖ–≥–æ–¥',
            '–ª–∏—Ç–∏–µ–≤–∞—è': '–ª—ñ—Ç—ñ—î–≤–∞',
            '–∂–µ–ª–µ–∑–æ—Ñ–æ—Å—Ñ–∞—Ç–Ω–∞—è': '–∑–∞–ª—ñ–∑–Ω–æ-—Ñ–æ—Å—Ñ–∞—Ç–Ω–∞',
            'LiFePO4': 'LiFePO4',
            '—Ñ–∞–∑–Ω—ã–π': '—Ñ–∞–∑–Ω–∏–π',
            '–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π': '–∞–≤—Ç–æ–Ω–æ–º–Ω–∏–π',
            '–≥–∏–±—Ä–∏–¥–Ω—ã–π': '–≥—ñ–±—Ä–∏–¥–Ω–∏–π',
            '–≤—ã—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞—è': '–≤–∏—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞',
            '–Ω–∏–∑–∫–æ–≤–æ–ª—å—Ç–Ω–∞—è': '–Ω–∏–∑—å–∫–æ–≤–æ–ª—å—Ç–Ω–∞',
            
            # –ë—Ä–µ–Ω–¥–∏ (–∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ —î)
            'Must': 'Must',
            'Deye': 'Deye',
            'Longi': 'Longi',
            'LONGI': 'LONGI',
            'Risen': 'Risen',
            'lvtopsun': 'lvtopsun',
            'LVTOPSUN': 'LVTOPSUN',
            
            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏': '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏',
            '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ': '–¢–µ—Ö–Ω—ñ—á–Ω—ñ',
            '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã': '–ø–∞—Ä–∞–º–µ—Ç—Ä–∏',
            '–æ–ø–∏—Å–∞–Ω–∏–µ': '–æ–ø–∏—Å',
            '–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ': '–∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è',
            '–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞': '–ø–µ—Ä–µ–≤–∞–≥–∏',
            '–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏': '–æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ',
        }
        
        # –ó–∞–º—ñ–Ω–∞ –ø–æ —Å–ª–æ–≤–Ω–∏–∫—É
        for ru_word, uk_word in translations.items():
            text = re.sub(re.escape(ru_word), uk_word, text, flags=re.IGNORECASE)
            
        return text

    def clean_html_description(self, description):
        """–û—á–∏—â–∞—î –æ–ø–∏—Å –≤—ñ–¥ HTML —Ç–µ–≥—ñ–≤, –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        if pd.isna(description):
            return ""
        
        description = str(description)
        
        # –ó–∞–º—ñ–Ω—é—î–º–æ <br /> –Ω–∞ –Ω–æ–≤—ñ —Ä—è–¥–∫–∏
        description = description.replace('<br />', '\n').replace('<br/>', '\n').replace('<br>', '\n')
        
        # –í–∏–¥–∞–ª—è—î–º–æ HTML —Ç–µ–≥–∏
        soup = BeautifulSoup(description, 'html.parser')
        clean_text = soup.get_text()
        
        # –û—á–∏—â—É—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
        lines = [line.strip() for line in clean_text.split('\n') if line.strip()]
        
        return '\n'.join(lines)

    def contains_russian(self, text):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–æ—Å—ñ–π—Å—å–∫—ñ —Å–∏–º–≤–æ–ª–∏"""
        if pd.isna(text):
            return False
        
        russian_chars = ['—ã', '—ç', '—ä', '—ë']
        text_lower = str(text).lower()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ—Å—ñ–π—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏
        for char in russian_chars:
            if char in text_lower:
                return True
                
        return False

    def create_or_get_brand(self, brand_name):
        """–°—Ç–≤–æ—Ä—é—î –∞–±–æ –æ—Ç—Ä–∏–º—É—î –±—Ä–µ–Ω–¥"""
        if pd.isna(brand_name):
            brand_name = "–ù–µ–≤—ñ–¥–æ–º–∏–π"
        
        brand_name = str(brand_name).strip()
        
        if self.dry_run:
            return None
            
        brand, created = Brand.objects.get_or_create(
            name=brand_name,
            defaults={
                'description': f'–ü—Ä–æ–¥—É–∫—Ü—ñ—è –±—Ä–µ–Ω–¥—É {brand_name}',
                'is_active': True
            }
        )
        
        if created:
            self.stats['brands_created'] += 1
            self.stdout.write(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –±—Ä–µ–Ω–¥: {brand.name}")
        
        return brand

    def download_image(self, url, product_name):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ URL"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            response = requests.get(url.strip(), headers=headers, timeout=30)
            response.raise_for_status()
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
            url_hash = hashlib.md5(url.encode()).hexdigest()[:8]
            safe_name = re.sub(r'[^\w\-_.]', '_', product_name)[:30]
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
            parsed_url = urlparse(url)
            path = parsed_url.path.lower()
            if path.endswith('.jpg') or path.endswith('.jpeg'):
                ext = '.jpg'
            elif path.endswith('.png'):
                ext = '.png'
            else:
                ext = '.jpg'  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            
            filename = f"{safe_name}_{url_hash}{ext}"
            
            self.stats['images_downloaded'] += 1
            return ContentFile(response.content, name=filename)
            
        except Exception as e:
            self.stdout.write(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {url}: {str(e)}")
            return None

    def get_characteristics(self, row):
        """–í–∏—Ç—è–≥—É—î —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä—É"""
        characteristics = {}
        
        for i in range(15):  # 0-14 —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            name_col = f'–ù–∞–∑–≤–∞_–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏{"."+str(i) if i > 0 else ""}'
            value_col = f'–ó–Ω–∞—á–µ–Ω–Ω—è_–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏{"."+str(i) if i > 0 else ""}'
            unit_col = f'–û–¥–∏–Ω–∏—Ü—è_–≤–∏–º—ñ—Ä—É_–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏{"."+str(i) if i > 0 else ""}'
            
            if name_col in row.index and value_col in row.index:
                char_name = row[name_col]
                char_value = row[value_col]
                char_unit = row.get(unit_col, '')
                
                if pd.notna(char_name) and pd.notna(char_value):
                    # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –Ω–∞–∑–≤—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                    char_name = self.translate_russian_to_ukrainian(char_name)
                    
                    value_str = str(char_value)
                    if pd.notna(char_unit):
                        char_unit = self.translate_russian_to_ukrainian(char_unit)
                        if char_unit and not self.contains_russian(char_unit):
                            value_str += f" {char_unit}"
                    
                    if char_name and not self.contains_russian(char_name):
                        characteristics[char_name] = value_str
        
        return characteristics

    def import_products(self):
        """–Ü–º–ø–æ—Ä—Ç—É—î –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∑ Excel —Ñ–∞–π–ª—É"""
        self.stdout.write("\nüì¶ –ß–∏—Ç–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ Excel...")
        
        df = pd.read_excel('export-products-10-07-25_11-38-56.xlsx')
        category_mapping = self.get_category_mapping()
        
        self.stdout.write(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(df)} —Ç–æ–≤–∞—Ä—ñ–≤ —É —Ñ–∞–π–ª—ñ")
        
        for index, row in df.iterrows():
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤–∏ (—É–∫—Ä–∞—ó–Ω—Å—å–∫—É –∞–±–æ —Ä–æ—Å—ñ–π—Å—å–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É)
                ukrainian_name = row.get('–ù–∞–∑–≤–∞_–ø–æ–∑–∏—Ü—ñ—ó_—É–∫—Ä')
                russian_name = row.get('–ù–∞–∑–≤–∞_–ø–æ–∑–∏—Ü—ñ—ó')
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É –Ω–∞–∑–≤—É
                if pd.notna(ukrainian_name) and ukrainian_name.strip():
                    final_name = self.clean_html_description(ukrainian_name)
                elif pd.notna(russian_name) and russian_name.strip():
                    # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –∑ —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó
                    translated_name = self.translate_russian_to_ukrainian(russian_name)
                    final_name = self.clean_html_description(translated_name)
                    self.stats['products_translated'] += 1
                    self.stdout.write(f"üîÑ –ü–µ—Ä–µ–∫–ª–∞–¥ —Ç–æ–≤–∞—Ä—É {index+1}: {russian_name[:50]}...")
                else:
                    self.stdout.write(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–æ–≤–∞—Ä {index+1}: –Ω–µ–º–∞—î –Ω–∞–∑–≤–∏")
                    self.stats['products_skipped'] += 1
                    continue
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥—Ä—É–ø—É —Ç–æ–≤–∞—Ä—É
                product_group = row.get('–ù–∞–∑–≤–∞_–≥—Ä—É–ø–∏')
                if pd.isna(product_group) or product_group not in category_mapping:
                    self.stdout.write(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–æ–≤–∞—Ä {index+1}: –Ω–µ–≤—ñ–¥–æ–º–∞ –≥—Ä—É–ø–∞ '{product_group}'")
                    self.stats['products_skipped'] += 1
                    continue
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä—É
                category_name = category_mapping[product_group]
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ –æ–ø–∏—Å
                ukrainian_description = row.get('–û–ø–∏—Å_—É–∫—Ä')
                russian_description = row.get('–û–ø–∏—Å')
                
                if pd.notna(ukrainian_description) and ukrainian_description.strip():
                    final_description = self.clean_html_description(ukrainian_description)
                elif pd.notna(russian_description) and russian_description.strip():
                    translated_desc = self.translate_russian_to_ukrainian(russian_description)
                    final_description = self.clean_html_description(translated_desc)
                else:
                    final_description = ""
                
                price = row.get('–¶—ñ–Ω–∞', 0)
                brand_name = row.get('–í–∏—Ä–æ–±–Ω–∏–∫')
                
                if self.dry_run:
                    self.stdout.write(f"   [DRY RUN] –°—Ç–≤–æ—Ä–∏–≤ –±–∏ —Ç–æ–≤–∞—Ä: {final_name}")
                    continue
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–∞ –±—Ä–µ–Ω–¥
                category = Category.objects.get(name=category_name)
                brand = self.create_or_get_brand(brand_name)
                
                # –û—Ç—Ä–∏–º—É—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                characteristics = self.get_characteristics(row)
                
                # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π –æ–ø–∏—Å –∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
                full_description = final_description
                if characteristics:
                    full_description += "\n\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
                    for char_name, char_value in characteristics.items():
                        full_description += f"‚Ä¢ {char_name}: {char_value}\n"
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–æ–≤–∞—Ä
                product = Product.objects.create(
                    name=final_name,
                    description=full_description,
                    price=float(price) if pd.notna(price) else 0,
                    category=category,
                    brand=brand,
                    model=f"{brand_name} Model" if brand_name else "Standard",
                    in_stock=True,
                    featured=False
                )
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                images_urls = row.get('–ü–æ—Å–∏–ª–∞–Ω–Ω—è_–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è')
                if pd.notna(images_urls):
                    image_urls = [url.strip() for url in str(images_urls).split(',')]
                    
                    for img_index, img_url in enumerate(image_urls):
                        if img_url:
                            image_file = self.download_image(img_url, final_name)
                            if image_file:
                                if img_index == 0:
                                    # –ü–µ—Ä—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫ –≥–æ–ª–æ–≤–Ω–µ
                                    product.image = image_file
                                    product.save()
                                else:
                                    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –≥–∞–ª–µ—Ä–µ—é
                                    ProductImage.objects.create(
                                        product=product,
                                        image=image_file,
                                        alt_text=f"{final_name} - –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {img_index + 1}",
                                        order=img_index
                                    )
                
                self.stats['products_created'] += 1
                self.stdout.write(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–æ–≤–∞—Ä: {final_name}")
                
                # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
                time.sleep(0.5)
                
            except Exception as e:
                self.stats['errors'] += 1
                self.stdout.write(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É {index+1}: {str(e)}")

    def show_final_stats(self):
        """–ü–æ–∫–∞–∑—É—î —Ñ—ñ–Ω–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.stdout.write('\n' + '='*60)
        self.stdout.write('üéâ –Ü–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù–û')
        self.stdout.write(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {self.stats['products_created']}")
        self.stdout.write(f"üîÑ –ü–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ –∑ —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó: {self.stats['products_translated']}")
        self.stdout.write(f"üìÇ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {self.stats['categories_created']}")
        self.stdout.write(f"üè∑Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–æ –±—Ä–µ–Ω–¥—ñ–≤: {self.stats['brands_created']}")
        self.stdout.write(f"üñºÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {self.stats['images_downloaded']}")
        self.stdout.write(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {self.stats['products_skipped']}")
        self.stdout.write(f"‚ùå –ü–æ–º–∏–ª–∫–∏: {self.stats['errors']}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        if not self.dry_run:
            self.stdout.write('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:')
            for category in Category.objects.all():
                count = Product.objects.filter(category=category).count()
                if count > 0:
                    self.stdout.write(f"   üìÇ {category.name}: {count} —Ç–æ–≤–∞—Ä—ñ–≤")
        
        self.stdout.write('='*60) 