import pandas as pd
import requests
import re
import os
import time
from urllib.parse import urlparse, urljoin
from django.core.management.base import BaseCommand, CommandError
from django.core.files.base import ContentFile
from django.db import transaction, models
from django.utils.text import slugify
from mainapp.models import Product, Category, Brand, ProductImage
from bs4 import BeautifulSoup
from django.db import models


class Command(BaseCommand):
    help = '–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —ñ–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ø–æ–≤–Ω–æ—é —É–∫—Ä–∞—ó–Ω—ñ–∑–∞—Ü—ñ—î—é —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—î—é —è–∫ –Ω–∞ —Å–∞–π—Ç—ñ'

    def add_arguments(self, parser):
        parser.add_argument(
            '--products-file',
            type=str,
            default='export-products-10-07-25_11-38-56.xlsx',
            help='–§–∞–π–ª –∑ —Ç–æ–≤–∞—Ä–∞–º–∏'
        )
        parser.add_argument(
            '--categories-file', 
            type=str,
            default='second.xlsx',
            help='–§–∞–π–ª –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏'
        )
        parser.add_argument(
            '--clear-existing',
            action='store_true',
            help='–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ —ñ–º–ø–æ—Ä—Ç–æ–º'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–†–µ–∂–∏–º –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É'
        )
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='–î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥'
        )

    def handle(self, *args, **options):
        self.products_file = options['products_file']
        self.categories_file = options['categories_file'] 
        self.clear_existing = options['clear_existing']
        self.dry_run = options['dry_run']
        self.verbose = options['verbose']

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª–∏
        for file_path in [self.products_file, self.categories_file]:
            if not os.path.exists(file_path):
                raise CommandError(f'–§–∞–π–ª {file_path} –Ω–µ —ñ—Å–Ω—É—î')

        if self.dry_run:
            self.stdout.write(self.style.WARNING("üîç –†–ï–ñ–ò–ú –ü–û–ü–ï–†–ï–î–ù–¨–û–ì–û –ü–ï–†–ï–ì–õ–Ø–î–£"))

        self.stdout.write("üöÄ –ü–æ—á–∞—Ç–æ–∫ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É —Ç–æ–≤–∞—Ä—ñ–≤")

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats = {
            'products_created': 0,
            'categories_created': 0,
            'brands_created': 0,
            'images_downloaded': 0,
            'products_skipped': 0,
            'errors': 0
        }

        try:
            # –ö—Ä–æ–∫ 1: –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ —Ç–æ–≤–∞—Ä–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if self.clear_existing:
                self.clear_existing_products()

            # –ö—Ä–æ–∫ 2: –ß–∏—Ç–∞—î–º–æ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            category_mapping = self.read_categories()

            # –ö—Ä–æ–∫ 3: –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–æ–≤–∞—Ä–∏
            self.import_products(category_mapping)

            # –ö—Ä–æ–∫ 4: –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            self.show_final_stats()

        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}"))
            raise

    def clear_existing_products(self):
        """–í–∏–¥–∞–ª—è—î –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ —Ç–æ–≤–∞—Ä–∏"""
        count = Product.objects.count()
        if count == 0:
            self.stdout.write("‚ÑπÔ∏è –¢–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–º–∞—î")
            return

        if self.dry_run:
            self.stdout.write(f"üóëÔ∏è –ë–£–î–ï –í–ò–î–ê–õ–ï–ù–û: {count} —Ç–æ–≤–∞—Ä—ñ–≤")
        else:
            with transaction.atomic():
                Product.objects.all().delete()
                self.stdout.write(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ {count} —Ç–æ–≤–∞—Ä—ñ–≤")

    def read_categories(self):
        """–ß–∏—Ç–∞—î —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –º–∞–ø—ñ–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π - –¢–Ü–õ–¨–ö–ò –£–ö–†–ê–á–ù–°–¨–ö–Ü –ù–ê–ó–í–ò"""
        self.stdout.write("üìÇ –û–±—Ä–æ–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...")
        
        try:
            df = pd.read_excel(self.categories_file)
            category_mapping = {}
            
            # –ë–∞–∑–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–∞–ø—É–≤–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç
            base_categories = {
                '–Ü–Ω–≤–µ—Ä—Ç–æ—Ä–∏': ['—ñ–Ω–≤–µ—Ä—Ç–æ—Ä', '–≥—ñ–±—Ä–∏–¥–Ω'],
                '–°–æ–Ω—è—á–Ω—ñ –ø–∞–Ω–µ–ª—ñ': ['–ø–∞–Ω–µ–ª', '—Å–æ–Ω—è—á–Ω', '–º–æ–Ω–æ–∫—Ä–∏—Å—Ç–∞–ª', '–ø–æ–ª—ñ–∫—Ä–∏—Å—Ç–∞–ª'],
                '–ê–∫—É–º—É–ª—è—Ç–æ—Ä–Ω—ñ –±–∞—Ç–∞—Ä–µ—ó': ['–∞–∫—É–º—É–ª—è—Ç–æ—Ä', '–±–∞—Ç–∞—Ä–µ—è', '–ª—ñ—Ç—ñ—î–≤', 'lifepo4', '–≤–∏—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω'],
                '–ö–æ–º–ø–ª–µ–∫—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è': ['–∫–æ–º–ø–ª–µ–∫—Ç', '–Ω–∞–±—ñ—Ä', '—Ä–µ–∑–µ—Ä–≤–Ω', '–∂–∏–≤–ª–µ–Ω–Ω—è'],
                '–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏': ['–º–æ–Ω—Ç–∞–∂', '–ø–æ—Å–ª—É–≥', '—Å–µ—Ä–≤—ñ—Å']
            }
            
            for index, row in df.iterrows():
                ukr_name = str(row.get('–ù–∞–∑–≤–∞_–≥—Ä—É–ø–∏_—É–∫—Ä', '')).strip()
                rus_name = str(row.get('–ù–∞–∑–≤–∞_–≥—Ä—É–ø–∏', '')).strip()
                
                # –¢—ñ–ª—å–∫–∏ —è–∫—â–æ —î —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –Ω–∞–∑–≤–∞
                if ukr_name and pd.notna(row.get('–ù–∞–∑–≤–∞_–≥—Ä—É–ø–∏_—É–∫—Ä')) and ukr_name != 'nan':
                    # –û—á–∏—â–∞—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –Ω–∞–∑–≤—É (–ë–ï–ó –ø–µ—Ä–µ–∫–ª–∞–¥—É)
                    clean_ukr_name = self.clean_ukrainian_text_only(ukr_name)
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü–µ —á–∏—Å—Ç–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –Ω–∞–∑–≤–∞
                    if self.is_pure_ukrainian_text(clean_ukr_name):
                        # –ú–∞–ø–∏–º–æ –Ω–∞ –±–∞–∑–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å–∞–π—Ç—É
                        mapped_category = self.map_to_base_category(clean_ukr_name, base_categories)
                        
                        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–∞–ø—ñ–Ω–≥ –≤—ñ–¥ —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó –¥–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó
                        if rus_name and pd.notna(row.get('–ù–∞–∑–≤–∞_–≥—Ä—É–ø–∏')):
                            category_mapping[rus_name] = mapped_category
                        
                        if self.verbose:
                            self.stdout.write(f"  üìù {rus_name} ‚Üí {mapped_category}")
                    else:
                        if self.verbose:
                            self.stdout.write(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –Ω–µ—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏: {clean_ukr_name}")

            self.stdout.write(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(category_mapping)} –º–∞–ø—ñ–Ω–≥—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
            return category_mapping
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {str(e)}"))
            return {}

    def map_to_base_category(self, category_name, base_categories):
        """–ú–∞–ø–∏—Ç—å –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –±–∞–∑–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å–∞–π—Ç—É"""
        category_lower = category_name.lower()
        
        for base_cat, keywords in base_categories.items():
            for keyword in keywords:
                if keyword.lower() in category_lower:
                    return base_cat
        
        # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—á–∏—â–µ–Ω—É –Ω–∞–∑–≤—É
        return category_name

    def determine_category_by_product_name(self, product_name):
        """–í–∏–∑–Ω–∞—á–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É –∑–∞ –π–æ–≥–æ –Ω–∞–∑–≤–æ—é"""
        if not product_name:
            return ''
        
        name_lower = product_name.lower()
        
        # –ù–ê–ô–í–ò–©–ò–ô –ü–†–Ü–û–†–ò–¢–ï–¢ - –ö–û–ú–ü–õ–ï–ö–¢–ò (–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ü–ï–†–® –ó–ê –í–°–ï!)
        if any(word in name_lower for word in ['–∫–æ–º–ø–ª–µ–∫—Ç', '–Ω–∞–±—ñ—Ä']):
            return '–ö–æ–º–ø–ª–µ–∫—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è'
        
        # –°–æ–Ω—è—á–Ω—ñ –ø–∞–Ω–µ–ª—ñ
        if any(word in name_lower for word in ['–ø–∞–Ω–µ–ª', '—Å–æ–Ω—è—á–Ω']):
            return '–°–æ–Ω—è—á–Ω—ñ –ø–∞–Ω–µ–ª—ñ'
            
        # –ê–∫—É–º—É–ª—è—Ç–æ—Ä–Ω—ñ –±–∞—Ç–∞—Ä–µ—ó
        if any(word in name_lower for word in ['–∞–∫—É–º—É–ª—è—Ç–æ—Ä', '–±–∞—Ç–∞—Ä–µ—è', '–ª—ñ—Ç—ñ—î–≤', 'lifepo4']):
            return '–ê–∫—É–º—É–ª—è—Ç–æ—Ä–Ω—ñ –±–∞—Ç–∞—Ä–µ—ó'
        
        # –Ü–Ω–≤–µ—Ä—Ç–æ—Ä–∏ (–≤–∫–ª—é—á–Ω–æ –∑ –≥—ñ–±—Ä–∏–¥–Ω–∏–º–∏) - –û–°–¢–ê–ù–ù–Ü–ô –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç    
        if any(word in name_lower for word in ['—ñ–Ω–≤–µ—Ä—Ç–æ—Ä', '–≥—ñ–±—Ä–∏–¥–Ω']):
            return '–Ü–Ω–≤–µ—Ä—Ç–æ—Ä–∏'
            
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—Ç–∞–∂ - –Ω–µ —ñ–º–ø–æ—Ä—Ç—É—î–º–æ –ø–æ—Å–ª—É–≥–∏
        if any(word in name_lower for word in ['–º–æ–Ω—Ç–∞–∂', '–ø–æ—Å–ª—É–≥', '—Å–µ—Ä–≤—ñ—Å']):
            return ''  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—é = –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–æ–≤–∞—Ä
        
        # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ
        return ''

    def import_products(self, category_mapping):
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–º–ø–æ—Ä—Ç—É —Ç–æ–≤–∞—Ä—ñ–≤"""
        self.stdout.write("üì¶ –Ü–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤...")
        
        try:
            # –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª —Ç–æ–≤–∞—Ä—ñ–≤
            try:
                df = pd.read_excel(self.products_file, sheet_name='Export Products Sheet')
            except:
                try:
                    df = pd.read_excel(self.products_file, sheet_name=0)
                except:
                    df = pd.read_excel(self.products_file)

            self.stdout.write(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(df)} —Ç–æ–≤–∞—Ä—ñ–≤ —É —Ñ–∞–π–ª—ñ")
            
            if len(df) == 0:
                raise CommandError('–§–∞–π–ª –∑ —Ç–æ–≤–∞—Ä–∞–º–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π')

            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç–æ–≤–∞—Ä–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            batch_size = 50
            for i in range(0, len(df), batch_size):
                batch = df.iloc[i:i+batch_size]
                self.process_product_batch(batch, category_mapping)
                
                if (i + batch_size) % 100 == 0:
                    self.stdout.write(f"‚è≥ –û–±—Ä–æ–±–ª–µ–Ω–æ {min(i + batch_size, len(df))}/{len(df)} —Ç–æ–≤–∞—Ä—ñ–≤...")

        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É —Ç–æ–≤–∞—Ä—ñ–≤: {str(e)}"))
            self.stats['errors'] += 1

    def process_product_batch(self, batch, category_mapping):
        """–û–±—Ä–æ–±–ª—è—î –ø–∞–∫–µ—Ç —Ç–æ–≤–∞—Ä—ñ–≤"""
        for index, row in batch.iterrows():
            try:
                self.process_single_product(row, category_mapping)
            except Exception as e:
                self.stats['errors'] += 1
                if self.verbose:
                    self.stdout.write(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–æ–≤–∞—Ä—É {index}: {str(e)}")

    def process_single_product(self, row, category_mapping):
        """–û–±—Ä–æ–±–ª—è—î –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –∑ –ª–æ–≥—ñ—á–Ω–∏–º –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º —Ä–æ—Å—ñ–π—Å—å–∫–∏—Ö –Ω–∞–∑–≤"""
        # –û—Ç—Ä–∏–º—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É —Ç–∞ —Ä–æ—Å—ñ–π—Å—å–∫—É –Ω–∞–∑–≤–∏
        name_ukr = str(row.get('–ù–∞–∑–≤–∞_–ø–æ–∑–∏—Ü—ñ—ó_—É–∫—Ä', '')).strip() if pd.notna(row.get('–ù–∞–∑–≤–∞_–ø–æ–∑–∏—Ü—ñ—ó_—É–∫—Ä')) else ''
        name_rus = str(row.get('–ù–∞–∑–≤–∞_–ø–æ–∑–∏—Ü—ñ—ó', '')).strip() if pd.notna(row.get('–ù–∞–∑–≤–∞_–ø–æ–∑–∏—Ü—ñ—ó')) else ''
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É –Ω–∞–∑–≤—É
        if name_ukr and name_ukr != 'nan' and len(name_ukr) > 4:
            # –Ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –Ω–∞–∑–≤–∞ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—ó
            final_name = self.clean_and_translate_text(name_ukr)
        elif name_rus and name_rus != 'nan' and len(name_rus) > 4:
            # –ù–µ–º–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó - –ß–Ü–¢–ö–û –ø–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ —Ä–æ—Å—ñ–π—Å—å–∫—É
            final_name = self.clean_and_translate_text(name_rus)
        else:
            # –ù–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –Ω–∞–∑–≤–∏ - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
            if self.verbose:
                self.stdout.write(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –Ω–∞–∑–≤–∏")
            self.stats['products_skipped'] += 1
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –Ω–∞–∑–≤–∞ –Ω–µ –ø–æ—Ä–æ–∂–Ω—è –ø—ñ—Å–ª—è –æ—á–∏—Å—Ç–∫–∏
        if not final_name or len(final_name) < 5:
            if self.verbose:
                self.stdout.write(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–∞–∑–≤–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞ –ø—ñ—Å–ª—è –æ—á–∏—Å—Ç–∫–∏")
            self.stats['products_skipped'] += 1
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–ø–∏—Å–∏
        description_ukr = str(row.get('–û–ø–∏—Å_—É–∫—Ä', '')).strip() if pd.notna(row.get('–û–ø–∏—Å_—É–∫—Ä')) else ''
        description_rus = str(row.get('–û–ø–∏—Å', '')).strip() if pd.notna(row.get('–û–ø–∏—Å')) else ''
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –æ–ø–∏—Å
        if description_ukr and description_ukr != 'nan' and len(description_ukr) > 10:
            # –Ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –æ–ø–∏—Å
            clean_description = self.clean_description(description_ukr)
        elif description_rus and description_rus != 'nan' and len(description_rus) > 10:
            # –ù–µ–º–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ - –ø–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ —Ä–æ—Å—ñ–π—Å—å–∫–∏–π
            clean_description = self.clean_description(description_rus)
        else:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π –æ–ø–∏—Å
            clean_description = f"–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π {final_name} –≤—ñ–¥ –Ω–∞–¥—ñ–π–Ω–æ–≥–æ –≤–∏—Ä–æ–±–Ω–∏–∫–∞. –í–∏—Å–æ–∫–∞ —è–∫—ñ—Å—Ç—å —Ç–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—è."

        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—à—ñ –¥–∞–Ω—ñ
        price = self.parse_price(row.get('–¶—ñ–Ω–∞', 0))
        
        # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–∞–ø—ñ–Ω–≥ + –ª–æ–≥—ñ–∫—É –∑–∞ –Ω–∞–∑–≤–æ—é —Ç–æ–≤–∞—Ä—É
        category_name_rus = str(row.get('–ù–∞–∑–≤–∞_–≥—Ä—É–ø–∏', '')).strip() if pd.notna(row.get('–ù–∞–∑–≤–∞_–≥—Ä—É–ø–∏')) else ''
        category_name = category_mapping.get(category_name_rus, '')
        
        # –ó–ê–í–ñ–î–ò –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–∞ –Ω–∞–∑–≤–æ—é —Ç–æ–≤–∞—Ä—É (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –º–∞–ø—ñ–Ω–≥–æ–º!)
        auto_category = self.determine_category_by_product_name(final_name)
        if auto_category and auto_category != category_name:
            if self.verbose:
                self.stdout.write(f"  üîÑ –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: '{final_name[:30]}...' ‚Üí '{auto_category}' (–±—É–ª–æ: '{category_name}')")
            category_name = auto_category
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –º–∞–ø—ñ–Ω–≥—É - –≤–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–∞ –Ω–∞–∑–≤–æ—é —Ç–æ–≤–∞—Ä—É
        if not category_name:
            category_name = self.determine_category_by_product_name(final_name)
            if self.verbose and category_name:
                self.stdout.write(f"  üîç –ê–≤—Ç–æ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: '{final_name[:30]}...' ‚Üí '{category_name}'")
        
        # –Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–æ–≤–∞—Ä
        if not category_name:
            if self.verbose:
                self.stdout.write(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è '{category_name_rus}' / '{final_name[:30]}...'")
            self.stats['products_skipped'] += 1
            return
        
        brand_name = str(row.get('–í–∏—Ä–æ–±–Ω–∏–∫', '')).strip() if pd.notna(row.get('–í–∏—Ä–æ–±–Ω–∏–∫')) else ''
        country = str(row.get('–ö—Ä–∞—ó–Ω–∞_–≤–∏—Ä–æ–±–Ω–∏–∫', '')).strip() if pd.notna(row.get('–ö—Ä–∞—ó–Ω–∞_–≤–∏—Ä–æ–±–Ω–∏–∫')) else ''
        model = str(row.get('–ö–æ–¥_—Ç–æ–≤–∞—Ä—É', '')).strip() if pd.notna(row.get('–ö–æ–¥_—Ç–æ–≤–∞—Ä—É')) else ''
        image_links = str(row.get('–ü–æ—Å–∏–ª–∞–Ω–Ω—è_–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è', '')).strip() if pd.notna(row.get('–ü–æ—Å–∏–ª–∞–Ω–Ω—è_–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è')) else ''

        if self.verbose:
            self.stdout.write(f"  ‚úÖ –û–±—Ä–æ–±–∫–∞: {final_name[:50]}...")

        if self.dry_run:
            self.stdout.write(f"–ë–£–î–ï –°–¢–í–û–†–ï–ù–û: {final_name}")
            self.stats['products_created'] += 1
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–æ–≤–∞—Ä
        product = self.create_product_with_relations(
            final_name, clean_description, price, category_name, 
            brand_name, model, country, image_links, category_mapping
        )
        
        if product:
            self.stats['products_created'] += 1
        else:
            self.stats['products_skipped'] += 1

    def create_product_with_relations(self, name, description, price, category_name, 
                                    brand_name, model, country, image_links, category_mapping):
        """–°—Ç–≤–æ—Ä—é—î —Ç–æ–≤–∞—Ä –∑ —É—Å—ñ–º–∞ –∑–≤'—è–∑–∫–∞–º–∏"""
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ/–æ—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
            category = self.get_or_create_category(category_name, category_mapping)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ/–æ—Ç—Ä–∏–º—É—î–º–æ –±—Ä–µ–Ω–¥
            brand = self.get_or_create_brand(brand_name, country)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–æ–≤–∞—Ä
            product = Product.objects.create(
                name=name,
                description=description,
                price=price,
                category=category,
                brand=brand,
                model=model,
                country=country,
                in_stock=True,
                featured=False  # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö
            )
            
            # –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if image_links:
                try:
                    self.add_product_images(product, image_links)
                except Exception as e:
                    if self.verbose:
                        self.stdout.write(f"  ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è {name}: {str(e)}")
            
            return product
            
        except Exception as e:
            if self.verbose:
                self.stdout.write(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è {name}: {str(e)}")
            return None

    def get_or_create_category(self, category_name, category_mapping):
        """–°—Ç–≤–æ—Ä—é—î –∞–±–æ –æ—Ç—Ä–∏–º—É—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –º–∞–ø—ñ–Ω–≥–æ–º"""
        if not category_name:
            category_name = "–Ü–Ω—à–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–∞–ø—ñ–Ω–≥
        mapped_name = category_mapping.get(category_name, category_name)
        clean_name = self.clean_and_translate_text(mapped_name)
        
        if not clean_name:
            clean_name = "–Ü–Ω—à–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"
        
        category, created = Category.objects.get_or_create(
            name=clean_name,
            defaults={
                'description': f'–ö–∞—Ç–µ–≥–æ—Ä—ñ—è {clean_name}',
                'is_active': True
            }
        )
        
        if created:
            self.stats['categories_created'] += 1
            if self.verbose:
                self.stdout.write(f"  üìÇ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {clean_name}")
        
        return category

    def get_or_create_brand(self, brand_name, country=""):
        """–°—Ç–≤–æ—Ä—é—î –∞–±–æ –æ—Ç—Ä–∏–º—É—î –±—Ä–µ–Ω–¥"""
        if not brand_name:
            brand_name = "–ó–∞–≥–∞–ª—å–Ω–∏–π"
        
        clean_name = self.clean_and_translate_text(brand_name)
        if not clean_name:
            clean_name = "–ó–∞–≥–∞–ª—å–Ω–∏–π"
        
        brand, created = Brand.objects.get_or_create(
            name=clean_name,
            defaults={
                'description': f'–ë—Ä–µ–Ω–¥ {clean_name}' + (f' –∑ {country}' if country else ''),
                'is_active': True
            }
        )
        
        if created:
            self.stats['brands_created'] += 1
            if self.verbose:
                self.stdout.write(f"  üè∑Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–æ –±—Ä–µ–Ω–¥: {clean_name}")
        
        return brand

    def add_product_images(self, product, image_links):
        """–î–æ–¥–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ —Ç–æ–≤–∞—Ä—É"""
        if not image_links:
            return
        
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        links = re.split(r'[,;\n]+', image_links)
        
        for i, link in enumerate(links[:5]):  # –ú–∞–∫—Å–∏–º—É–º 5 –∑–æ–±—Ä–∞–∂–µ–Ω—å
            link = link.strip()
            if not link or not link.startswith('http'):
                continue
                
            try:
                if self.download_and_save_image(product, link, i):
                    self.stats['images_downloaded'] += 1
                    if i == 0:  # –ó–∞—Ç—Ä–∏–º–∫–∞ –ª–∏—à–µ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                        time.sleep(0.5)
                    
            except Exception as e:
                if self.verbose:
                    self.stdout.write(f"    ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {link}: {str(e)}")

    def download_and_save_image(self, product, image_url, index):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            response = requests.get(image_url, timeout=15, headers=headers)
            response.raise_for_status()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É
            parsed_url = urlparse(image_url)
            original_filename = os.path.basename(parsed_url.path)
            
            if original_filename and '.' in original_filename:
                name_part, ext_part = original_filename.rsplit('.', 1)
                filename = f"product_{product.id}_{index}_{name_part[:20]}.{ext_part}"
            else:
                filename = f"product_{product.id}_{index}.jpg"
            
            content = ContentFile(response.content, name=filename)
            
            if index == 0:
                # –ì–æ–ª–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                product.image.save(filename, content, save=True)
                if self.verbose:
                    self.stdout.write(f"    üñºÔ∏è –ì–æ–ª–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {filename}")
            else:
                # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                ProductImage.objects.create(
                    product=product,
                    image=content,
                    alt_text=f"{product.name} - –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {index+1}",
                    order=index
                )
                if self.verbose:
                    self.stdout.write(f"    üñºÔ∏è –î–æ–¥–∞—Ç–∫–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {filename}")
            
            return True
            
        except Exception as e:
            if self.verbose:
                self.stdout.write(f"    ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {image_url}: {str(e)}")
            return False

    # === –§–£–ù–ö–¶–Ü–á –û–ß–ò–°–¢–ö–ò –¢–ê –ü–ï–†–ï–ö–õ–ê–î–£ ===

    def clean_and_translate_text(self, text):
        """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ—á–∏—Å—Ç–∫–∏ —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É"""
        if not text:
            return ""
        
        # –í–∏–¥–∞–ª—è—î–º–æ HTML —Ç–µ–≥–∏
        text = BeautifulSoup(str(text), 'html.parser').get_text()
        
        # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –∑ —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó
        text = self.translate_to_ukrainian(text)
        
        # –û—á–∏—â–∞—î–º–æ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
        text = self.clean_text_content(text)
        
        return text.strip()

    def clean_description(self, text):
        """–°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –æ–ø–∏—Å—ñ–≤"""
        if not text:
            return ""
        
        # –û—Å–Ω–æ–≤–Ω–∞ –æ—á–∏—Å—Ç–∫–∞
        text = self.clean_and_translate_text(text)
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ä–æ—Å—ñ–π—Å—å–∫—ñ —Ä–µ—á–µ–Ω–Ω—è
        sentences = re.split(r'[.!?]+', text)
        ukrainian_sentences = []
        
        for sentence in sentences:
            sentence = sentence.strip()
            if not sentence:
                continue
                
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ—Å—Ç—å —Ä–µ—á–µ–Ω–Ω—è
            if self.is_ukrainian_text(sentence):
                ukrainian_sentences.append(sentence)
        
        result = '. '.join(ukrainian_sentences)
        if result and not result.endswith('.'):
            result += '.'
            
        return result

    def translate_to_ukrainian(self, text):
        """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á —Ä–æ—Å—ñ–π—Å—å–∫–æ-—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Ç–µ—Ä–º—ñ–Ω—ñ–≤"""
        if not text:
            return ""
        
        # –õ–æ–≥—ñ—á–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ - —Ä–æ—Å—ñ–π—Å—å–∫–∞ ‚Üî —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
        translations = {
            # –û—Å–Ω–æ–≤–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏
            '–ì–∏–±—Ä–∏–¥–Ω—ã–π': '–ì—ñ–±—Ä–∏–¥–Ω–∏–π', '–≥–∏–±—Ä–∏–¥–Ω—ã–π': '–≥—ñ–±—Ä–∏–¥–Ω–∏–π',
            '–∏–Ω–≤–µ—Ä—Ç–æ—Ä': '—ñ–Ω–≤–µ—Ä—Ç–æ—Ä', '–ò–Ω–≤–µ—Ä—Ç–æ—Ä': '–Ü–Ω–≤–µ—Ä—Ç–æ—Ä',
            '–°–æ–ª–Ω–µ—á–Ω–∞—è': '–°–æ–Ω—è—á–Ω–∞', '—Å–æ–ª–Ω–µ—á–Ω–∞—è': '—Å–æ–Ω—è—á–Ω–∞', '–°–æ–ª–Ω–µ—á–Ω—ã–µ': '–°–æ–Ω—è—á–Ω—ñ', '—Å–æ–ª–Ω–µ—á–Ω—ã–µ': '—Å–æ–Ω—è—á–Ω—ñ',
            '–ø–∞–Ω–µ–ª—å': '–ø–∞–Ω–µ–ª—å', '–ü–∞–Ω–µ–ª—å': '–ü–∞–Ω–µ–ª—å', '–ø–∞–Ω–µ–ª–∏': '–ø–∞–Ω–µ–ª—ñ', '–ü–∞–Ω–µ–ª–∏': '–ü–∞–Ω–µ–ª—ñ',
            '–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞—è': '–ê–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞', '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞—è': '–∞–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞',
            '–±–∞—Ç–∞—Ä–µ—è': '–±–∞—Ç–∞—Ä–µ—è', '–ë–∞—Ç–∞—Ä–µ—è': '–ë–∞—Ç–∞—Ä–µ—è',
            '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä': '–∞–∫—É–º—É–ª—è—Ç–æ—Ä', '–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä': '–ê–∫—É–º—É–ª—è—Ç–æ—Ä',
            '—Å–∏—Å—Ç–µ–º–∞': '—Å–∏—Å—Ç–µ–º–∞', '–°–∏—Å—Ç–µ–º–∞': '–°–∏—Å—Ç–µ–º–∞',
            '–∫–æ–º–ø–ª–µ–∫—Ç': '–∫–æ–º–ø–ª–µ–∫—Ç', '–ö–æ–º–ø–ª–µ–∫—Ç': '–ö–æ–º–ø–ª–µ–∫—Ç',
            '–º–æ—â–Ω–æ—Å—Ç—å': '–ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å', '–ú–æ—â–Ω–æ—Å—Ç—å': '–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å',
            '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': '–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å', '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': '–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
            '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ': '–Ω–∞–ø—Ä—É–≥–∞', '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ': '–ù–∞–ø—Ä—É–≥–∞',
            '–µ–º–∫–æ—Å—Ç—å': '—î–º–Ω—ñ—Å—Ç—å', '–ï–º–∫–æ—Å—Ç—å': '–Ñ–º–Ω—ñ—Å—Ç—å',
            '—ç–Ω–µ—Ä–≥–∏–∏': '–µ–Ω–µ—Ä–≥—ñ—ó', '–≠–Ω–µ—Ä–≥–∏–∏': '–ï–Ω–µ—Ä–≥—ñ—ó', '—ç–Ω–µ—Ä–≥–∏—è': '–µ–Ω–µ—Ä–≥—ñ—è', '–≠–Ω–µ—Ä–≥–∏—è': '–ï–Ω–µ—Ä–≥—ñ—è',
            '—Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ': '—Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ', '–†–µ–∑–µ—Ä–≤–Ω–æ–≥–æ': '–†–µ–∑–µ—Ä–≤–Ω–æ–≥–æ',
            '–ø–∏—Ç–∞–Ω–∏—è': '–∂–∏–≤–ª–µ–Ω–Ω—è', '–ü–∏—Ç–∞–Ω–∏—è': '–ñ–∏–≤–ª–µ–Ω–Ω—è', '–ø–∏—Ç–∞–Ω–∏–µ': '–∂–∏–≤–ª–µ–Ω–Ω—è', '–ü–∏—Ç–∞–Ω–∏–µ': '–ñ–∏–≤–ª–µ–Ω–Ω—è',
            '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å': '–≤–∏—Ä–æ–±–Ω–∏–∫', '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å': '–í–∏—Ä–æ–±–Ω–∏–∫',
            '–∫–∞—á–µ—Å—Ç–≤–æ': '—è–∫—ñ—Å—Ç—å', '–ö–∞—á–µ—Å—Ç–≤–æ': '–Ø–∫—ñ—Å—Ç—å',
            '–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å': '–Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å', '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å': '–ù–∞–¥—ñ–π–Ω—ñ—Å—Ç—å',
            '–≥–∞—Ä–∞–Ω—Ç–∏—è': '–≥–∞—Ä–∞–Ω—Ç—ñ—è', '–ì–∞—Ä–∞–Ω—Ç–∏—è': '–ì–∞—Ä–∞–Ω—Ç—ñ—è',
            '—É—Å—Ç–∞–Ω–æ–≤–∫–∞': '—É—Å—Ç–∞–Ω–æ–≤–∫–∞', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞',
            '–º–æ–Ω—Ç–∞–∂': '–º–æ–Ω—Ç–∞–∂', '–ú–æ–Ω—Ç–∞–∂': '–ú–æ–Ω—Ç–∞–∂',
            '—Ö—Ä–∞–Ω–µ–Ω–∏—è': '–∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è', '–•—Ä–∞–Ω–µ–Ω–∏—è': '–ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è', '—Ö—Ä–∞–Ω–µ–Ω–∏–µ': '–∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è', '–•—Ä–∞–Ω–µ–Ω–∏–µ': '–ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è',
            '–≤—ã—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞—è': '–≤–∏—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞', '–í—ã—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞—è': '–í–∏—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞',
            '–º–æ–¥—É–ª–µ–π': '–º–æ–¥—É–ª—ñ–≤', '–ú–æ–¥—É–ª–µ–π': '–ú–æ–¥—É–ª—ñ–≤', '–º–æ–¥—É–ª–∏': '–º–æ–¥—É–ª—ñ', '–ú–æ–¥—É–ª–∏': '–ú–æ–¥—É–ª—ñ',
            
            # –¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏
            '—Ñ–∞–∑–Ω—ã–π': '—Ñ–∞–∑–Ω–∏–π', '–§–∞–∑–Ω—ã–π': '–§–∞–∑–Ω–∏–π',
            '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä': '–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä', '–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä': '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä',
            '–∑–∞—Ä—è–¥–Ω–æ–µ': '–∑–∞—Ä—è–¥–Ω–∏–π', '–ó–∞—Ä—è–¥–Ω–æ–µ': '–ó–∞—Ä—è–¥–Ω–∏–π',
            '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ': '–ø—Ä–∏—Å—Ç—Ä—ñ–π', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ': '–ü—Ä–∏—Å—Ç—Ä—ñ–π',
            '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ': '–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ': '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è',
            '–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π': '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π', '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è': '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π',
            '–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π': '–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π', '–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è': '–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞', '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π': '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π',
            '–Ω–æ–º–∏–Ω–∞–ª—å–Ω—ã–π': '–Ω–æ–º—ñ–Ω–∞–ª—å–Ω–∏–π', '–Ω–æ–º–∏–Ω–∞–ª—å–Ω–∞—è': '–Ω–æ–º—ñ–Ω–∞–ª—å–Ω–∞', '–ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–π': '–ù–æ–º—ñ–Ω–∞–ª—å–Ω–∏–π',
            '—Ä–∞–±–æ—á–∏–π': '—Ä–æ–±–æ—á–∏–π', '—Ä–∞–±–æ—á–∞—è': '—Ä–æ–±–æ—á–∞', '–†–∞–±–æ—á–∏–π': '–†–æ–±–æ—á–∏–π',
            '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
            '–∑–∞—â–∏—Ç–∞': '–∑–∞—Ö–∏—Å—Ç', '–ó–∞—â–∏—Ç–∞': '–ó–∞—Ö–∏—Å—Ç',
            '—Ä–∞–∑–º–µ—Ä': '—Ä–æ–∑–º—ñ—Ä', '–†–∞–∑–º–µ—Ä': '–†–æ–∑–º—ñ—Ä',
            '–≤–µ—Å': '–≤–∞–≥–∞', '–í–µ—Å': '–í–∞–≥–∞',
            
            # –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ —Ç–∞ —Ç–∏–ø–∏
            '–ª–∏—Ç–∏–µ–≤—ã–π': '–ª—ñ—Ç—ñ—î–≤–∏–π', '–ª–∏—Ç–∏–µ–≤–∞—è': '–ª—ñ—Ç—ñ—î–≤–∞', '–õ–∏—Ç–∏–µ–≤—ã–π': '–õ—ñ—Ç—ñ—î–≤–∏–π',
            '–º–æ–Ω–æ–∫—Ä–∏—Å—Ç–∞–ª–∏—á–µ—Å–∫–∏–π': '–º–æ–Ω–æ–∫—Ä–∏—Å—Ç–∞–ª—ñ—á–Ω–∏–π', '–ú–æ–Ω–æ–∫—Ä–∏—Å—Ç–∞–ª–∏—á–µ—Å–∫–∏–π': '–ú–æ–Ω–æ–∫—Ä–∏—Å—Ç–∞–ª—ñ—á–Ω–∏–π',
            '–ø–æ–ª–∏–∫—Ä–∏—Å—Ç–∞–ª–∏—á–µ—Å–∫–∏–π': '–ø–æ–ª—ñ–∫—Ä–∏—Å—Ç–∞–ª—ñ—á–Ω–∏–π', '–ü–æ–ª–∏–∫—Ä–∏—Å—Ç–∞–ª–∏—á–µ—Å–∫–∏–π': '–ü–æ–ª—ñ–∫—Ä–∏—Å—Ç–∞–ª—ñ—á–Ω–∏–π',
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å
            '–∫–í—Ç': '–∫–í—Ç', '–∫–≤—Ç': '–∫–í—Ç', '–ö–í–¢': '–∫–í—Ç',
            '–∫–í—Ç—á': '–∫–í—Ç¬∑–≥–æ–¥', '–∫–≤—Ç—á': '–∫–í—Ç¬∑–≥–æ–¥', '–ö–í–¢–ß': '–∫–í—Ç¬∑–≥–æ–¥',
            '–í–∞—Ç—Ç': '–í—Ç', '–≤–∞—Ç—Ç': '–í—Ç', '–í–ê–¢–¢': '–í—Ç',
            '–í–æ–ª—å—Ç': '–í', '–≤–æ–ª—å—Ç': '–í', '–í–û–õ–¨–¢': '–í',
            '–ê–º–ø–µ—Ä': '–ê', '–∞–º–ø–µ—Ä': '–ê', '–ê–ú–ü–ï–†': '–ê'
        }
        
        result = str(text)
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
        for rus, ukr in translations.items():
            result = result.replace(rus, ukr)
        
        # –ó–∞–º—ñ–Ω—è—î–º–æ —Ä–æ—Å—ñ–π—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏
        russian_letters = {
            '—ã': '–∏', '–´': '–ò', '—ç': '–µ', '–≠': '–ï',
            '—ë': '–µ', '–Å': '–ï', '—ä': '', '–™': ''
        }
        
        for rus, ukr in russian_letters.items():
            result = result.replace(rus, ukr)
        
        return result

    def clean_text_content(self, text):
        """–û—á–∏—â–∞—î —Ç–µ–∫—Å—Ç –≤—ñ–¥ –Ω–µ–±–∞–∂–∞–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î"""
        if not text:
            return ""
        
        # –ó–∞–º—ñ–Ω—è—î–º–æ HTML entities
        text = text.replace('&ndash;', '‚Äì').replace('&mdash;', '‚Äî')
        text = text.replace('&nbsp;', ' ').replace('&deg;', '¬∞')
        text = text.replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>')
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ —Å–∏–º–≤–æ–ª–∏
        text = re.sub(r'\s+', ' ', text)
        text = re.sub(r'[^\w\s\.,;:!?\-‚Äî‚Äì()¬∞%‚Ññ/–ê–ë–í–ì“ê–î–ï–ñ–ó–ò–Ü–á–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–¨–Æ–Ø–∞–±–≤–≥“ë–¥–µ–∂–∑–∏—ñ—ó–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è]', '', text)
        
        return text.strip()

    def is_ukrainian_text(self, text):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é"""
        if not text:
            return False
        
        ukrainian_chars = len(re.findall(r'[–∞–±–≤–≥“ë–¥–µ–∂–∑–∏—ñ—ó–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è–ê–ë–í–ì“ê–î–ï–ñ–ó–ò–Ü–á–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–¨–Æ–Ø]', text))
        russian_chars = len(re.findall(r'[—ã—ä—ç—ë–´–™–≠–Å]', text))
        
        return ukrainian_chars >= 3 and russian_chars == 0

    def is_pure_ukrainian_text(self, text):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É"""
        if not text:
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ø–í–ù–ò–• —Ä–æ—Å—ñ–π—Å—å–∫–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
        russian_chars = re.findall(r'[—ã—ä—ç—ë–´–™–≠–Å]', text)
        if russian_chars:
            return False
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –ª—ñ—Ç–µ—Ä
        ukrainian_chars = len(re.findall(r'[–∞–±–≤–≥“ë–¥–µ–∂–∑–∏—ñ—ó–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è–ê–ë–í–ì“ê–î–ï–ñ–ó–ò–Ü–á–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–¨–Æ–Ø]', text))
        
        # –ú—ñ–Ω—ñ–º—É–º 2 —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏ —ñ –ñ–û–î–ù–û–á —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó
        return ukrainian_chars >= 2

    def clean_ukrainian_text_only(self, text):
        """–û—á–∏—â–∞—î –¢–Ü–õ–¨–ö–ò —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –ø–µ—Ä–µ–∫–ª–∞–¥—É"""
        if not text:
            return ""
        
        # –í–∏–¥–∞–ª—è—î–º–æ HTML —Ç–µ–≥–∏
        text = BeautifulSoup(str(text), 'html.parser').get_text()
        
        # –ó–∞–º—ñ–Ω—è—î–º–æ HTML entities
        text = text.replace('&ndash;', '‚Äì').replace('&mdash;', '‚Äî')
        text = text.replace('&nbsp;', ' ').replace('&deg;', '¬∞')
        text = text.replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>')
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
        text = re.sub(r'\s+', ' ', text)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –Ω–µ–±–∞–∂–∞–Ω—ñ —Å–∏–º–≤–æ–ª–∏, –∑–∞–ª–∏—à–∞—é—á–∏ —Ç—ñ–ª—å–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏ —Ç–∞ –±–∞–∑–æ–≤—ñ –∑–Ω–∞–∫–∏
        text = re.sub(r'[^\w\s\.,;:!?\-‚Äî‚Äì()¬∞%‚Ññ/–ê–ë–í–ì“ê–î–ï–ñ–ó–ò–Ü–á–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–¨–Æ–Ø–∞–±–≤–≥“ë–¥–µ–∂–∑–∏—ñ—ó–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è0-9]', '', text)
        
        return text.strip()

    def clean_ukrainian_description_only(self, text):
        """–û—á–∏—â–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –æ–ø–∏—Å –±–µ–∑ –ø–µ—Ä–µ–∫–ª–∞–¥—É"""
        if not text:
            return ""
        
        # –û—Å–Ω–æ–≤–Ω–∞ –æ—á–∏—Å—Ç–∫–∞
        text = self.clean_ukrainian_text_only(text)
        
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ —Ä–µ—á–µ–Ω–Ω—è
        sentences = re.split(r'[.!?]+', text)
        ukrainian_sentences = []
        
        for sentence in sentences:
            sentence = sentence.strip()
            if not sentence or len(sentence) < 5:
                continue
                
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –°–¢–†–û–ì–û –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ—Å—Ç—å
            if self.is_pure_ukrainian_text(sentence):
                ukrainian_sentences.append(sentence)
        
        result = '. '.join(ukrainian_sentences)
        if result and not result.endswith('.'):
            result += '.'
            
        return result

    def parse_price(self, price_value):
        """–ü–∞—Ä—Å–∏—Ç—å —Ü—ñ–Ω—É –∑ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤"""
        if pd.isna(price_value):
            return 0.0
        
        if isinstance(price_value, (int, float)):
            return float(price_value)
        
        price_str = re.sub(r'[^\d.,]', '', str(price_value))
        price_str = price_str.replace(',', '.')
        
        try:
            return float(price_str)
        except:
            return 0.0

    def show_final_stats(self):
        """–ü–æ–∫–∞–∑—É—î –ø—ñ–¥—Å—É–º–∫–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if self.dry_run:
            self.stdout.write(
                self.style.WARNING(
                    f"\nüîç –ü–û–ü–ï–†–ï–î–ù–Ü–ô –ü–ï–†–ï–ì–õ–Ø–î –ó–ê–í–ï–†–®–ï–ù–û\n"
                    f"–ë—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {self.stats['products_created']}\n"
                    f"–ë—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {self.stats['categories_created']}\n"
                    f"–ë—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –±—Ä–µ–Ω–¥—ñ–≤: {self.stats['brands_created']}\n"
                    f"–ë—É–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {self.stats['images_downloaded']}\n"
                    f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {self.stats['products_skipped']}\n"
                    f"–ü–æ–º–∏–ª–∫–∏: {self.stats['errors']}\n"
                    f"\n–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–µ–∑ --dry-run"
                )
            )
        else:
            self.stdout.write(
                self.style.SUCCESS(
                    f"\nüéâ –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–ò–ô –Ü–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù–û\n"
                    f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {self.stats['products_created']}\n"
                    f"üìÇ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {self.stats['categories_created']}\n"
                    f"üè∑Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–æ –±—Ä–µ–Ω–¥—ñ–≤: {self.stats['brands_created']}\n"
                    f"üñºÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {self.stats['images_downloaded']}\n"
                    f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {self.stats['products_skipped']}\n"
                    f"‚ùå –ü–æ–º–∏–ª–∫–∏: {self.stats['errors']}\n"
                    f"\nüìä –ü—ñ–¥—Å—É–º–æ–∫ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:\n"
                    f"   –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: {Product.objects.count()}\n"
                    f"   –í—Å—å–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {Category.objects.count()}\n"
                    f"   –í—Å—å–æ–≥–æ –±—Ä–µ–Ω–¥—ñ–≤: {Brand.objects.count()}"
                )
            )
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
            self.show_category_stats()

    def show_category_stats(self):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö"""
        self.stdout.write("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:")
        categories = Category.objects.annotate(
            products_count=models.Count('product')
        ).order_by('-products_count')
        
        for category in categories:
            self.stdout.write(f"   üìÇ {category.name}: {category.products_count} —Ç–æ–≤–∞—Ä—ñ–≤") 