"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤ –¥–æ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
–¶–µ –¥–æ–∑–≤–æ–ª—è—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–∞ Render –±–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
"""
import os
import shutil
from django.core.management.base import BaseCommand
from django.conf import settings


class Command(BaseCommand):
    help = '–ö–æ–ø—ñ—é—î –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏ –¥–æ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –¥–ª—è production'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clean',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å–Ω—É—é—á—ñ —Å—Ç–∞—Ç–∏—á–Ω—ñ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏'
        )

    def handle(self, *args, **options):
        # –®–ª—è—Ö–∏
        media_source = os.path.join(settings.BASE_DIR, 'media')
        static_media_dest = os.path.join(settings.BASE_DIR, 'static', 'media')
        
        # –û—á–∏—â–µ–Ω–Ω—è —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if options['clean'] and os.path.exists(static_media_dest):
            shutil.rmtree(static_media_dest)
            self.stdout.write('üóëÔ∏è –û—á–∏—â–µ–Ω–æ —ñ—Å–Ω—É—é—á—ñ —Å—Ç–∞—Ç–∏—á–Ω—ñ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏')

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        os.makedirs(static_media_dest, exist_ok=True)
        
        if not os.path.exists(media_source):
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è –ü–∞–ø–∫–∞ media –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!')
            )
            return

        # –ö–æ–ø—ñ—é—î–º–æ –≤—Å—ñ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏
        copied_files = 0
        for root, dirs, files in os.walk(media_source):
            for file in files:
                if file.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.webp')):
                    source_file = os.path.join(root, file)
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
                    rel_path = os.path.relpath(source_file, media_source)
                    dest_file = os.path.join(static_media_dest, rel_path)
                    
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                    os.makedirs(os.path.dirname(dest_file), exist_ok=True)
                    
                    # –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª
                    shutil.copy2(source_file, dest_file)
                    copied_files += 1
                    
                    self.stdout.write(f'‚úÖ {rel_path}')

        self.stdout.write(
            self.style.SUCCESS(
                f'üìÅ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ {copied_files} –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤ –¥–æ static/media/'
            )
        )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ .htaccess –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –∫–µ—à—É–≤–∞–Ω–Ω—è
        htaccess_content = """
# –ö–µ—à—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType image/jpg "access plus 1 month"
    ExpiresByType image/jpeg "access plus 1 month"
    ExpiresByType image/gif "access plus 1 month"
    ExpiresByType image/png "access plus 1 month"
    ExpiresByType image/webp "access plus 1 month"
</IfModule>

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
<IfModule mod_headers.c>
    <FilesMatch "\.(jpg|jpeg|png|gif|webp)$">
        Header set Cache-Control "max-age=2592000, public"
    </FilesMatch>
</IfModule>
        """
        
        htaccess_path = os.path.join(static_media_dest, '.htaccess')
        with open(htaccess_path, 'w') as f:
            f.write(htaccess_content)
            
        self.stdout.write('üìù –°—Ç–≤–æ—Ä–µ–Ω–æ .htaccess –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è') 