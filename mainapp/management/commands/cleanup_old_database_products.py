"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –≤–∏—Å–æ–∫–∏–º–∏ ID –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
"""
from django.core.management.base import BaseCommand
from mainapp.models import Product, ProductImage

class Command(BaseCommand):
    help = '–í–∏–¥–∞–ª—è—î —Ç–æ–≤–∞—Ä–∏ –∑ –≤–∏—Å–æ–∫–∏–º–∏ ID –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö'

    def add_arguments(self, parser):
        parser.add_argument(
            '--min-id',
            type=int,
            default=100,
            help='–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π ID –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 100)'
        )
        
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç–∏ —è–∫—ñ —Ç–æ–≤–∞—Ä–∏ –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è'
        )

    def handle(self, *args, **options):
        self.stdout.write('üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –≤–∏—Å–æ–∫–∏–º–∏ ID...')
        
        min_id = options['min_id']
        dry_run = options['dry_run']
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ –≤–∏—Å–æ–∫–∏–º–∏ ID
        old_products = Product.objects.filter(id__gte=min_id)
        old_images = ProductImage.objects.filter(product__id__gte=min_id)
        
        products_count = old_products.count()
        images_count = old_images.count()
        
        if dry_run:
            self.stdout.write(f'üìä [DRY-RUN] –¢–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {products_count}')
            self.stdout.write(f'üìä [DRY-RUN] –ó–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {images_count}')
            
            if products_count > 0:
                self.stdout.write('üóëÔ∏è [DRY-RUN] –¢–æ–≤–∞—Ä–∏ —â–æ –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ:')
                for product in old_products[:10]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10
                    self.stdout.write(f'  - ID {product.id}: {product.name}')
                if products_count > 10:
                    self.stdout.write(f'  ... —Ç–∞ —â–µ {products_count - 10} —Ç–æ–≤–∞—Ä—ñ–≤')
        else:
            if products_count > 0:
                self.stdout.write(f'üóëÔ∏è –í–∏–¥–∞–ª—è—é {products_count} —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ {images_count} –∑–æ–±—Ä–∞–∂–µ–Ω—å...')
                
                # –í–∏–¥–∞–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ (CASCADE –≤–∏–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, –∞–ª–µ —è–≤–Ω–æ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è)
                deleted_images = old_images.delete()
                self.stdout.write(f'‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {deleted_images[0]}')
                
                # –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–≤–∞—Ä–∏
                deleted_products = old_products.delete()
                self.stdout.write(f'‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {deleted_products[0]}')
                
                self.stdout.write(
                    self.style.SUCCESS(
                        f'üéâ –û–ß–ò–°–¢–ö–ê –ë–î –ó–ê–í–ï–†–®–ï–ù–ê!\n'
                        f'–í–∏–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {deleted_products[0]}\n'
                        f'–í–∏–¥–∞–ª–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {deleted_images[0]}'
                    )
                )
            else:
                self.stdout.write('‚úÖ –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –≤–∏—Å–æ–∫–∏–º–∏ ID –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è')
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ë–î
        current_products = Product.objects.all()
        max_id = current_products.order_by('-id').first()
        
        self.stdout.write(f'üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ë–î:')
        self.stdout.write(f'  –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: {current_products.count()}')
        self.stdout.write(f'  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π ID: {max_id.id if max_id else "–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤"}')
        
        if max_id and max_id.id < min_id:
            self.stdout.write('‚úÖ –í—Å—ñ —Ç–æ–≤–∞—Ä–∏ –º–∞—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ñ ID!')
        elif max_id and max_id.id >= min_id:
            self.stdout.write(f'‚ö†Ô∏è –©–µ —î —Ç–æ–≤–∞—Ä–∏ –∑ –≤–∏—Å–æ–∫–∏–º–∏ ID (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π: {max_id.id})')
        
        self.stdout.write('‚úÖ –û—á–∏—Å—Ç–∫–∞ –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞!') 