import re
from django.core.management.base import BaseCommand
from django.db import transaction
from mainapp.models import Product, Category, Brand, Portfolio, Review

class Command(BaseCommand):
    help = '–ó–∞–ø–æ–±—ñ–≥–∞—î —ñ–º–ø–æ—Ä—Ç—É —Ä–æ—Å—ñ–π—Å—å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É - –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∞ –±–ª–æ–∫—É—î'

    def add_arguments(self, parser):
        parser.add_argument(
            '--strict',
            action='store_true',
            help='–°—Ç—Ä–æ–≥–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ - –±–ª–æ–∫—É—î –Ω–∞–≤—ñ—Ç—å –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç',
        )

    def handle(self, *args, **options):
        strict_mode = options['strict']
        
        self.stdout.write("üõ°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ä–æ—Å—ñ–π—Å—å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É...")
        
        if strict_mode:
            self.stdout.write("‚ö†Ô∏è –°–¢–†–û–ì–ò–ô –†–ï–ñ–ò–ú - –±—É–¥—å-—è–∫–∏–π –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ –ø–æ–∑–Ω–∞—á–µ–Ω–∏–π")
        
        total_russian = 0
        total_cleaned = 0
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–≤–∞—Ä–∏
        self.stdout.write("\nüì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤...")
        russian_products = self.check_products(strict_mode)
        total_russian += len(russian_products)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        self.stdout.write("\nüìÇ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...")
        russian_categories = self.check_categories(strict_mode)
        total_russian += len(russian_categories)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±—Ä–µ–Ω–¥–∏  
        self.stdout.write("\nüè∑Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±—Ä–µ–Ω–¥—ñ–≤...")
        russian_brands = self.check_brands(strict_mode)
        total_russian += len(russian_brands)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ
        self.stdout.write("\nüèóÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ...")
        russian_portfolio = self.check_portfolio(strict_mode)
        total_russian += len(russian_portfolio)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–≥—É–∫–∏
        self.stdout.write("\n‚≠ê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–≥—É–∫—ñ–≤...")
        russian_reviews = self.check_reviews(strict_mode)
        total_russian += len(russian_reviews)
        
        # –ü—ñ–¥—Å—É–º–∫–∏
        if total_russian > 0:
            self.stdout.write(
                self.style.WARNING(
                    f"\n‚ö†Ô∏è –ó–ù–ê–ô–î–ï–ù–û –†–û–°–Ü–ô–°–¨–ö–ò–ô –ö–û–ù–¢–ï–ù–¢\n"
                    f"–¢–æ–≤–∞—Ä—ñ–≤: {len(russian_products)}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä—ñ–π: {len(russian_categories)}\n"
                    f"–ë—Ä–µ–Ω–¥—ñ–≤: {len(russian_brands)}\n"
                    f"–ü–æ—Ä—Ç—Ñ–æ–ª—ñ–æ: {len(russian_portfolio)}\n"
                    f"–í—ñ–¥–≥—É–∫—ñ–≤: {len(russian_reviews)}\n\n"
                    f"üí° –î–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∑–∞–ø—É—Å—Ç—ñ—Ç—å:\n"
                    f"python manage.py clean_russian_content"
                )
            )
        else:
            self.stdout.write(
                self.style.SUCCESS(
                    f"\n‚úÖ –†–û–°–Ü–ô–°–¨–ö–ò–ô –ö–û–ù–¢–ï–ù–¢ –ù–ï –ó–ù–ê–ô–î–ï–ù–ò–ô\n"
                    f"–í—Å—ñ —Ç–µ–∫—Å—Ç–∏ –∫–æ—Ä–µ–∫—Ç–Ω—ñ! üá∫üá¶"
                )
            )

    def is_definitely_russian(self, text):
        """–°—Ç—Ä–æ–≥–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ - —Ç—ñ–ª—å–∫–∏ –æ—á–µ–≤–∏–¥–Ω–æ —Ä–æ—Å—ñ–π—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        if not text:
            return False
        
        text = text.lower()
        
        # –†–æ—Å—ñ–π—Å—å–∫—ñ —Å–∏–º–≤–æ–ª–∏ (100% —Ä–æ—Å—ñ–π—Å—å–∫–∞ –º–æ–≤–∞)
        if re.search(r'[—ë—ä—ã—ç]', text):
            return True
        
        # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–æ —Ä–æ—Å—ñ–π—Å—å–∫—ñ —Å–ª–æ–≤–∞ (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π)
        definitely_russian = [
            '—è–≤–ª—è–µ—Ç—Å—è', '–∏–º–µ–µ—Ç', '–º–æ–∂–µ—Ç', '–¥–æ–ª–∂–µ–Ω', '–±—É–¥–µ—Ç', '–±—ã–ª–∞', '–±—ã–ª–∏', '–µ—Å—Ç—å',
            '—á—Ç–æ–±—ã', '–ø–æ—Ç–æ–º—É', '–ø–æ—ç—Ç–æ–º—É', '–µ—Å–ª–∏', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–∫—É–¥–∞', '–æ—Ç–∫—É–¥–∞',
            '–∑–∞—á–µ–º', '–ø–æ—á–µ–º—É', '—Å–∫–æ–ª—å–∫–æ', '–∫–æ—Ç–æ—Ä—ã–π', '–∫–∞–∫–æ–π', '—á–µ–π', '—Ç–∞–∫–æ–π', 
            '—ç—Ç–æ—Ç', '—Ç–æ—Ç', '–º–æ–π', '—Ç–≤–æ–π', '–Ω–∞—à', '–≤–∞—à', '—Å–≤–æ–π', '–≤–µ—Å—å', '–∫–∞–∂–¥—ã–π',
            '–ª—é–±–æ–π', '–¥—Ä—É–≥–æ–π', '–Ω–æ–≤—ã–π', '—Å—Ç–∞—Ä—ã–π', '–±–æ–ª—å—à–æ–π', '–º–∞–ª–µ–Ω—å–∫–∏–π', '—Ö–æ—Ä–æ—à–∏–π',
            '–ø–ª–æ—Ö–æ–π', '–ª—É—á—à–∏–π', '—Ö—É–¥—à–∏–π', '–ø–µ—Ä–≤—ã–π', '–ø–æ—Å–ª–µ–¥–Ω–∏–π', '—Å–ª–µ–¥—É—é—â–∏–π',
            '–ø—Ä–µ–¥—ã–¥—É—â–∏–π', '–≤—ã—Å–æ–∫–∏–π', '–Ω–∏–∑–∫–∏–π', '–¥–ª–∏–Ω–Ω—ã–π', '–∫–æ—Ä–æ—Ç–∫–∏–π', '—à–∏—Ä–æ–∫–∏–π',
            '—É–∑–∫–∏–π', '—Ç–æ–ª—Å—Ç—ã–π', '—Ç–æ–Ω–∫–∏–π', '–æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç', '–ø–æ–∑–≤–æ–ª—è–µ—Ç', '–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è',
            '–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è', '–ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω', '—Å–æ–∑–¥–∞–Ω', '–∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω',
            '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è', '–≤—ã–ø—É—Å–∫–∞–µ—Ç—Å—è', '–≥–∏–±—Ä–∏–¥–Ω—ã–π', '–∏–Ω–≤–µ—Ä—Ç–æ—Ä', '—Å–æ–ª–Ω–µ—á–Ω–∞—è',
            '–±–∞—Ç–∞—Ä–µ—è', '—ç–Ω–µ—Ä–≥–∏—è', '–º–æ—â–Ω–æ—Å—Ç—å', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '–µ–º–∫–æ—Å—Ç—å', '–∑–∞—Ä—è–¥–∫–∞',
            '—Ä–∞–∑—Ä—è–¥–∫–∞', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å', '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
            '—É—Å—Ç–∞–Ω–æ–≤–∫–∞', '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
            '–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å', '–∫–∞—á–µ—Å—Ç–≤–æ', '–≥–∞—Ä–∞–Ω—Ç–∏—è', '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç'
        ]
        
        for word in definitely_russian:
            if re.search(r'\b' + re.escape(word) + r'\b', text):
                return True
        
        # –†–æ—Å—ñ–π—Å—å–∫—ñ –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
        russian_constructions = [
            r'\b—á—Ç–æ\s+—è–≤–ª—è–µ—Ç—Å—è\b',
            r'\b–∫–æ—Ç–æ—Ä—ã–π\s+–∏–º–µ–µ—Ç\b',
            r'\b—Ç–æ\s+—á—Ç–æ\b',
            r'\b–¥–ª—è\s+—Ç–æ–≥–æ\s+—á—Ç–æ–±—ã\b',
            r'\b–≤\s+—Å–≤—è–∑–∏\s+—Å\b',
            r'\b–ø–æ\s+—Å—Ä–∞–≤–Ω–µ–Ω–∏—é\s+—Å\b',
        ]
        
        for pattern in russian_constructions:
            if re.search(pattern, text):
                return True
        
        return False

    def is_possibly_russian(self, text):
        """–ú–µ–Ω—à —Å—Ç—Ä–æ–≥–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ - –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        if not text:
            return False
        
        if self.is_definitely_russian(text):
            return True
        
        text = text.lower()
        
        # –ü—ñ–¥–æ–∑—Ä—ñ–ª—ñ —Å–ª–æ–≤–∞ (–º–æ–∂—É—Ç—å –±—É—Ç–∏ —Ä–æ—Å—ñ–π—Å—å–∫–∏–º–∏ –∞–±–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º–∏)
        suspicious_words = [
            '—ç—Ç–æ', '—á—Ç–æ', '–∫–∞–∫', '–∏–ª–∏', '–µ–≥–æ', '–µ–µ', '–∏—Ö', '–æ—Ç', '–¥–æ', '–ø—Ä–∏',
            '–±–µ–∑', '–ø–æ–¥', '–Ω–∞–¥', '–ø—Ä–æ', '—á–µ—Ä–µ–∑', '–ø–æ—Å–ª–µ', '–ø–µ—Ä–µ–¥', '–≤–º–µ—Å—Ç–æ',
            '–∫—Ä–æ–º–µ', '—Å—Ä–µ–¥–∏', '–º–µ–∂–¥—É', '–≤–Ω—É—Ç—Ä–∏', '—Å–Ω–∞—Ä—É–∂–∏', '–æ–∫–æ–ª–æ', '–≤–æ–∑–ª–µ',
            '–≤–æ–∫—Ä—É–≥', '–ø—Ä–æ—Ç–∏–≤', '–±–ª–∞–≥–æ–¥–∞—Ä—è', '—Å–æ–≥–ª–∞—Å–Ω–æ', '–≤—Å–ª–µ–¥—Å—Ç–≤–∏–µ', '–Ω–µ—Å–º–æ—Ç—Ä—è'
        ]
        
        suspicious_count = 0
        for word in suspicious_words:
            if re.search(r'\b' + re.escape(word) + r'\b', text):
                suspicious_count += 1
        
        # –Ø–∫—â–æ –±—ñ–ª—å—à–µ 3 –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö —Å–ª—ñ–≤ - –º–æ–∂–ª–∏–≤–æ —Ä–æ—Å—ñ–π—Å—å–∫–∞
        return suspicious_count > 3

    def check_products(self, strict_mode):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤"""
        products = Product.objects.all()
        russian_products = []
        
        for product in products:
            text = f"{product.name} {product.description}"
            
            if strict_mode:
                is_russian = self.is_possibly_russian(text)
            else:
                is_russian = self.is_definitely_russian(text)
            
            if is_russian:
                russian_products.append(product)
                self.stdout.write(f"   ‚ùå ID {product.id}: {product.name[:50]}...")
        
        if not russian_products:
            self.stdout.write("   ‚úÖ –†–æ—Å—ñ–π—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
        
        return russian_products

    def check_categories(self, strict_mode):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
        categories = Category.objects.all()
        russian_categories = []
        
        for category in categories:
            text = f"{category.name} {category.description}"
            
            if strict_mode:
                is_russian = self.is_possibly_russian(text)
            else:
                is_russian = self.is_definitely_russian(text)
            
            if is_russian:
                russian_categories.append(category)
                self.stdout.write(f"   ‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category.name}")
        
        if not russian_categories:
            self.stdout.write("   ‚úÖ –†–æ—Å—ñ–π—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
        
        return russian_categories

    def check_brands(self, strict_mode):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±—Ä–µ–Ω–¥—ñ–≤"""
        brands = Brand.objects.all()
        russian_brands = []
        
        for brand in brands:
            text = f"{brand.name} {brand.description}"
            
            if strict_mode:
                is_russian = self.is_possibly_russian(text)
            else:
                is_russian = self.is_definitely_russian(text)
            
            if is_russian:
                russian_brands.append(brand)
                self.stdout.write(f"   ‚ùå –ë—Ä–µ–Ω–¥: {brand.name}")
        
        if not russian_brands:
            self.stdout.write("   ‚úÖ –†–æ—Å—ñ–π—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
        
        return russian_brands

    def check_portfolio(self, strict_mode):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ"""
        portfolios = Portfolio.objects.all()
        russian_portfolio = []
        
        for portfolio in portfolios:
            text = f"{portfolio.title} {portfolio.description}"
            
            if strict_mode:
                is_russian = self.is_possibly_russian(text)
            else:
                is_russian = self.is_definitely_russian(text)
            
            if is_russian:
                russian_portfolio.append(portfolio)
                self.stdout.write(f"   ‚ùå –ü—Ä–æ—î–∫—Ç: {portfolio.title}")
        
        if not russian_portfolio:
            self.stdout.write("   ‚úÖ –†–æ—Å—ñ–π—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
        
        return russian_portfolio

    def check_reviews(self, strict_mode):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–≥—É–∫—ñ–≤"""
        reviews = Review.objects.all()
        russian_reviews = []
        
        for review in reviews:
            if strict_mode:
                is_russian = self.is_possibly_russian(review.review_text)
            else:
                is_russian = self.is_definitely_russian(review.review_text)
            
            if is_russian:
                russian_reviews.append(review)
                self.stdout.write(f"   ‚ùå –í—ñ–¥–≥—É–∫ –≤—ñ–¥: {review.client_name}")
        
        if not russian_reviews:
            self.stdout.write("   ‚úÖ –†–æ—Å—ñ–π—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
        
        return russian_reviews 