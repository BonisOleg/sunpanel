import pandas as pd
import requests
import os
from django.core.management.base import BaseCommand
from django.core.files.base import ContentFile
from django.db import transaction
from mainapp.models import Product
from urllib.parse import urlparse

class Command(BaseCommand):
    help = '–ü—ñ–¥–∫–ª—é—á–∞—î —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –∑ Excel —Ç–∞–±–ª–∏—Ü—ñ'

    def add_arguments(self, parser):
        parser.add_argument(
            '--file',
            type=str,
            default='export-products-10-07-25_11-38-56.xlsx',
            help='–®–ª—è—Ö –¥–æ Excel —Ñ–∞–π–ª—É –∑ –¥–∞–Ω–∏–º–∏',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è',
        )

    def handle(self, *args, **options):
        file_path = options['file']
        dry_run = options['dry_run']
        
        if not os.path.exists(file_path):
            self.stdout.write(self.style.ERROR(f"–§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"))
            return
        
        if dry_run:
            self.stdout.write(self.style.WARNING("–†–ï–ñ–ò–ú –ü–û–ü–ï–†–ï–î–ù–¨–û–ì–û –ü–ï–†–ï–ì–õ–Ø–î–£ - —Ñ–æ—Ç–æ –Ω–µ –±—É–¥—É—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ"))
        
        self.stdout.write(f"üìä –ß–∏—Ç–∞–Ω–Ω—è Excel —Ñ–∞–π–ª—É: {file_path}")
        
        try:
            df = pd.read_excel(file_path)
            self.stdout.write(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(df)} —Ä—è–¥–∫—ñ–≤")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
            required_columns = ['–ù–∞–∑–≤–∞_–ø–æ–∑–∏—Ü—ñ—ó', '–ü–æ—Å–∏–ª–∞–Ω–Ω—è_–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è']
            missing_columns = [col for col in required_columns if col not in df.columns]
            
            if missing_columns:
                self.stdout.write(self.style.ERROR(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}"))
                return
            
            processed_count = 0
            updated_count = 0
            error_count = 0
            
            for index, row in df.iterrows():
                try:
                    product_name = self.clean_name(str(row['–ù–∞–∑–≤–∞_–ø–æ–∑–∏—Ü—ñ—ó']))
                    image_urls = str(row['–ü–æ—Å–∏–ª–∞–Ω–Ω—è_–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è'])
                    
                    if pd.isna(image_urls) or image_urls.lower() in ['nan', '']:
                        continue
                    
                    # –®—É–∫–∞—î–º–æ —Ç–æ–≤–∞—Ä –∑–∞ –Ω–∞–∑–≤–æ—é
                    matching_products = Product.objects.filter(name__icontains=product_name[:30])
                    
                    if not matching_products.exists():
                        # –ü—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∑–∞ —á–∞—Å—Ç–∏–Ω–æ—é –Ω–∞–∑–≤–∏
                        words = product_name.split()[:3]  # –ü–µ—Ä—à—ñ 3 —Å–ª–æ–≤–∞
                        for word in words:
                            if len(word) > 4:  # –¢—ñ–ª—å–∫–∏ –¥–æ–≤–≥—ñ —Å–ª–æ–≤–∞
                                matching_products = Product.objects.filter(name__icontains=word)
                                if matching_products.exists():
                                    break
                    
                    if matching_products.exists():
                        product = matching_products.first()
                        
                        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                        first_image_url = image_urls.split(',')[0].strip()
                        
                        if first_image_url.startswith('http'):
                            if dry_run:
                                self.stdout.write(f"–ü–Ü–î–ö–õ–Æ–ß–ò–¢–ò: {product.name} ‚Üí {first_image_url}")
                            else:
                                success = self.download_and_attach_image(product, first_image_url)
                                if success:
                                    updated_count += 1
                                    self.stdout.write(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ —Ñ–æ—Ç–æ: {product.name}")
                                else:
                                    error_count += 1
                                    self.stdout.write(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ç–æ: {product.name}")
                    
                    processed_count += 1
                    
                except Exception as e:
                    error_count += 1
                    self.stdout.write(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ä—è–¥–∫—É {index + 1}: {str(e)}")
                    continue
            
            # –ü—ñ–¥—Å—É–º–∫–∏
            if dry_run:
                self.stdout.write(
                    self.style.WARNING(
                        f"\n–ü–û–ü–ï–†–ï–î–ù–Ü–ô –ü–ï–†–ï–ì–õ–Ø–î –ó–ê–í–ï–†–®–ï–ù–û\n"
                        f"–û–±—Ä–æ–±–ª–µ–Ω–æ —Ä—è–¥–∫—ñ–≤: {processed_count}\n"
                        f"–ë—É–¥–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ —Ñ–æ—Ç–æ: {updated_count}\n"
                        f"–ü–æ–º–∏–ª–∫–∏: {error_count}\n"
                        f"–î–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–µ–∑ --dry-run"
                    )
                )
            else:
                self.stdout.write(
                    self.style.SUCCESS(
                        f"\n–ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –§–û–¢–û –ó–ê–í–ï–†–®–ï–ù–û\n"
                        f"–û–±—Ä–æ–±–ª–µ–Ω–æ —Ä—è–¥–∫—ñ–≤: {processed_count}\n"
                        f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ —Ñ–æ—Ç–æ: {updated_count}\n"
                        f"–ü–æ–º–∏–ª–∫–∏: {error_count}"
                    )
                )
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {str(e)}"))

    def clean_name(self, name):
        """–û—á–∏—â–∞—î –Ω–∞–∑–≤—É –¥–ª—è –ø–æ—à—É–∫—É"""
        # –ü—Ä–æ—Å—Ç–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–µ—Ä–º—ñ–Ω—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É
        translations = {
            '–ì–∏–±—Ä–∏–¥–Ω—ã–π': '–ì—ñ–±—Ä–∏–¥–Ω–∏–π',
            '–∏–Ω–≤–µ—Ä—Ç–æ—Ä': '—ñ–Ω–≤–µ—Ä—Ç–æ—Ä',
            '–°–æ–ª–Ω–µ—á–Ω–∞—è': '–°–æ–Ω—è—á–Ω–∞',
            '–ø–∞–Ω–µ–ª—å': '–ø–∞–Ω–µ–ª—å',
            '–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞—è': '–ê–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞',
            '–±–∞—Ç–∞—Ä–µ—è': '–±–∞—Ç–∞—Ä–µ—è',
            '–ö–æ–º–ø–ª–µ–∫—Ç': '–ö–æ–º–ø–ª–µ–∫—Ç',
        }
        
        result = str(name)
        for rus, ukr in translations.items():
            result = result.replace(rus, ukr)
        
        return result.strip()

    def download_and_attach_image(self, product, image_url):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–∞ –ø—Ä–∏–∫—Ä—ñ–ø–ª—é—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ —Ç–æ–≤–∞—Ä—É"""
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            response = requests.get(image_url, timeout=10)
            response.raise_for_status()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É –∑ URL
            parsed_url = urlparse(image_url)
            filename = os.path.basename(parsed_url.path)
            
            if not filename or '.' not in filename:
                filename = f"product_{product.id}.jpg"
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
            with transaction.atomic():
                product.image.save(
                    filename,
                    ContentFile(response.content),
                    save=True
                )
            
            return True
            
        except Exception as e:
            self.stdout.write(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {image_url}: {str(e)}")
            return False 