import re
from django.core.management.base import BaseCommand
from mainapp.models import Product, Category, Brand, Portfolio, Review

class Command(BaseCommand):
    help = '–ü–µ—Ä–µ–≤—ñ—Ä—è—î –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ —É –æ–ø–∏—Å–∞—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ —ñ–Ω—à–∏—Ö –º–æ–¥–µ–ª—è—Ö'

    def add_arguments(self, parser):
        parser.add_argument(
            '--fix',
            action='store_true',
            help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –ø–æ–º–∏–ª–∫–∏',
        )

    def handle(self, *args, **options):
        fix_errors = options['fix']
        
        self.stdout.write("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫...")
        
        # –°–ª–æ–≤–Ω–∏–∫ —á–∞—Å—Ç–∏—Ö –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
        spelling_errors = {
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è
            '–Ω–π ': '–Ω–∏–π ',
            '–Ω–π.': '–Ω–∏–π.',
            '–Ω–π,': '–Ω–∏–π,',
            '—Å–æ–Ω—è—á–Ω–π': '—Å–æ–Ω—è—á–Ω–∏–π',
            '–≥—ñ–±—Ä–∏–¥–Ω–π': '–≥—ñ–±—Ä–∏–¥–Ω–∏–π',
            '–≤–∏—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–π': '–≤–∏—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∏–π',
            '–∞–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–π': '–∞–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∏–π',
            '–ª—ñ—Ç–≤–π': '–ª—ñ—Ç—ñ—î–≤–∏–π',
            
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –æ–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
            '–∫–≤—Ç ': '–∫–í—Ç ',
            '–∫–≤—Ç¬∑–≥–æ–¥': '–∫–í—Ç¬∑–≥–æ–¥',
            ' –≤ ': ' –í ',
            ' –≤.': ' –í.',
            ' –≤,': ' –í,',
            '–≤—Ç ': '–í—Ç ',
            ' –∞ ': ' –ê ',
            ' –∞.': ' –ê.',
            ' –∞,': ' –ê,',
            '–∞–≥–æ–¥': '–ê¬∑–≥–æ–¥',
            '–≤—Ç¬∑–≥–æ–¥': '–í—Ç¬∑–≥–æ–¥',
            
            # –¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏
            '—ñ–Ω–≤–µ—Ç–æ—Ä': '—ñ–Ω–≤–µ—Ä—Ç–æ—Ä',
            '—ñ–Ω–≤e—Ä—Ç–æ—Ä': '—ñ–Ω–≤–µ—Ä—Ç–æ—Ä',
            '–µ–ªe–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—è': '–µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—è',
            '–µ–ªe–∫—Ç—Ä–∏—á–Ω–∏–π': '–µ–ª–µ–∫—Ç—Ä–∏—á–Ω–∏–π',
            '–±–∞—Ça—Ä–µ—è': '–±–∞—Ç–∞—Ä–µ—è',
            '—Å–∏—Å—Ç–µ–º–∞': '—Å–∏—Å—Ç–µ–º–∞',
            
            # –ë—Ä–µ–Ω–¥–∏ —Ç–∞ –º–æ–¥–µ–ª—ñ
            'deye': 'Deye',
            'must': 'Must',
            'longi': 'Longi',
            'lifepo4': 'LiFePO4',
            'pv18': 'PV18',
            'sun-': 'SUN-',
            
            # –î—É–±–ª—ñ —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–∞ –ø—Ä–æ–±—ñ–ª—ñ–≤
            '  ': ' ',
            '..': '.',
            ',,': ',',
            '( ': '(',
            ' )': ')',
            ' ,': ',',
            ' .': '.',
            
            # –†–æ—Å—ñ–π—Å—å–∫—ñ –∑–∞–ª–∏—à–∫–∏
            '—Ö—Ä–∞–Ω–µ–Ω–∏—è': '–∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è',
            '–µ–Ω–µ—Ä–≥–∏–∏': '–µ–Ω–µ—Ä–≥—ñ—ó',
            '—Å–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è': '—Å–∏—Å—Ç–µ–º–∞ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è',
            '–≤—ã—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞—è': '–≤–∏—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞',
            '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞—è': '–∞–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞',
            '—Å–æ–ª–Ω–µ—á–Ω–∞—è': '—Å–æ–Ω—è—á–Ω–∞',
            '–ø–∞–Ω–µ–ª—å': '–ø–∞–Ω–µ–ª—å',
            '–º–æ–¥—É–ª—å': '–º–æ–¥—É–ª—å',
            '—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è': '–µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—è',
            '–ø–∏—Ç–∞–Ω–∏–µ': '–∂–∏–≤–ª–µ–Ω–Ω—è',
            '–º–æ—â–Ω–æ—Å—Ç—å': '–ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å',
            '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ': '–Ω–∞–ø—Ä—É–≥–∞',
            '–≥–∏–±—Ä–∏–¥–Ω—ã–π': '–≥—ñ–±—Ä–∏–¥–Ω–∏–π',
            '—Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è': '—Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è',
            '–∫–æ–º–ø–ª–µ–∫—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ': '–∫–æ–º–ø–ª–µ–∫—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ',
            

            
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —ñ–º–µ–Ω —Ç–∞ —Å–ª—ñ–≤
            '–ö–∏—ó–≤—Å—å–∫–ê': '–ö–∏—ó–≤—Å—å–∫–∞',
            '–ü—Ä–∏–≤–∞—Ç–Ω–ê': '–ü—Ä–∏–≤–∞—Ç–Ω–∞', 
            '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–ê': '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞',
            '–°–æ–Ω—è—á–Ω–ê': '–°–æ–Ω—è—á–Ω–∞',
            '–ê–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–ê': '–ê–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞',
            '–í–∏—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–ê': '–í–∏—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞',
            '–ì—ñ–±—Ä–∏–¥–Ω–ê': '–ì—ñ–±—Ä–∏–¥–Ω–∞',
            '–°–≤—ñ—Ç–ª–∞–Ω–ê': '–°–≤—ñ—Ç–ª–∞–Ω–∞',
            '–ê–Ω–Ω–ê': '–ê–Ω–Ω–∞',
            '–ú–∞—Ä–∏–Ω–ê': '–ú–∞—Ä–∏–Ω–∞',
            '–û–¥–µ—Å—å–∫–ê': '–û–¥–µ—Å—å–∫–∞',
            '–í—ñ–Ω–Ω–∏—Ü—å–∫–ê': '–í—ñ–Ω–Ω–∏—Ü—å–∫–∞',
            '–•–µ—Ä—Å–æ–Ω—Å—å–∫–ê': '–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞',
            '–õ—å–≤—ñ–≤—Å—å–∫–ê': '–õ—å–≤—ñ–≤—Å—å–∫–∞',
            '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–ê': '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞',
            '–ü–æ–ª—Ç–∞–≤—Å—å–∫–ê': '–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞',
            '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–ê': '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞',
            '–º–æ–¥—É–ª—ñ–í': '–º–æ–¥—É–ª—ñ–≤',
            '–Ω–ê ': '–Ω–∞ ',
            '—Ç–ê ': '—Ç–∞ ',
        }
        
        total_errors = 0
        fixed_errors = 0
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–≤–∞—Ä–∏
        self.stdout.write("\nüì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤...")
        products = Product.objects.all()
        
        for product in products:
            errors_found = []
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–∑–≤—É
            original_name = product.name
            fixed_name = self.fix_text(original_name, spelling_errors)
            if original_name != fixed_name:
                errors_found.append(f"–ù–∞–∑–≤–∞: {original_name} ‚Üí {fixed_name}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–ø–∏—Å
            original_desc = product.description
            fixed_desc = self.fix_text(original_desc, spelling_errors)
            if original_desc != fixed_desc:
                errors_found.append(f"–û–ø–∏—Å: –∑–º—ñ–Ω–µ–Ω–æ")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è
            for field in ['model', 'power', 'efficiency', 'warranty', 'country']:
                original_value = getattr(product, field, '')
                if original_value:
                    fixed_value = self.fix_text(original_value, spelling_errors)
                    if original_value != fixed_value:
                        errors_found.append(f"{field}: {original_value} ‚Üí {fixed_value}")
            
            if errors_found:
                total_errors += len(errors_found)
                self.stdout.write(f"\n‚ùå –¢–æ–≤–∞—Ä ID {product.id}: {product.name}")
                for error in errors_found:
                    self.stdout.write(f"   ‚Ä¢ {error}")
                
                if fix_errors:
                    product.name = fixed_name
                    product.description = fixed_desc
                    for field in ['model', 'power', 'efficiency', 'warranty', 'country']:
                        original_value = getattr(product, field, '')
                        if original_value:
                            setattr(product, field, self.fix_text(original_value, spelling_errors))
                    product.save()
                    fixed_errors += len(errors_found)
                    self.stdout.write(f"   ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        self.stdout.write("\nüìÇ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...")
        categories = Category.objects.all()
        
        for category in categories:
            errors_found = []
            
            original_name = category.name
            fixed_name = self.fix_text(original_name, spelling_errors)
            if original_name != fixed_name:
                errors_found.append(f"–ù–∞–∑–≤–∞: {original_name} ‚Üí {fixed_name}")
            
            original_desc = category.description
            fixed_desc = self.fix_text(original_desc, spelling_errors)
            if original_desc != fixed_desc:
                errors_found.append(f"–û–ø–∏—Å: –∑–º—ñ–Ω–µ–Ω–æ")
            
            if errors_found:
                total_errors += len(errors_found)
                self.stdout.write(f"\n‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è ID {category.id}: {category.name}")
                for error in errors_found:
                    self.stdout.write(f"   ‚Ä¢ {error}")
                
                if fix_errors:
                    category.name = fixed_name
                    category.description = fixed_desc
                    category.save()
                    fixed_errors += len(errors_found)
                    self.stdout.write(f"   ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±—Ä–µ–Ω–¥–∏
        self.stdout.write("\nüè∑Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±—Ä–µ–Ω–¥—ñ–≤...")
        brands = Brand.objects.all()
        
        for brand in brands:
            errors_found = []
            
            original_name = brand.name
            fixed_name = self.fix_text(original_name, spelling_errors)
            if original_name != fixed_name:
                errors_found.append(f"–ù–∞–∑–≤–∞: {original_name} ‚Üí {fixed_name}")
            
            original_desc = brand.description
            fixed_desc = self.fix_text(original_desc, spelling_errors)
            if original_desc != fixed_desc:
                errors_found.append(f"–û–ø–∏—Å: –∑–º—ñ–Ω–µ–Ω–æ")
            
            if errors_found:
                total_errors += len(errors_found)
                self.stdout.write(f"\n‚ùå –ë—Ä–µ–Ω–¥ ID {brand.id}: {brand.name}")
                for error in errors_found:
                    self.stdout.write(f"   ‚Ä¢ {error}")
                
                if fix_errors:
                    brand.name = fixed_name
                    brand.description = fixed_desc
                    brand.save()
                    fixed_errors += len(errors_found)
                    self.stdout.write(f"   ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–æ—î–∫—Ç–∏ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ
        self.stdout.write("\nüèóÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—î–∫—Ç—ñ–≤ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ...")
        portfolios = Portfolio.objects.all()
        
        for portfolio in portfolios:
            errors_found = []
            
            original_title = portfolio.title
            fixed_title = self.fix_text(original_title, spelling_errors)
            if original_title != fixed_title:
                errors_found.append(f"–ù–∞–∑–≤–∞: {original_title} ‚Üí {fixed_title}")
            
            original_desc = portfolio.description
            fixed_desc = self.fix_text(original_desc, spelling_errors)
            if original_desc != fixed_desc:
                errors_found.append(f"–û–ø–∏—Å: –∑–º—ñ–Ω–µ–Ω–æ")
            
            for field in ['location', 'power_capacity', 'project_type', 'client_name']:
                original_value = getattr(portfolio, field, '')
                if original_value:
                    fixed_value = self.fix_text(original_value, spelling_errors)
                    if original_value != fixed_value:
                        errors_found.append(f"{field}: {original_value} ‚Üí {fixed_value}")
            
            if errors_found:
                total_errors += len(errors_found)
                self.stdout.write(f"\n‚ùå –ü—Ä–æ—î–∫—Ç ID {portfolio.id}: {portfolio.title}")
                for error in errors_found:
                    self.stdout.write(f"   ‚Ä¢ {error}")
                
                if fix_errors:
                    portfolio.title = fixed_title
                    portfolio.description = fixed_desc
                    for field in ['location', 'power_capacity', 'project_type', 'client_name']:
                        original_value = getattr(portfolio, field, '')
                        if original_value:
                            setattr(portfolio, field, self.fix_text(original_value, spelling_errors))
                    portfolio.save()
                    fixed_errors += len(errors_found)
                    self.stdout.write(f"   ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–≥—É–∫–∏
        self.stdout.write("\n‚≠ê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–≥—É–∫—ñ–≤...")
        reviews = Review.objects.all()
        
        for review in reviews:
            errors_found = []
            
            original_text = review.review_text
            fixed_text = self.fix_text(original_text, spelling_errors)
            if original_text != fixed_text:
                errors_found.append(f"–¢–µ–∫—Å—Ç –≤—ñ–¥–≥—É–∫—É: –∑–º—ñ–Ω–µ–Ω–æ")
            
            for field in ['client_name', 'client_position', 'project_type', 'location']:
                original_value = getattr(review, field, '')
                if original_value:
                    fixed_value = self.fix_text(original_value, spelling_errors)
                    if original_value != fixed_value:
                        errors_found.append(f"{field}: {original_value} ‚Üí {fixed_value}")
            
            if errors_found:
                total_errors += len(errors_found)
                self.stdout.write(f"\n‚ùå –í—ñ–¥–≥—É–∫ ID {review.id}: {review.client_name}")
                for error in errors_found:
                    self.stdout.write(f"   ‚Ä¢ {error}")
                
                if fix_errors:
                    review.review_text = fixed_text
                    for field in ['client_name', 'client_position', 'project_type', 'location']:
                        original_value = getattr(review, field, '')
                        if original_value:
                            setattr(review, field, self.fix_text(original_value, spelling_errors))
                    review.save()
                    fixed_errors += len(errors_found)
                    self.stdout.write(f"   ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
        # –ü—ñ–¥—Å—É–º–∫–∏
        if fix_errors:
            self.stdout.write(
                self.style.SUCCESS(
                    f"\nüéâ –ü–ï–†–ï–í–Ü–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê\n"
                    f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–æ–∫: {total_errors}\n"
                    f"–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_errors}"
                )
            )
        else:
            if total_errors > 0:
                self.stdout.write(
                    self.style.WARNING(
                        f"\n‚ö†Ô∏è –ó–ù–ê–ô–î–ï–ù–û –ü–û–ú–ò–õ–ö–ò\n"
                        f"–í—Å—å–æ–≥–æ –ø–æ–º–∏–ª–æ–∫: {total_errors}\n"
                        f"–î–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–ø—É—Å—Ç—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --fix"
                    )
                )
            else:
                self.stdout.write(
                    self.style.SUCCESS(
                        f"\n‚úÖ –ü–û–ú–ò–õ–û–ö –ù–ï –ó–ù–ê–ô–î–ï–ù–û\n"
                        f"–í—Å—ñ —Ç–µ–∫—Å—Ç–∏ –≤–∏–≥–ª—è–¥–∞—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ!"
                    )
                )

    def fix_text(self, text, errors_dict):
        """–í–∏–ø—Ä–∞–≤–ª—è—î —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫"""
        if not text:
            return text
        
        result = str(text)
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        for wrong, correct in errors_dict.items():
            result = result.replace(wrong, correct)
        
        # –û—á–∏—â–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
        result = re.sub(r'\s+', ' ', result).strip()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö —Ä–æ—Å—ñ–π—Å—å–∫–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
        if re.search(r'[—ë—ä—ã—ç]', result):
            # –ó–∞–º—ñ–Ω—è—î–º–æ —Ä–æ—Å—ñ–π—Å—å–∫—ñ —Å–∏–º–≤–æ–ª–∏ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ
            result = result.replace('—ë', '–µ')
            result = result.replace('—ä', '')
            result = result.replace('—ã', '–∏')
            result = result.replace('—ç', '–µ')
        
        return result

    def check_suspicious_patterns(self, text):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞ –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏ —É —Ç–µ–∫—Å—Ç—ñ"""
        if not text:
            return []
        
        suspicious = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —Ä–æ—Å—ñ–π—Å—å–∫—ñ —Å–ª–æ–≤–∞
        russian_patterns = [
            r'\b–≥–∏–±—Ä–∏–¥–Ω\w+',
            r'\b–∏–Ω–≤–µ—Ä—Ç–æ—Ä\w*',
            r'\b—Å–æ–ª–Ω–µ—á–Ω\w+',
            r'\b–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä\w+',
            r'\b—Ö—Ä–∞–Ω–µ–Ω–∏\w+',
            r'\b—ç–Ω–µ—Ä–≥–∏\w+',
            r'\b–º–æ—â–Ω–æ—Å—Ç\w+',
            r'\b–Ω–∞–ø—Ä—è–∂–µ–Ω–∏\w+',
        ]
        
        for pattern in russian_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                suspicious.extend(matches)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è
        incorrect_endings = re.findall(r'\w+–Ω–π\b', text)
        if incorrect_endings:
            suspicious.extend(incorrect_endings)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –¥—É–±–ª—ñ –ø—Ä–æ–±—ñ–ª—ñ–≤
        if '  ' in text:
            suspicious.append('–ø–æ–¥–≤—ñ–π–Ω—ñ –ø—Ä–æ–±—ñ–ª–∏')
        
        return suspicious 