import pandas as pd
import requests
import re
import os
from urllib.parse import urlparse, urljoin
from django.core.management.base import BaseCommand, CommandError
from django.core.files.base import ContentFile
from django.db import transaction
from django.utils.text import slugify
from mainapp.models import Product, Category, Brand, ProductImage
import time
from bs4 import BeautifulSoup

class Command(BaseCommand):
    help = '–í–∏–¥–∞–ª—è—î –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ —ñ–º–ø–æ—Ä—Ç—É—î –Ω–æ–≤—ñ –∑ second.xlsx —Ç–∞ export-products-10-07-25_11-38-56.xlsx –õ–ò–®–ï –£–ö–†–ê–á–ù–°–¨–ö–û–Æ'

    def add_arguments(self, parser):
        parser.add_argument(
            '--categories-file',
            type=str,
            default='second.xlsx',
            help='–§–∞–π–ª –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ (second.xlsx)'
        )
        parser.add_argument(
            '--products-file',
            type=str,
            default='export-products-10-07-25_11-38-56.xlsx',
            help='–§–∞–π–ª –∑ —Ç–æ–≤–∞—Ä–∞–º–∏ (export-products-10-07-25_11-38-56.xlsx)'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–¢—ñ–ª—å–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–∏ —â–æ –±—É–¥–µ –∑—Ä–æ–±–ª–µ–Ω–æ, –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è'
        )
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='–î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥ - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –ø—Ä–∏—á–∏–Ω–∏ —ó—Ö –ø—Ä–æ–ø—É—Å–∫—É'
        )

    def handle(self, *args, **options):
        categories_file = options['categories_file']
        products_file = options['products_file']
        dry_run = options['dry_run']
        verbose = options['verbose']
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
        if not os.path.exists(categories_file):
            raise CommandError(f'–§–∞–π–ª {categories_file} –Ω–µ —ñ—Å–Ω—É—î')
        if not os.path.exists(products_file):
            raise CommandError(f'–§–∞–π–ª {products_file} –Ω–µ —ñ—Å–Ω—É—î')

        if dry_run:
            self.stdout.write(self.style.WARNING("–†–ï–ñ–ò–ú –ü–û–ü–ï–†–ï–î–ù–¨–û–ì–û –ü–ï–†–ï–ì–õ–Ø–î–£ - –∑–º—ñ–Ω–∏ –Ω–µ –±—É–¥—É—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω—ñ"))

        # –ö—Ä–æ–∫ 1: –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ —Ç–æ–≤–∞—Ä–∏
        self.stdout.write("\nüóëÔ∏è –ö—Ä–æ–∫ 1: –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —ñ—Å–Ω—É—é—á–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤...")
        self.clear_all_products(dry_run)

        # –ö—Ä–æ–∫ 2: –ß–∏—Ç–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        self.stdout.write("\nüìÇ –ö—Ä–æ–∫ 2: –ß–∏—Ç–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...")
        categories_mapping = self.read_categories(categories_file)

        # –ö—Ä–æ–∫ 3: –ß–∏—Ç–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ —ñ–º–ø–æ—Ä—Ç—É—î–º–æ
        self.stdout.write("\nüì¶ –ö—Ä–æ–∫ 3: –Ü–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤...")
        imported_count = self.import_products(products_file, categories_mapping, dry_run, verbose)

        # –ü—ñ–¥—Å—É–º–∫–∏
        if dry_run:
            self.stdout.write(
                self.style.WARNING(
                    f"\n–ü–û–ü–ï–†–ï–î–ù–Ü–ô –ü–ï–†–ï–ì–õ–Ø–î –ó–ê–í–ï–†–®–ï–ù–û\n"
                    f"–ë—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {Product.objects.count()}\n"
                    f"–ë—É–¥–µ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {imported_count}\n"
                    f"–î–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–µ–∑ --dry-run"
                )
            )
        else:
            final_count = Product.objects.count()
            self.stdout.write(
                self.style.SUCCESS(
                    f"\n–Ü–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù–û\n"
                    f"–Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {final_count}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä—ñ–π: {Category.objects.count()}\n"
                    f"–ë—Ä–µ–Ω–¥—ñ–≤: {Brand.objects.count()}"
                )
            )

    def clear_all_products(self, dry_run):
        """–í–∏–¥–∞–ª—è—î –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ —Ç–æ–≤–∞—Ä–∏"""
        current_count = Product.objects.count()
        
        if current_count == 0:
            self.stdout.write("–¢–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–º–∞—î")
            return

        if dry_run:
            self.stdout.write(f"–ë–£–î–ï –í–ò–î–ê–õ–ï–ù–û: {current_count} —Ç–æ–≤–∞—Ä—ñ–≤")
        else:
            with transaction.atomic():
                Product.objects.all().delete()
                self.stdout.write(f"–í–∏–¥–∞–ª–µ–Ω–æ {current_count} —Ç–æ–≤–∞—Ä—ñ–≤")

    def read_categories(self, file_path):
        """–ß–∏—Ç–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ —Ñ–∞–π–ª—É second.xlsx"""
        try:
            df = pd.read_excel(file_path)
            self.stdout.write(f'–ó–Ω–∞–π–¥–µ–Ω–æ {len(df)} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —É —Ñ–∞–π–ª—ñ')
            
            categories_mapping = {}
            
            for index, row in df.iterrows():
                ukrainian_name = str(row.get('–ù–∞–∑–≤–∞_–≥—Ä—É–ø–∏_—É–∫—Ä', '')).strip()
                
                if ukrainian_name and pd.notna(row.get('–ù–∞–∑–≤–∞_–≥—Ä—É–ø–∏_—É–∫—Ä')):
                    # –û—á–∏—â–∞—î–º–æ –≤—ñ–¥ HTML —Ç–µ–≥—ñ–≤ —Ç–∞ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
                    ukrainian_name = self.clean_text(ukrainian_name)
                    
                    if ukrainian_name and len(ukrainian_name) > 3:
                        categories_mapping[ukrainian_name] = ukrainian_name
                        self.stdout.write(f'  –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {ukrainian_name}')
            
            self.stdout.write(f'–í—Å—å–æ–≥–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {len(categories_mapping)}')
            return categories_mapping
            
        except Exception as e:
            raise CommandError(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {str(e)}')

    def import_products(self, file_path, categories_mapping, dry_run, verbose):
        """–Ü–º–ø–æ—Ä—Ç—É—î —Ç–æ–≤–∞—Ä–∏ –∑ —Ñ–∞–π–ª—É export-products-10-07-25_11-38-56.xlsx"""
        try:
            # –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª - —Å–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –Ω–∞–∑–≤–∏ –ª–∏—Å—Ç—ñ–≤
            try:
                df = pd.read_excel(file_path, sheet_name='Export Products Sheet')
            except:
                try:
                    df = pd.read_excel(file_path, sheet_name=0)  # –ü–µ—Ä—à–∏–π –ª–∏—Å—Ç
                except:
                    df = pd.read_excel(file_path)

            self.stdout.write(f'–ó–Ω–∞–π–¥–µ–Ω–æ {len(df)} —Ç–æ–≤–∞—Ä—ñ–≤ —É —Ñ–∞–π–ª—ñ')
            
            if len(df) == 0:
                raise CommandError('–§–∞–π–ª –∑ —Ç–æ–≤–∞—Ä–∞–º–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π')

            created_count = 0
            skipped_count = 0
            skip_reasons = {
                'no_ukrainian_name': 0,
                'short_name': 0,
                'not_ukrainian': 0,
                'no_description': 0,
                'other': 0
            }
            
            for index, row in df.iterrows():
                try:
                    # –û—Ç—Ä–∏–º—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –Ω–∞–∑–≤—É —Ç–∞ –æ–ø–∏—Å
                    name_ukr = str(row.get('–ù–∞–∑–≤–∞_–ø–æ–∑–∏—Ü—ñ—ó_—É–∫—Ä', '')).strip() if pd.notna(row.get('–ù–∞–∑–≤–∞_–ø–æ–∑–∏—Ü—ñ—ó_—É–∫—Ä')) else ''
                    description_ukr = str(row.get('–û–ø–∏—Å_—É–∫—Ä', '')).strip() if pd.notna(row.get('–û–ø–∏—Å_—É–∫—Ä')) else ''
                    
                    # –Ø–∫—â–æ –Ω–µ–º–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –Ω–∞–∑–≤–∏, —Å–ø—Ä–æ–±—É—î–º–æ —Ä–æ—Å—ñ–π—Å—å–∫—É —ñ –ø–µ—Ä–µ–≤–µ–¥–µ–º–æ
                    if not name_ukr:
                        name_rus = str(row.get('–ù–∞–∑–≤–∞_–ø–æ–∑–∏—Ü—ñ—ó', '')).strip() if pd.notna(row.get('–ù–∞–∑–≤–∞_–ø–æ–∑–∏—Ü—ñ—ó')) else ''
                        if name_rus:
                            name_ukr = self.translate_to_ukrainian(name_rus)
                            self.stdout.write(f"–ü–µ—Ä–µ–∫–ª–∞–¥: '{name_rus}' -> '{name_ukr}'")
                    
                    # –Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ–º–∞—î –Ω–∞–∑–≤–∏
                    if not name_ukr:
                        skip_reasons['no_ukrainian_name'] += 1
                        if verbose:
                            self.stdout.write("‚ùå –ü–†–û–ü–£–©–ï–ù–û: –Ω–µ–º–∞—î –Ω–∞–∑–≤–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É")
                        skipped_count += 1
                        continue
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è verbose —Ä–µ–∂–∏–º—É
                    if verbose:
                        self.stdout.write(f"\n--- –¢–æ–≤–∞—Ä {index + 1} ---")
                        self.stdout.write(f"–ù–∞–∑–≤–∞ —É–∫—Ä: '{name_ukr[:100]}'")
                        self.stdout.write(f"–û–ø–∏—Å —É–∫—Ä: '{description_ukr[:100]}'")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É –Ω–∞–∑–≤–∏
                    if len(name_ukr) < 5:
                        skip_reasons['short_name'] += 1
                        if verbose:
                            self.stdout.write("‚ùå –ü–†–û–ü–£–©–ï–ù–û: –Ω–∞–∑–≤–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞")
                        skipped_count += 1
                        continue
                    
                    # –û—á–∏—â–∞—î–º–æ –Ω–∞–∑–≤—É —Ç–∞ –æ–ø–∏—Å
                    name_clean = self.clean_and_fix_text(name_ukr)
                    
                    # –Ø–∫—â–æ –Ω–µ–º–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –æ–ø–∏—Å—É, —Å–ø—Ä–æ–±—É—î–º–æ —Ä–æ—Å—ñ–π—Å—å–∫–∏–π
                    if not description_ukr:
                        description_rus = str(row.get('–û–ø–∏—Å', '')).strip() if pd.notna(row.get('–û–ø–∏—Å')) else ''
                        if description_rus:
                            description_ukr = self.translate_to_ukrainian(description_rus)
                    
                    description_clean = self.clean_description(description_ukr) if description_ukr else "–û–ø–∏—Å —Ç–æ–≤–∞—Ä—É –±—É–¥–µ –¥–æ–¥–∞–Ω–∏–π –ø—ñ–∑–Ω—ñ—à–µ."
                    
                    # –¢–µ–ø–µ—Ä –ø—Ä–∏–π–º–∞—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏
                    if not name_clean or len(name_clean) < 5:
                        skip_reasons['not_ukrainian'] += 1
                        if verbose:
                            self.stdout.write(f"‚ùå –ü–†–û–ü–£–©–ï–ù–û: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ –Ω–∞–∑–≤—É")
                        skipped_count += 1
                        continue
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—à—ñ –¥–∞–Ω—ñ
                    price = self.parse_price(row.get('–¶—ñ–Ω–∞', 0))
                    category_name = str(row.get('–ù–∞–∑–≤–∞_–≥—Ä—É–ø–∏', '')).strip() if pd.notna(row.get('–ù–∞–∑–≤–∞_–≥—Ä—É–ø–∏')) else ''
                    brand_name = str(row.get('–í–∏—Ä–æ–±–Ω–∏–∫', '')).strip() if pd.notna(row.get('–í–∏—Ä–æ–±–Ω–∏–∫')) else ''
                    country = str(row.get('–ö—Ä–∞—ó–Ω–∞_–≤–∏—Ä–æ–±–Ω–∏–∫', '')).strip() if pd.notna(row.get('–ö—Ä–∞—ó–Ω–∞_–≤–∏—Ä–æ–±–Ω–∏–∫')) else ''
                    model = str(row.get('–ö–æ–¥_—Ç–æ–≤–∞—Ä—É', '')).strip() if pd.notna(row.get('–ö–æ–¥_—Ç–æ–≤–∞—Ä—É')) else ''
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    image_links = str(row.get('–ü–æ—Å–∏–ª–∞–Ω–Ω—è_–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è', '')).strip() if pd.notna(row.get('–ü–æ—Å–∏–ª–∞–Ω–Ω—è_–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è')) else ''
                    
                    if verbose:
                        self.stdout.write(f"‚úÖ –ü–Ü–î–•–û–î–ò–¢–¨: '{name_clean[:50]}...'")
                        self.stdout.write(f"   –¶—ñ–Ω–∞: {price}, –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category_name}, –ë—Ä–µ–Ω–¥: {brand_name}")
                    
                    if dry_run:
                        self.stdout.write(f"–ë–£–î–ï –°–¢–í–û–†–ï–ù–û: {name_clean[:50]}...")
                        created_count += 1
                    else:
                        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–æ–≤–∞—Ä
                        product = self.create_product(
                            name_clean, 
                            description_clean, 
                            price, 
                            category_name, 
                            brand_name, 
                            model,
                            country,
                            image_links
                        )
                        
                        if product:
                            created_count += 1
                            self.stdout.write(f"–°—Ç–≤–æ—Ä–µ–Ω–æ: {product.name}")
                        else:
                            skip_reasons['other'] += 1
                            skipped_count += 1
                    
                    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
                    if (index + 1) % 10 == 0:
                        self.stdout.write(f"–û–±—Ä–æ–±–ª–µ–Ω–æ {index + 1}/{len(df)} —Ç–æ–≤–∞—Ä—ñ–≤...")
                        
                except Exception as e:
                    skip_reasons['other'] += 1
                    self.stdout.write(self.style.ERROR(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–æ–≤–∞—Ä—É {index + 1}: {str(e)}"))
                    skipped_count += 1
                    continue

            self.stdout.write(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç —ñ–º–ø–æ—Ä—Ç—É:")
            self.stdout.write(f"  –°—Ç–≤–æ—Ä–µ–Ω–æ: {created_count}")
            self.stdout.write(f"  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
            self.stdout.write(f"\n–ü—Ä–∏—á–∏–Ω–∏ –ø—Ä–æ–ø—É—Å–∫—É:")
            self.stdout.write(f"  –ù–µ–º–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –Ω–∞–∑–≤–∏: {skip_reasons['no_ukrainian_name']}")
            self.stdout.write(f"  –ù–∞–∑–≤–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞: {skip_reasons['short_name']}")
            self.stdout.write(f"  –ù–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞: {skip_reasons['not_ukrainian']}")
            self.stdout.write(f"  –Ü–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏: {skip_reasons['other']}")
            
            return created_count
            
        except Exception as e:
            raise CommandError(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ —Ç–æ–≤–∞—Ä—ñ–≤: {str(e)}')

    def create_product(self, name, description, price, category_name, brand_name, model, country, image_links):
        """–°—Ç–≤–æ—Ä—é—î —Ç–æ–≤–∞—Ä –∑ —É—Å—ñ–º–∞ –∑–≤'—è–∑–∫–∞–º–∏"""
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
            category = self.get_or_create_category(category_name)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ—Ç—Ä–∏–º—É—î–º–æ –±—Ä–µ–Ω–¥
            brand = self.get_or_create_brand(brand_name, country)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–æ–≤–∞—Ä –ë–ï–ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
            product = Product.objects.create(
                name=name,
                description=description,
                price=price,
                category=category,
                brand=brand,
                model=model,
                country=country,
                in_stock=True
            )
            
            # –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ü–Ü–°–õ–Ø —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É (–±–µ–∑ atomic)
            if image_links:
                try:
                    self.add_product_images(product, image_links)
                except Exception as e:
                    self.stdout.write(f"  –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è {name}: {str(e)}")
            
            return product
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É '{name}': {str(e)}"))
            return None

    def get_or_create_category(self, name):
        """–°—Ç–≤–æ—Ä—é—î –∞–±–æ –æ—Ç—Ä–∏–º—É—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"""
        if not name:
            name = "–ó–∞–≥–∞–ª—å–Ω–µ"
        
        name = self.clean_text(name)
        
        category, created = Category.objects.get_or_create(
            name=name,
            defaults={'description': f'–ö–∞—Ç–µ–≥–æ—Ä—ñ—è {name}'}
        )
        
        if created:
            self.stdout.write(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {name}")
        
        return category

    def get_or_create_brand(self, name, country=""):
        """–°—Ç–≤–æ—Ä—é—î –∞–±–æ –æ—Ç—Ä–∏–º—É—î –±—Ä–µ–Ω–¥"""
        if not name:
            name = "–ó–∞–≥–∞–ª—å–Ω–∏–π"
        
        name = self.clean_text(name)
        
        brand, created = Brand.objects.get_or_create(
            name=name,
            defaults={'description': f'–ë—Ä–µ–Ω–¥ {name}' + (f' –∑ {country}' if country else '')}
        )
        
        if created:
            self.stdout.write(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –±—Ä–µ–Ω–¥: {name}")
        
        return brand

    def add_product_images(self, product, image_links):
        """–î–æ–¥–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ —Ç–æ–≤–∞—Ä—É –∑ –ø–æ—Å–∏–ª–∞–Ω—å"""
        if not image_links:
            return
        
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (–º–æ–∂—É—Ç—å –±—É—Ç–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–æ—é, –∫—Ä–∞–ø–∫–æ—é –∑ –∫–æ–º–æ—é –∞–±–æ –Ω–æ–≤–∏–º —Ä—è–¥–∫–æ–º)
        links = re.split(r'[,;\n]+', image_links)
        
        image_added = False
        for i, link in enumerate(links):
            link = link.strip()
            if not link:
                continue
                
            try:
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                response = requests.get(link, timeout=10, headers={'User-Agent': 'Mozilla/5.0'})
                if response.status_code == 200:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É –∑ URL
                    parsed_url = urlparse(link)
                    original_filename = os.path.basename(parsed_url.path)
                    
                    # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—É –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É
                    if original_filename and '.' in original_filename:
                        name_part, ext_part = original_filename.rsplit('.', 1)
                        filename = f"product_{product.id}_{i}_{name_part}.{ext_part}"
                    else:
                        filename = f"product_{product.id}_{i}.jpg"
                    
                    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –Ω–∞–∑–≤–æ—é
                    content = ContentFile(response.content, name=filename)
                    
                    if i == 0 and not image_added:
                        # –ü–µ—Ä—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫ –≥–æ–ª–æ–≤–Ω–µ
                        product.image.save(filename, content, save=True)
                        image_added = True
                        self.stdout.write(f"  –î–æ–¥–∞–Ω–æ –≥–æ–ª–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {filename}")
                    else:
                        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                        ProductImage.objects.create(
                            product=product,
                            image=content,
                            alt_text=f"{product.name} - –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {i+1}",
                            order=i
                        )
                        self.stdout.write(f"  –î–æ–¥–∞–Ω–æ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {filename}")
                    
                    time.sleep(0.3)  # –ó–º–µ–Ω—à–µ–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
                    
                else:
                    self.stdout.write(f"  –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {link}: HTTP {response.status_code}")
                    
            except Exception as e:
                self.stdout.write(f"  –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {link}: {str(e)}")
                continue

    def clean_text(self, text):
        """–û—á–∏—â–∞—î —Ç–µ–∫—Å—Ç –≤—ñ–¥ HTML —Ç–µ–≥—ñ–≤ —Ç–∞ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤"""
        if not text:
            return ""
        
        # –í–∏–¥–∞–ª—è—î–º–æ HTML —Ç–µ–≥–∏
        text = BeautifulSoup(str(text), 'html.parser').get_text()
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
        text = re.sub(r'\s+', ' ', text).strip()
        
        return text

    def clean_description(self, text):
        """–û—á–∏—â–∞—î –æ–ø–∏—Å –∑–∞ –ª–æ–≥—ñ–∫–æ—é –º–µ—Ç–∞—Ä–æ–∑–º—ñ—Ç–∫–∏ –±–µ–∑ —Å–∞–º–æ—ó —Ä–æ–∑–º—ñ—Ç–∫–∏"""
        if not text:
            return ""
        
        # –û—á–∏—â–∞—î–º–æ –≤—ñ–¥ HTML
        text = self.clean_text(text)
        
        # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ —Ä–æ—Å—ñ–π—Å—å–∫—ñ —Å–ª–æ–≤–∞
        text = self.translate_to_ukrainian(text)
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—á–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        text = self.clean_and_fix_text(text)
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä—É—î–º–æ –æ–ø–∏—Å –∑–∞ –ª–æ–≥—ñ–∫–æ—é –º–µ—Ç–∞—Ä–æ–∑–º—ñ—Ç–∫–∏
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä–µ—á–µ–Ω–Ω—è —Ç–∞ –∞–±–∑–∞—Ü–∏
        sentences = []
        
        # –°–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ –∞–±–∑–∞—Ü–∞—Ö
        paragraphs = text.split('\n')
        
        for paragraph in paragraphs:
            paragraph = paragraph.strip()
            if not paragraph:
                continue
            
            # –Ø–∫—â–æ —Ü–µ —Å–ø–∏—Å–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–º—ñ—Å—Ç–∏—Ç—å –∫—ñ–ª—å–∫–∞ –¥–≤–æ–∫—Ä–∞–ø–æ–∫)
            if paragraph.count(':') >= 2:
                # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –æ–∫—Ä–µ–º—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                parts = re.split(r'[;,]\s*(?=[–ê-–Ø–Ü–á–Ñ“ê])', paragraph)
                for part in parts:
                    part = part.strip()
                    if ':' in part:
                        key, value = part.split(':', 1)
                        key = key.strip()
                        value = value.strip()
                        if key and value:
                            sentences.append(f"{key}: {value}")
                    elif part:
                        sentences.append(part)
            
            # –Ø–∫—â–æ —Ü–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ (–æ–¥–Ω–∞ –¥–≤–æ–∫—Ä–∞–ø–∫–∞)
            elif ':' in paragraph:
                parts = paragraph.split(':', 1)
                if len(parts) == 2:
                    key = parts[0].strip()
                    value = parts[1].strip()
                    sentences.append(f"{key}: {value}")
                else:
                    sentences.append(paragraph)
            
            # –ó–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç
            else:
                # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä–µ—á–µ–Ω–Ω—è
                sent_parts = re.split(r'[.!?]+\s+', paragraph)
                for sent in sent_parts:
                    sent = sent.strip()
                    if sent and len(sent) > 3:
                        # –î–æ–¥–∞—î–º–æ –∫—Ä–∞–ø–∫—É –≤ –∫—ñ–Ω—Ü—ñ, —è–∫—â–æ –Ω–µ–º–∞—î
                        if not sent.endswith(('.', '!', '?', ':')):
                            sent += '.'
                        sentences.append(sent)
        
        # –û–±'—î–¥–Ω—É—î–º–æ —Ä–µ—á–µ–Ω–Ω—è
        result = '. '.join(sentences)
        
        # –§—ñ–Ω–∞–ª—å–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        result = re.sub(r'\.+', '.', result)  # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–¥–≤—ñ–π–Ω—ñ –∫—Ä–∞–ø–∫–∏
        result = re.sub(r'\s*\.\s*\.', '.', result)  # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ ". ."
        result = re.sub(r'\s+', ' ', result)  # –ó–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
        
        # –û–±—Ä—ñ–∑–∞—î–º–æ –∑–∞–π–≤—ñ –∫—Ä–∞–ø–∫–∏ –≤ –∫—ñ–Ω—Ü—ñ
        result = result.rstrip('.').strip()
        
        return result

    def is_ukrainian_text_soft(self, text):
        """–ú'—è–∫—à–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é"""
        if not text:
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
        ukrainian_chars = len(re.findall(r'[–∞–±–≤–≥“ë–¥–µ–∂–∑–∏—ñ—ó–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è]', text.lower()))
        russian_specific = len(re.findall(r'[—ã—ä—ç—ë]', text.lower()))
        
        # –Ø–∫—â–æ —î —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–æ —Ä–æ—Å—ñ–π—Å—å–∫—ñ —Å–∏–º–≤–æ–ª–∏ - –≤—ñ–¥–∫–∏–¥–∞—î–º–æ
        if russian_specific > 0:
            return False
        
        # –Ø–∫—â–æ —î —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å–∏–º–≤–æ–ª–∏ - –ø—Ä–∏–π–º–∞—î–º–æ
        return ukrainian_chars >= 3

    def get_text_language_info(self, text):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–æ–≤—É —Ç–µ–∫—Å—Ç—É –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        if not text:
            return "–ø–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç"
        
        ukrainian_chars = len(re.findall(r'[–∞–±–≤–≥“ë–¥–µ–∂–∑–∏—ñ—ó–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è]', text.lower()))
        russian_specific = len(re.findall(r'[—ã—ä—ç—ë]', text.lower()))
        latin_chars = len(re.findall(r'[a-z]', text.lower()))
        
        return f"—É–∫—Ä:{ukrainian_chars}, —Ä–æ—Å:{russian_specific}, –ª–∞—Ç:{latin_chars}"

    def parse_price(self, price_value):
        """–ü–∞—Ä—Å–∏—Ç—å —Ü—ñ–Ω—É –∑ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤"""
        if pd.isna(price_value):
            return 0.0
        
        if isinstance(price_value, (int, float)):
            return float(price_value)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å–µ –∫—Ä—ñ–º —Ü–∏—Ñ—Ä —Ç–∞ –∫—Ä–∞–ø–∫–∏
        price_str = re.sub(r'[^\d.,]', '', str(price_value))
        price_str = price_str.replace(',', '.')
        
        try:
            return float(price_str)
        except:
            return 0.0 

    def translate_to_ukrainian(self, text):
        """–ü–µ—Ä–µ–∫–ª–∞–¥–∞—î —Ä–æ—Å—ñ–π—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"""
        if not text:
            return ""
        
        # –°–ª–æ–≤–Ω–∏–∫ —Ä–æ—Å—ñ–π—Å—å–∫–æ-—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
        translations = {
            # –û—Å–Ω–æ–≤–Ω—ñ —Å–ª–æ–≤–∞
            '–ì–∏–±—Ä–∏–¥–Ω—ã–π': '–ì—ñ–±—Ä–∏–¥–Ω–∏–π',
            '–≥–∏–±—Ä–∏–¥–Ω—ã–π': '–≥—ñ–±—Ä–∏–¥–Ω–∏–π', 
            '–∏–Ω–≤–µ—Ä—Ç–æ—Ä': '—ñ–Ω–≤–µ—Ä—Ç–æ—Ä',
            '–ò–Ω–≤–µ—Ä—Ç–æ—Ä': '–Ü–Ω–≤–µ—Ä—Ç–æ—Ä',
            '—Ñ–∞–∑–Ω—ã–π': '—Ñ–∞–∑–Ω–∏–π',
            '–∫–í—Ç': '–∫–í—Ç',
            '–°–æ–ª–Ω–µ—á–Ω–∞—è': '–°–æ–Ω—è—á–Ω–∞',
            '—Å–æ–ª–Ω–µ—á–Ω–∞—è': '—Å–æ–Ω—è—á–Ω–∞',
            '–ø–∞–Ω–µ–ª—å': '–ø–∞–Ω–µ–ª—å',
            '–Ω–∞': '–Ω–∞',
            '–í—Ç': '–í—Ç',
            '–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞—è': '–ê–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞',
            '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞—è': '–∞–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞',
            '–±–∞—Ç–∞—Ä–µ—è': '–±–∞—Ç–∞—Ä–µ—è',
            '—Å–∏—Å—Ç–µ–º–∞': '—Å–∏—Å—Ç–µ–º–∞',
            '–∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è': '–∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è',
            '—ç–Ω–µ—Ä–≥–∏–∏': '–µ–Ω–µ—Ä–≥—ñ—ó',
            '–º–æ–¥—É–ª—ñ–≤': '–º–æ–¥—É–ª—ñ–≤',
            '–≤—ã—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞—è': '–≤–∏—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞',
            '–í—ã—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞—è': '–í–∏—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞',
            '–º–æ–¥—É–ª–µ–π': '–º–æ–¥—É–ª—ñ–≤',
            '–º–æ–¥—É–ª–∏': '–º–æ–¥—É–ª—ñ',
            '–ø–æ–¥—Ö–æ–¥–∏—Ç': '–ø—ñ–¥—Ö–æ–¥–∏—Ç—å',
            '–¥–ª—è': '–¥–ª—è',
            '–¥–æ–º–∞': '–¥–æ–º—É',
            '–æ—Ñ–∏—Å–∞': '–æ—Ñ—ñ—Å—É',
            '–∫–æ–º–ø–ª–µ–∫—Ç': '–∫–æ–º–ø–ª–µ–∫—Ç',
            '—Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ': '—Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ',
            '–ø–∏—Ç–∞–Ω–∏—è': '–∂–∏–≤–ª–µ–Ω–Ω—è',
            '—Ö—Ä–∞–Ω–µ–Ω–∏—è': '–∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è',
            '–º–æ—â–Ω–æ—Å—Ç—å': '–ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å',
            '–º–æ—â–Ω–æ—Å—Ç–∏': '–ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ',
            '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ': '–Ω–∞–ø—Ä—É–≥–∞',
            '–µ–º–∫–æ—Å—Ç—å': '—î–º–Ω—ñ—Å—Ç—å',
            '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä': '–∞–∫—É–º—É–ª—è—Ç–æ—Ä',
            '–±–∞—Ç–∞—Ä–µ–∏': '–±–∞—Ç–∞—Ä–µ—ó',
            '–ª–∏—Ç–∏–µ–≤—ã–π': '–ª—ñ—Ç—ñ—î–≤–∏–π',
            '–ª–∏—Ç–∏–µ–≤–∞—è': '–ª—ñ—Ç—ñ—î–≤–∞',
            '–¥–æ–º–∞—à–Ω–µ–π': '–¥–æ–º–∞—à–Ω—å–æ—ó',
            '–¥–æ–º–∞—à–Ω–∏—Ö': '–¥–æ–º–∞—à–Ω—ñ—Ö',
            '—Å–æ–ª–Ω–µ—á–Ω–æ–π': '—Å–æ–Ω—è—á–Ω–æ—ó',
            '—Å–æ–ª–Ω–µ—á–Ω—ã—Ö': '—Å–æ–Ω—è—á–Ω–∏—Ö',
            '—Å–∏—Å—Ç–µ–º—ã': '—Å–∏—Å—Ç–µ–º–∏',
            '—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏': '–µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—ó',
            '—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–π': '–µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ–π',
            '—É—Å—Ç–∞–Ω–æ–≤–∫–∏': '—É—Å—Ç–∞–Ω–æ–≤–∫–∏',
            '—É—Å—Ç–∞–Ω–æ–≤–∫–∞': '—É—Å—Ç–∞–Ω–æ–≤–∫–∞',
            '–º–æ–Ω—Ç–∞–∂': '–º–æ–Ω—Ç–∞–∂',
            '–ú–æ–Ω—Ç–∞–∂': '–ú–æ–Ω—Ç–∞–∂',
            '—É—Å–ª—É–≥–∏': '–ø–æ—Å–ª—É–≥–∏',
            '–£—Å–ª—É–≥–∏': '–ü–æ—Å–ª—É–≥–∏',
            '—Å–µ—Ä–≤–∏—Å': '—Å–µ—Ä–≤—ñ—Å',
            '–°–µ—Ä–≤–∏—Å': '–°–µ—Ä–≤—ñ—Å',
            '–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ': '–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è',
            '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ': '–û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è',
            '–≥–∞—Ä–∞–Ω—Ç–∏—è': '–≥–∞—Ä–∞–Ω—Ç—ñ—è',
            '–ì–∞—Ä–∞–Ω—Ç–∏—è': '–ì–∞—Ä–∞–Ω—Ç—ñ—è',
            '–∫–∞—á–µ—Å—Ç–≤–æ': '—è–∫—ñ—Å—Ç—å',
            '–ö–∞—á–µ—Å—Ç–≤–æ': '–Ø–∫—ñ—Å—Ç—å',
            '–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å': '–Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å',
            '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å': '–ù–∞–¥—ñ–π–Ω—ñ—Å—Ç—å',
            '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': '–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
            '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': '–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
            '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': '–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
            '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
            '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä': '–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä',
            '–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä': '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä',
            '–∑–∞—Ä—è–¥–Ω–æ–µ': '–∑–∞—Ä—è–¥–Ω–∏–π',
            '–∑–∞—Ä—è–¥–Ω—ã–π': '–∑–∞—Ä—è–¥–Ω–∏–π',
            '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ': '–ø—Ä–∏—Å—Ç—Ä—ñ–π',
            '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ': '–ü—Ä–∏—Å—Ç—Ä—ñ–π',
            '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ': '–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è',
            '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ': '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è',
            '–∫–∞–±–µ–ª—å': '–∫–∞–±–µ–ª—å',
            '–ö–∞–±–µ–ª—å': '–ö–∞–±–µ–ª—å',
            '—Ä–∞–∑—ä–µ–º': '—Ä–æ–∑`—î–º',
            '–†–∞–∑—ä–µ–º': '–†–æ–∑`—î–º',
            '–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π': '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π',
            '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è': '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞',
            '–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π': '–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π',
            '–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è': '–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞',
            '–Ω–æ–º–∏–Ω–∞–ª—å–Ω—ã–π': '–Ω–æ–º—ñ–Ω–∞–ª—å–Ω–∏–π',
            '–Ω–æ–º–∏–Ω–∞–ª—å–Ω–∞—è': '–Ω–æ–º—ñ–Ω–∞–ª—å–Ω–∞',
            '—Ä–∞–±–æ—á–∏–π': '—Ä–æ–±–æ—á–∏–π',
            '—Ä–∞–±–æ—á–∞—è': '—Ä–æ–±–æ—á–∞',
            '—Ä–∞–±–æ—á–µ–µ': '—Ä–æ–±–æ—á–µ',
            '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
            '–≤–ª–∞–∂–Ω–æ—Å—Ç—å': '–≤–æ–ª–æ–≥—ñ—Å—Ç—å',
            '–í–ª–∞–∂–Ω–æ—Å—Ç—å': '–í–æ–ª–æ–≥—ñ—Å—Ç—å',
            '–∑–∞—â–∏—Ç–∞': '–∑–∞—Ö–∏—Å—Ç',
            '–ó–∞—â–∏—Ç–∞': '–ó–∞—Ö–∏—Å—Ç',
            '–∫–æ—Ä–ø—É—Å': '–∫–æ—Ä–ø—É—Å',
            '–ö–æ—Ä–ø—É—Å': '–ö–æ—Ä–ø—É—Å',
            '—Ä–∞–∑–º–µ—Ä': '—Ä–æ–∑–º—ñ—Ä',
            '–†–∞–∑–º–µ—Ä': '–†–æ–∑–º—ñ—Ä',
            '—Ä–∞–∑–º–µ—Ä—ã': '—Ä–æ–∑–º—ñ—Ä–∏',
            '–†–∞–∑–º–µ—Ä—ã': '–†–æ–∑–º—ñ—Ä–∏',
            '–≤–µ—Å': '–≤–∞–≥–∞',
            '–í–µ—Å': '–í–∞–≥–∞',
            '—Ü–≤–µ—Ç': '–∫–æ–ª—ñ—Ä',
            '–¶–≤–µ—Ç': '–ö–æ–ª—ñ—Ä',
            '—á–µ—Ä–Ω—ã–π': '—á–æ—Ä–Ω–∏–π',
            '—á–µ—Ä–Ω–∞—è': '—á–æ—Ä–Ω–∞',
            '–±–µ–ª—ã–π': '–±—ñ–ª–∏–π',
            '–±–µ–ª–∞—è': '–±—ñ–ª–∞',
            '—Å–µ—Ä—ã–π': '—Å—ñ—Ä–∏–π',
            '—Å–µ—Ä–∞—è': '—Å—ñ—Ä–∞',
            '–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è': '–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—è',
            '–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è': '–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—è',
            '–∫–æ–º–ø–ª–µ–∫—Ç–µ': '–∫–æ–º–ø–ª–µ–∫—Ç—ñ',
            '–≤–∫–ª—é—á–∞–µ—Ç': '–≤–∫–ª—é—á–∞—î',
            '–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è': '–ø–æ—Å—Ç–∞—á–∞—î—Ç—å—Å—è',
            '–∞—Ä—Ç–∏–∫—É–ª': '–∞—Ä—Ç–∏–∫—É–ª',
            '–ê—Ä—Ç–∏–∫—É–ª': '–ê—Ä—Ç–∏–∫—É–ª',
            '–º–æ–¥–µ–ª—å': '–º–æ–¥–µ–ª—å',
            '–ú–æ–¥–µ–ª—å': '–ú–æ–¥–µ–ª—å',
            '—Å–µ—Ä–∏—è': '—Å–µ—Ä—ñ—è',
            '–°–µ—Ä–∏—è': '–°–µ—Ä—ñ—è',
            '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å': '–≤–∏—Ä–æ–±–Ω–∏–∫',
            '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å': '–í–∏—Ä–æ–±–Ω–∏–∫',
            '—Å—Ç—Ä–∞–Ω–∞': '–∫—Ä–∞—ó–Ω–∞',
            '–°—Ç—Ä–∞–Ω–∞': '–ö—Ä–∞—ó–Ω–∞',
            '–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è': '–ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è',
            '–∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è': '–≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è',
            '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ': '—Ç–µ—Ö–Ω—ñ—á–Ω—ñ',
            '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ': '–¢–µ—Ö–Ω—ñ—á–Ω—ñ',
            '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏': '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏',
            '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏': '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏',
            '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã': '–ø–∞—Ä–∞–º–µ—Ç—Ä–∏',
            '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã': '–ü–∞—Ä–∞–º–µ—Ç—Ä–∏',
            '—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è': '—Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è',
            '–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è': '–°–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è',
            '–æ–ø–∏—Å–∞–Ω–∏–µ': '–æ–ø–∏—Å',
            '–û–ø–∏—Å–∞–Ω–∏–µ': '–û–ø–∏—Å',
            '–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ': '–∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è',
            '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ': '–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è',
            '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ': '–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è',
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ': '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è',
            '—ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è': '–µ–∫—Å–ø–ª—É–∞—Ç–∞—Ü—ñ—è',
            '–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è': '–ï–∫—Å–ø–ª—É–∞—Ç–∞—Ü—ñ—è',
            '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è': '—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è',
            '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è': '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è',
            '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ': '–∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ',
            '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ': '–ö–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ',
            '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è': '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è',
            '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è': '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è',
            '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç': '—Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç',
            '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç': '–°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç',
            '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è': '—Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è',
            '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è': '–°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è',
            '—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ': '–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å',
            '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ': '–í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å',
            '—Å—Ç–∞–Ω–¥–∞—Ä—Ç': '—Å—Ç–∞–Ω–¥–∞—Ä—Ç',
            '–°—Ç–∞–Ω–¥–∞—Ä—Ç': '–°—Ç–∞–Ω–¥–∞—Ä—Ç',
            '—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã': '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏',
            '–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏',
            
            # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ —Å–ª–æ–≤–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∏
            'SUN-6K-SG03LP1-EU': 'SUN-6K-SG03LP1-EU',
            'SUN-6K-SG04LP1-EU-SM2': 'SUN-6K-SG04LP1-EU-SM2',
            'SUN-8K-SG05LP1-EU-SM2': 'SUN-8K-SG05LP1-EU-SM2',
            'SUN-15K-SG05LP3-EU-SM2': 'SUN-15K-SG05LP3-EU-SM2',
        }
        
        result = str(text)
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
        for rus, ukr in translations.items():
            result = result.replace(rus, ukr)
        
        # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–æ—Å—ñ–π—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ
        russian_to_ukrainian = {
            '—ã': '–∏',
            '—ç': '–µ', 
            '—ë': '–µ',
            '—ä': '',
            '–´': '–ò',
            '–≠': '–ï',
            '–Å': '–ï',
            '–™': '',
        }
        
        for rus, ukr in russian_to_ukrainian.items():
            result = result.replace(rus, ukr)
        
        return result.strip()

    def clean_and_fix_text(self, text):
        """–û—á–∏—â–∞—î —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª—è—î —Ç–µ–∫—Å—Ç –≤—ñ–¥ –ø–æ–º–∏–ª–æ–∫"""
        if not text:
            return ""
        
        # –°–ø–æ—á–∞—Ç–∫—É –æ—á–∏—â–∞—î–º–æ HTML
        text = self.clean_text(text)
        
        # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ —Ä–æ—Å—ñ–π—Å—å–∫—ñ —Å–ª–æ–≤–∞
        text = self.translate_to_ukrainian(text)
        
        # –°–ª–æ–≤–Ω–∏–∫ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
        corrections = {
            # –û–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
            '–∫–í—Ç —Ä—ñ–∫': '–∫–í—Ç¬∑–≥–æ–¥',
            '–∫–í—Ç —á–∞—Å': '–∫–í—Ç¬∑–≥–æ–¥', 
            '–∫–í—Ç–≥–æ–¥': '–∫–í—Ç¬∑–≥–æ–¥',
            '–∫–≤—Ç–≥–æ–¥': '–∫–í—Ç¬∑–≥–æ–¥',
            'kWh': '–∫–í—Ç¬∑–≥–æ–¥',
            'kWt': '–∫–í—Ç',
            'Wt': '–í—Ç',
            '–ê –≥–æ–¥': '–ê¬∑–≥–æ–¥',
            '–∞–≥–æ–¥': '–ê¬∑–≥–æ–¥',
            '–ê–≥–æ–¥': '–ê¬∑–≥–æ–¥',
            'Ah': '–ê¬∑–≥–æ–¥',
            '–ê–º–ø–µ—Ä —á–∞—Å': '–ê¬∑–≥–æ–¥',
            '–∞–º–ø–µ—Ä-—á–∞—Å': '–ê¬∑–≥–æ–¥',
            '–∞–º–ø–µ—Ä —á–∞—Å': '–ê¬∑–≥–æ–¥',
            
            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥—É–ª—ñ–≤ —Ç–∞ —Å—Ç—Ä—É–º—É
            '–º–æ–¥—É–ª—ñ–≤ 100–ê': '–º–æ–¥—É–ª—ñ–≤ 100 –ê',
            '–º–æ–¥—É–ª—ñ–≤ 100A': '–º–æ–¥—É–ª—ñ–≤ 100 –ê',
            '–º–æ–¥—É–ª—ñ–≤ 200–ê': '–º–æ–¥—É–ª—ñ–≤ 200 –ê',
            '–º–æ–¥—É–ª—ñ–≤ 200A': '–º–æ–¥—É–ª—ñ–≤ 200 –ê',
            '100–ê': '100 –ê',
            '200–ê': '200 –ê',
            '100A': '100 –ê',
            '200A': '200 –ê',
            
            # –ù–∞–ø—Ä—É–≥–∞
            '220V –∏ 110V': '220 –í / 110 –í',
            '220V': '220 –í',
            '110V': '110 –í',
            '48V': '48 –í',
            '24V': '24 –í',
            '12V': '12 –í',
            '–í 100–ê': '–í 100 –ê',
            '–í 200–ê': '–í 200 –ê',
            '51,2B': '51,2 –í',
            '614V': '614 –í',
            '409.6V': '409,6 –í',
            '307.2V': '307,2 –í',
            '204.8V': '204,8 –í',
            '25,6 –í': '25,6 –í',
            
            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–∫—É–º—É–ª—è—Ç–æ—Ä—ñ–≤
            '614V 100Ah': '614 –í 100 –ê¬∑–≥–æ–¥',
            '409.6V 100Ah': '409,6 –í 100 –ê¬∑–≥–æ–¥',
            '307.2V 100Ah': '307,2 –í 100 –ê¬∑–≥–æ–¥',
            '204.8 V 100 Ah': '204,8 –í 100 –ê¬∑–≥–æ–¥',
            '51,2B 200A': '51,2 –í 200 –ê',
            '48V 100A': '48 –í 100 –ê',
            '48V 200A': '48 –í 200 –ê',
            '24–í , 100–ê': '24 –í, 100 –ê',
            
            # –û–ø–∏—Å–∏ —Ç–∞ —Ç–µ—Ä–º—ñ–Ω–∏
            'Black Frame': '–∑ —á–æ—Ä–Ω–æ—é —Ä–∞–º–∫–æ—é',
            'Explorer': 'Explorer',
            'Hi-MO 6': 'Hi-MO 6',
            'LiFePO4': 'LiFePO4',
            'Lithium Battery-G2': 'Lithium Battery-G2',
            '—Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è': '—Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è',
            'MPPT': 'MPPT',
            'PRO': 'PRO',
            'VPM II': 'VPM II',
            'EXP': 'EXP',
            'BOS-GM5.1': 'BOS-GM5.1',
            'RW-F10.6': 'RW-F10.6',
            'SE-G5.1Pro-B': 'SE-G5.1Pro-B',
            'LVTS-512200': 'LVTS-512200',
            'LVTS-512300': 'LVTS-512300',
            'LVTS-512228': 'LVTS-512228',
            'LVTS-48100': 'LVTS-48100',
            'LVTS-256100': 'LVTS-256100',
            'LP16-48100': 'LP16-48100',
            'LP16-48200': 'LP16-48200',
            'PV19-6048': 'PV19-6048',
            'PV18-3224': 'PV18-3224',
            'PV18-5248': 'PV18-5248',
            
            # –ú–æ–¥–µ–ª—ñ —Å–æ–Ω—è—á–Ω–∏—Ö –ø–∞–Ω–µ–ª–µ–π
            'LR8-66HGD-615M': 'LR8-66HGD-615M',
            'LR7-72HTH-610M': 'LR7-72HTH-610M',
            'LR5-72HTH-590M': 'LR5-72HTH-590M',
            'LR5-66HTH-530M': 'LR5-66HTH-530M',
            'LR5-54HTH-435M': 'LR5-54HTH-435M',
            'LR5-54HTB-420M': 'LR5-54HTB-420M',
            'RSM132-8-700BHDG': 'RSM132-8-700BHDG',
            
            # –ú–æ–¥–µ–ª—ñ —ñ–Ω–≤–µ—Ä—Ç–æ—Ä—ñ–≤ Deye
            'SUN-6K-SG03LP1-EU': 'SUN-6K-SG03LP1-EU',
            'SUN-6K-SG04LP1-EU-SM2': 'SUN-6K-SG04LP1-EU-SM2',
            'SUN-8K-SG01LP1-EU': 'SUN-8K-SG01LP1-EU',
            'SUN-8K-SG05LP1-EU-SM2': 'SUN-8K-SG05LP1-EU-SM2',
            'SUN-10K-SG02LP1-EU-AM3': 'SUN-10K-SG02LP1-EU-AM3',
            'SUN-12K-SG02LP1-EU-AM3': 'SUN-12K-SG02LP1-EU-AM3',
            'SUN-12K-SG04LP3-EU': 'SUN-12K-SG04LP3-EU',
            'SUN-15K-SG05LP3-EU-SM2': 'SUN-15K-SG05LP3-EU-SM2',
            'SUN-18K-SG05LP3-EU-SM2': 'SUN-18K-SG05LP3-EU-SM2',
            'SUN-20K-SG05LP3-EU-SM2': 'SUN-20K-SG05LP3-EU-SM2',
            'SUN-30K-SG01HP3-EU-BM3': 'SUN-30K-SG01HP3-EU-BM3',
            'SUN-50K-SG01HP3-EU-BM': 'SUN-50K-SG01HP3-EU-BM',
            'SUN-80K-SG02HP3-EU-EM6': 'SUN-80K-SG02HP3-EU-EM6',
            
            # –ú–æ–¥–µ–ª—ñ –∞–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∏—Ö —Å–∏—Å—Ç–µ–º
            'BOS-G60-61,44kW': 'BOS-G60-61,44kW',
            'BOS-G40-40,96kW': 'BOS-G40-40,96kW',
            'BOS-G30-30,72kW': 'BOS-G30-30,72kW',
            'BOS-G20-20,48kW': 'BOS-G20-20,48kW',
            
            # –û—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏
            '–µ–ª–µ–∫—Ä–æ—Å—Ç–∞–Ω—Ü—ñ–π': '–µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ–π',
            '–µ–ª–µ–∫—Ç—Ä–æ—Å–∏—Å—Ç–µ–º': '–µ–ª–µ–∫—Ç—Ä–æ—Å–∏—Å—Ç–µ–º',
            '—Å–æ–Ω—Ü–Ω–æ—ó': '—Å–æ–Ω—è—á–Ω–æ—ó',
            '–µ—Ñ–µ–∫—Ç–∏–≤—ñ–Ω—ñ—Å—Ç—å': '–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
            '—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—ñ—Å—Ç—å': '—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å',
            '–ø—Ä–æ–¥—É–∫—Ç—ñ–≤–Ω—ñ—Å—Ç—å': '–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
            '–º–∞–∫—Å–∏–º—ñ–ª—å–Ω–∏–π': '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π',
            '–º—ñ–Ω—ñ–º—ñ–ª—å–Ω–∏–π': '–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π',
            '–Ω–æ–º—ñ–Ω—ñ–ª—å–Ω–∏–π': '–Ω–æ–º—ñ–Ω–∞–ª—å–Ω–∏–π',
            '–ø–æ—Ç—É–∂–Ω—ñ—ñ—Å—Ç—å': '–ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å',
            '—î–º–Ω—ñ—ñ—Å—Ç—å': '—î–º–Ω—ñ—Å—Ç—å',
            '–Ω–∞–¥—ñ–π–Ω—ñ—ñ—Å—Ç—å': '–Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å',
            '—è–∫—ñ—ñ—Å—Ç—å': '—è–∫—ñ—Å—Ç—å',
            
            # –ö–∏—Ä–∏–ª–∏—Ü—è
            '–∏': '—ñ',  # —Ä–æ—Å—ñ–π—Å—å–∫–µ –∏ -> —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ —ñ (–∞–ª–µ —Ç—ñ–ª—å–∫–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Å–ª—ñ–≤)
            
            # –ü—Ä–æ–±—ñ–ª–∏ –Ω–∞–≤–∫–æ–ª–æ –∑–Ω–∞–∫—ñ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó
            ' ,': ',',
            ' .': '.',
            ' !': '!',
            ' ?': '?',
            ' :': ':',
            ' ;': ';',
            '( ': '(',
            ' )': ')',
            '[ ': '[',
            ' ]': ']',
            '{ ': '{',
            ' }': '}',
        }
        
        for wrong, correct in corrections.items():
            text = text.replace(wrong, correct)
        
        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ä–æ—Å—ñ–π—Å—å–∫–æ–≥–æ "–∏" –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Å–ª—ñ–≤
        # –ê–ª–µ –∑–∞–ª–∏—à–∞—î–º–æ "–∏" –≤ –∞–±—Ä–µ–≤—ñ–∞—Ç—É—Ä–∞—Ö —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö –Ω–∞–∑–≤–∞—Ö
        words = text.split()
        fixed_words = []
        
        for word in words:
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ —Å–ª–æ–≤–∞, –∞–±—Ä–µ–≤—ñ–∞—Ç—É—Ä–∏ —Ç–∞ –º–æ–¥–µ–ª—ñ
            if (re.match(r'^[A-Z0-9\-_]+$', word) or 
                re.match(r'^[A-Z][a-z]+-\w+', word) or
                len(word) <= 3):
                fixed_words.append(word)
            else:
                # –ó–∞–º—ñ–Ω—é—î–º–æ —Ä–æ—Å—ñ–π—Å—å–∫–µ "–∏" –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ "—ñ" —Ç—ñ–ª—å–∫–∏ –≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Å–ª–æ–≤–∞—Ö
                if re.search(r'[–∞–±–≤–≥“ë–¥–µ–∂–∑–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è]–∏[–∞–±–≤–≥“ë–¥–µ–∂–∑–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è]', word.lower()):
                    word = re.sub(r'([–∞–±–≤–≥“ë–¥–µ–∂–∑–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è])–∏([–∞–±–≤–≥“ë–¥–µ–∂–∑–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è])', r'\1—ñ\2', word)
                fixed_words.append(word)
        
        text = ' '.join(fixed_words)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –æ—á–∏—â–∞—î–º–æ
        text = re.sub(r'\s+', ' ', text).strip()
        
        return text 