import os
import shutil
from django.core.management.base import BaseCommand
from django.core.files.base import ContentFile
from django.db import transaction, models
from mainapp.models import Product
from django.conf import settings

class Command(BaseCommand):
    help = '–ü—ñ–¥–∫–ª—é—á–∞—î —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –¥–æ —Ç–æ–≤–∞—Ä—ñ–≤ —â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—è –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        
        if dry_run:
            self.stdout.write(self.style.WARNING("–†–ï–ñ–ò–ú –ü–û–ü–ï–†–ï–î–ù–¨–û–ì–û –ü–ï–†–ï–ì–õ–Ø–î–£"))
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–æ–≤–∞—Ä–∏ –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π
        products_without_images = Product.objects.filter(
            models.Q(image='') | models.Q(image__isnull=True)
        )
        
        total_without_images = products_without_images.count()
        self.stdout.write(f"üì∏ –ó–Ω–∞–π–¥–µ–Ω–æ {total_without_images} —Ç–æ–≤–∞—Ä—ñ–≤ –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π")
        
        if total_without_images == 0:
            self.stdout.write(self.style.SUCCESS("üéâ –í—Å—ñ —Ç–æ–≤–∞—Ä–∏ –≤–∂–µ –º–∞—é—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó!"))
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø—ñ–Ω–≥ —Ç–æ–≤–∞—Ä—ñ–≤ –±–µ–∑ —Ñ–æ—Ç–æ –¥–æ —Å—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑ —Ñ–æ—Ç–æ
        image_mapping = self.create_image_mapping()
        
        updated_count = 0
        media_path = os.path.join(settings.MEDIA_ROOT, 'products')
        
        for product in products_without_images:
            try:
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—ñ–¥—Ö–æ–¥—è—â—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é
                source_image = self.find_suitable_image(product, image_mapping, media_path)
                
                if source_image:
                    if dry_run:
                        self.stdout.write(f"–ü–Ü–î–ö–õ–Æ–ß–ò–¢–ò: {product.name} ‚Üí {source_image}")
                        updated_count += 1
                    else:
                        success = self.copy_image_to_product(product, source_image, media_path)
                        if success:
                            updated_count += 1
                            self.stdout.write(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ: {product.name}")
                        else:
                            self.stdout.write(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {product.name}")
                else:
                    self.stdout.write(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è: {product.name}")
                    
            except Exception as e:
                self.stdout.write(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ {product.name}: {str(e)}")
                continue
        
        # –ü—ñ–¥—Å—É–º–∫–∏
        if dry_run:
            self.stdout.write(
                self.style.WARNING(
                    f"\n–ü–û–ü–ï–†–ï–î–ù–Ü–ô –ü–ï–†–ï–ì–õ–Ø–î –ó–ê–í–ï–†–®–ï–ù–û\n"
                    f"–¢–æ–≤–∞—Ä—ñ–≤ –±–µ–∑ —Ñ–æ—Ç–æ: {total_without_images}\n"
                    f"–ë—É–¥–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: {updated_count}\n"
                    f"–î–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–µ–∑ --dry-run"
                )
            )
        else:
            self.stdout.write(
                self.style.SUCCESS(
                    f"\n–ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û\n"
                    f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ —Ñ–æ—Ç–æ: {updated_count}\n"
                    f"–§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞..."
                )
            )
            
            # –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
            remaining_without_images = Product.objects.filter(
                models.Q(image='') | models.Q(image__isnull=True)
            ).count()
            
            total_with_images = Product.objects.exclude(image='').exclude(image__isnull=True).count()
            total_products = Product.objects.count()
            
            self.stdout.write(
                self.style.SUCCESS(
                    f"\nüéØ –§–Ü–ù–ê–õ–¨–ù–ò–ô –°–¢–ê–ù:\n"
                    f"üì¶ –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: {total_products}\n"
                    f"‚úÖ –ó —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è–º–∏: {total_with_images}\n"
                    f"‚ùå –ë–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π: {remaining_without_images}\n"
                    f"üìä –í—ñ–¥—Å–æ—Ç–æ–∫ –∑ —Ñ–æ—Ç–æ: {(total_with_images/total_products*100):.1f}%"
                )
            )

    def create_image_mapping(self):
        """–°—Ç–≤–æ—Ä—é—î –º–∞–ø—ñ–Ω–≥ —Ç–∏–ø—ñ–≤ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–æ –∑—Ä–∞–∑–∫–æ–≤–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π"""
        return {
            '—Å–æ–Ω—è—á–Ω–∞ –ø–∞–Ω–µ–ª—å': ['product_530.0.jpg', 'product_590.0.jpg', 'product_610.0.jpg', 'product_615.0.jpg'],
            '–≥—ñ–±—Ä–∏–¥–Ω–∏–π —ñ–Ω–≤–µ—Ä—Ç–æ—Ä deye': ['product_101_HZIASGp.0.jpg', 'product_102_rgR0u2J.0.jpg', 'product_103_Uaxmg23.0.jpg'],
            '–≥—ñ–±—Ä–∏–¥–Ω–∏–π —ñ–Ω–≤–µ—Ä—Ç–æ—Ä must': ['product_420_fW81dDV.0.jpg', 'product_5248_buNedXq.0.jpg'],
            '–∞–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞ –±–∞—Ç–∞—Ä–µ—è deye': ['product_110_LN73RGk.0.jpg', 'product_111_hqe83xf.0.jpg', 'product_218_V3JHPe3.0.jpg'],
            '–∞–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞ –±–∞—Ç–∞—Ä–µ—è must': ['product_213_WzIfulu.0.jpg', 'product_211_RTCd0LP.0.jpg'],
            '—Å–∏—Å—Ç–µ–º–∞ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è': ['product_112_xfvnNUv.0.jpg', 'product_113_A075UGk.0.jpg', 'product_114_S7HkND3.0.jpg', 'product_115_jjGY1D5.0.jpg'],
            '–∫–æ–º–ø–ª–µ–∫—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ': ['product_1011_0ZdgoOI.0.jpg', 'product_1012_0WuHpj1.0.jpg', 'product_1013_ea4g80I.0.jpg'],
            '–º–æ–Ω—Ç–∞–∂': ['product_nan_jmLRtKn.jpg']
        }

    def find_suitable_image(self, product, image_mapping, media_path):
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –ø—ñ–¥—Ö–æ–¥—è—â—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –¥–ª—è —Ç–æ–≤–∞—Ä—É"""
        product_name_lower = product.name.lower()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ —Ç–∏–ø–∞—Ö —Ç–æ–≤–∞—Ä—ñ–≤
        for product_type, image_files in image_mapping.items():
            if product_type in product_name_lower:
                # –®—É–∫–∞—î–º–æ –ø–µ—Ä—à—É –¥–æ—Å—Ç—É–ø–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é
                for image_file in image_files:
                    image_path = os.path.join(media_path, image_file)
                    if os.path.exists(image_path):
                        return image_file
        
        # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—É, –ø—Ä–æ–±—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –ª–æ–≥—ñ–∫—É
        if '—Å–æ–Ω—è—á–Ω' in product_name_lower or '–ø–∞–Ω–µ–ª—å' in product_name_lower:
            default_images = ['product_530.0.jpg', 'product_590.0.jpg']
        elif '—ñ–Ω–≤–µ—Ä—Ç–æ—Ä' in product_name_lower and 'deye' in product_name_lower:
            default_images = ['product_101_HZIASGp.0.jpg', 'product_102_rgR0u2J.0.jpg']
        elif '—ñ–Ω–≤–µ—Ä—Ç–æ—Ä' in product_name_lower and 'must' in product_name_lower:
            default_images = ['product_420_fW81dDV.0.jpg']
        elif '–±–∞—Ç–∞—Ä–µ—è' in product_name_lower or '–∞–∫—É–º—É–ª—è—Ç' in product_name_lower:
            default_images = ['product_110_LN73RGk.0.jpg', 'product_218_V3JHPe3.0.jpg']
        elif '—Å–∏—Å—Ç–µ–º–∞' in product_name_lower:
            default_images = ['product_112_xfvnNUv.0.jpg', 'product_113_A075UGk.0.jpg']
        elif '–∫–æ–º–ø–ª–µ–∫—Ç' in product_name_lower:
            default_images = ['product_1011_0ZdgoOI.0.jpg']
        else:
            # –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è
            default_images = ['product_101_HZIASGp.0.jpg', 'product_530.0.jpg']
        
        for image_file in default_images:
            image_path = os.path.join(media_path, image_file)
            if os.path.exists(image_path):
                return image_file
        
        return None

    def copy_image_to_product(self, product, source_image_file, media_path):
        """–ö–æ–ø—ñ—é—î —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é —Ç–∞ –ø—Ä–∏–∫—Ä—ñ–ø–ª—é—î –¥–æ —Ç–æ–≤–∞—Ä—É"""
        try:
            source_path = os.path.join(media_path, source_image_file)
            
            if not os.path.exists(source_path):
                return False
            
            # –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª
            with open(source_path, 'rb') as f:
                image_content = f.read()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ —ñ–º'—è —Ñ–∞–π–ª—É
            file_extension = os.path.splitext(source_image_file)[1]
            new_filename = f"product_{product.id}_auto{file_extension}"
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–æ —Ç–æ–≤–∞—Ä—É
            with transaction.atomic():
                product.image.save(
                    new_filename,
                    ContentFile(image_content),
                    save=True
                )
            
            return True
            
        except Exception as e:
            self.stdout.write(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è {source_image_file}: {str(e)}")
            return False 