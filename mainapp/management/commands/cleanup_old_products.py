"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑ –≤–∏—Å–æ–∫–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
"""
import os
import re
import glob
from django.core.management.base import BaseCommand
from django.conf import settings

class Command(BaseCommand):
    help = '–í–∏–¥–∞–ª—è—î –≤—Å—ñ —Å—Ç–∞—Ä—ñ —Ñ–∞–π–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑ –Ω–æ–º–µ—Ä–∞–º–∏ –ø–æ–Ω–∞–¥ 100'

    def add_arguments(self, parser):
        parser.add_argument(
            '--min-id',
            type=int,
            default=100,
            help='–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π ID –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 100)'
        )
        
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç–∏ —è–∫—ñ —Ñ–∞–π–ª–∏ –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è'
        )

    def handle(self, *args, **options):
        self.stdout.write('üßπ –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤...')
        
        min_id = options['min_id']
        dry_run = options['dry_run']
        
        # –ü–∞–ø–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        media_paths = [
            os.path.join(settings.BASE_DIR, 'media', 'products'),
            os.path.join(settings.BASE_DIR, 'staticfiles', 'media', 'products'),
            os.path.join(settings.BASE_DIR, 'static', 'media', 'products') if hasattr(settings, 'STATIC_ROOT') else None
        ]
        
        # –î–æ–¥–∞—î–º–æ gallery –ø–∞–ø–∫–∏
        gallery_paths = [
            os.path.join(settings.BASE_DIR, 'media', 'products', 'gallery'),
            os.path.join(settings.BASE_DIR, 'staticfiles', 'media', 'products', 'gallery'),
            os.path.join(settings.BASE_DIR, 'static', 'media', 'products', 'gallery') if hasattr(settings, 'STATIC_ROOT') else None
        ]
        
        all_paths = [p for p in media_paths + gallery_paths if p and os.path.exists(p)]
        
        total_deleted = 0
        total_size = 0
        
        for media_path in all_paths:
            self.stdout.write(f'üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é: {media_path}')
            
            # –ü–∞—Ç–µ—Ä–Ω –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑ –≤–∏—Å–æ–∫–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
            pattern = os.path.join(media_path, 'product_*.jpg')
            files = glob.glob(pattern)
            
            for file_path in files:
                filename = os.path.basename(file_path)
                
                # –í–∏—Ç—è–≥—É—î–º–æ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç—É –∑ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É
                match = re.match(r'product_(\d+)_', filename)
                if match:
                    product_id = int(match.group(1))
                    
                    if product_id >= min_id:
                        file_size = os.path.getsize(file_path)
                        total_size += file_size
                        
                        if dry_run:
                            self.stdout.write(f'  üóëÔ∏è [DRY-RUN] {filename} (ID: {product_id}, {file_size} bytes)')
                        else:
                            try:
                                os.remove(file_path)
                                self.stdout.write(f'  ‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ: {filename} (ID: {product_id}, {file_size} bytes)')
                                total_deleted += 1
                            except Exception as e:
                                self.stdout.write(f'  ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è {filename}: {e}')
        
        if dry_run:
            self.stdout.write(
                f'üìä [DRY-RUN] –ë—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {len([f for f in files if re.match(r"product_(\d+)_", os.path.basename(f)) and int(re.match(r"product_(\d+)_", os.path.basename(f)).group(1)) >= min_id])}'
            )
        else:
            self.stdout.write(
                self.style.SUCCESS(
                    f'üéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!\n'
                    f'–í–∏–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {total_deleted}\n'
                    f'–ó–≤—ñ–ª—å–Ω–µ–Ω–æ –º—ñ—Å—Ü—è: {total_size / (1024*1024):.2f} MB'
                )
            )
        
        self.stdout.write('‚úÖ –°—Ç–∞—Ä—ñ —Ñ–∞–π–ª–∏ –æ—á–∏—â–µ–Ω–æ!') 