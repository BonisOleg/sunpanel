"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ—ó –ø–æ–≤–Ω–æ—ó –æ—á–∏—Å—Ç–∫–∏ –ë–î –≤—ñ–¥ —Å—Ç–∞—Ä–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
"""
from django.core.management.base import BaseCommand
from django.db import transaction
from mainapp.models import Product, ProductImage, Category, Brand

class Command(BaseCommand):
    help = '–ü–†–ò–ú–£–°–û–í–û –æ—á–∏—â–∞—î –ë–î –≤—ñ–¥ –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î —ó—Ö –∑–∞–Ω–æ–≤–æ'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–∏–º—É—Å–æ–≤–æ—ó –æ—á–∏—Å—Ç–∫–∏'
        )

    def handle(self, *args, **options):
        if not options['force']:
            self.stdout.write(
                self.style.ERROR(
                    '‚ö†Ô∏è –£–í–ê–ì–ê! –¶—è –∫–æ–º–∞–Ω–¥–∞ –≤–∏–¥–∞–ª–∏—Ç—å –í–°–Ü —Ç–æ–≤–∞—Ä–∏!\n'
                    '–î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø—É—Å—Ç—ñ—Ç—å –∑ —Ñ–ª–∞–≥–æ–º --force'
                )
            )
            return
        
        self.stdout.write('üö® –ü–†–ò–ú–£–°–û–í–ê –û–ß–ò–°–¢–ö–ê –ë–î...')
        
        try:
            with transaction.atomic():
                # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
                products_count = Product.objects.count()
                images_count = ProductImage.objects.count()
                max_product = Product.objects.order_by('-id').first()
                
                self.stdout.write(f'üìä –ü–û–¢–û–ß–ù–ò–ô –°–¢–ê–ù –ë–î:')
                self.stdout.write(f'  –¢–æ–≤–∞—Ä—ñ–≤: {products_count}')
                self.stdout.write(f'  –ó–æ–±—Ä–∞–∂–µ–Ω—å: {images_count}')
                self.stdout.write(f'  –ú–∞–∫—Å ID: {max_product.id if max_product else "–ù–µ–º–∞—î"}')
                
                if products_count == 0:
                    self.stdout.write('‚úÖ –ë–î –≤–∂–µ –ø–æ—Ä–æ–∂–Ω—è!')
                    return
                
                # –ü–û–í–ù–ï –í–ò–î–ê–õ–ï–ù–ù–Ø
                self.stdout.write('üóëÔ∏è –í–∏–¥–∞–ª—è—é –í–°–Ü —Ç–æ–≤–∞—Ä–∏...')
                
                # –í–∏–¥–∞–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤
                deleted_images = ProductImage.objects.all().delete()
                self.stdout.write(f'  ‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {deleted_images[0]}')
                
                # –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–≤–∞—Ä–∏  
                deleted_products = Product.objects.all().delete()
                self.stdout.write(f'  ‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {deleted_products[0]}')
                
                # –°–∫–∏–¥–∞—î–º–æ AUTO_INCREMENT —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
                try:
                    from django.db import connection
                    with connection.cursor() as cursor:
                        try:
                            # PostgreSQL
                            cursor.execute(f"ALTER SEQUENCE {Product._meta.db_table}_id_seq RESTART WITH 1")
                            cursor.execute(f"ALTER SEQUENCE {ProductImage._meta.db_table}_id_seq RESTART WITH 1")
                            self.stdout.write('  ‚úÖ PostgreSQL AUTO_INCREMENT —Å–∫–∏–Ω—É—Ç–æ')
                        except Exception:
                            try:
                                # MySQL/SQLite
                                cursor.execute(f"DELETE FROM sqlite_sequence WHERE name='{Product._meta.db_table}'")
                                cursor.execute(f"DELETE FROM sqlite_sequence WHERE name='{ProductImage._meta.db_table}'")
                                self.stdout.write('  ‚úÖ SQLite AUTO_INCREMENT —Å–∫–∏–Ω—É—Ç–æ')
                            except Exception as e:
                                self.stdout.write(f'  ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∏–Ω—É—Ç–∏ AUTO_INCREMENT: {e}')
                except Exception as e:
                    self.stdout.write(f'  ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è AUTO_INCREMENT: {e}')
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                final_count = Product.objects.count()
                final_images = ProductImage.objects.count()
                
                self.stdout.write(
                    self.style.SUCCESS(
                        f'üéâ –ü–†–ò–ú–£–°–û–í–ê –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!\n'
                        f'–¢–æ–≤–∞—Ä—ñ–≤ –∑–∞–ª–∏—à–∏–ª–æ—Å—è: {final_count}\n'
                        f'–ó–æ–±—Ä–∞–∂–µ–Ω—å –∑–∞–ª–∏—à–∏–ª–æ—Å—è: {final_images}\n'
                        f'–ë–î –≥–æ—Ç–æ–≤–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É!'
                    )
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –ü–û–ú–ò–õ–ö–ê –û–ß–ò–°–¢–ö–ò: {e}')
            )
            raise
        
        self.stdout.write('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä –∑–∞–ø—É—Å—Ç—ñ—Ç—å —ñ–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤.') 