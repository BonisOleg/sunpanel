"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–≤–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –ø—Ä–æ–µ–∫—Ç—É –¥–æ –¥–µ–ø–ª–æ—é –Ω–∞ Render
–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤—Å—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Ç–∞ –Ω–∞–¥–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
"""
import os
import glob
from django.core.management.base import BaseCommand
from django.conf import settings
from django.core.management import call_command
from django.db import connection
from mainapp.models import Product, ProductImage, Category, Brand
from django.core.exceptions import ImproperlyConfigured

class Command(BaseCommand):
    help = '–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç—É –¥–æ –¥–µ–ø–ª–æ—é –Ω–∞ Render'

    def add_arguments(self, parser):
        parser.add_argument(
            '--detailed',
            action='store_true',
            help='–î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑ –ø–æ–≤–Ω–∏–º –∑–≤—ñ—Ç–æ–º'
        )
        parser.add_argument(
            '--fix-issues',
            action='store_true',
            help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏'
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üîç –ü–ï–†–ï–í–Ü–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–Ü –î–û RENDER DEPLOY'))
        self.stdout.write('='*70)
        
        detailed = options['detailed']
        fix_issues = options['fix_issues']
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        checks = {
            'settings': False,
            'database': False,
            'media_files': False,
            'static_files': False,
            'models': False,
            'templates': False,
            'dependencies': False,
            'content': False
        }
        
        issues = []
        
        # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ production –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        self.stdout.write('\n1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ production –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...')
        checks['settings'], setting_issues = self.check_production_settings(detailed)
        issues.extend(setting_issues)
        
        # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        self.stdout.write('\n2Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...')
        checks['database'], db_issues = self.check_database(detailed)
        issues.extend(db_issues)
        
        # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤
        self.stdout.write('\n3Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤...')
        checks['media_files'], media_issues = self.check_media_files(detailed, fix_issues)
        issues.extend(media_issues)
        
        # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
        self.stdout.write('\n4Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤...')
        checks['static_files'], static_issues = self.check_static_files(detailed)
        issues.extend(static_issues)
        
        # 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
        self.stdout.write('\n5Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π —Ç–∞ –¥–∞–Ω–∏—Ö...')
        checks['models'], model_issues = self.check_models(detailed)
        issues.extend(model_issues)
        
        # 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —à–∞–±–ª–æ–Ω—ñ–≤
        self.stdout.write('\n6Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —à–∞–±–ª–æ–Ω—ñ–≤...')
        checks['templates'], template_issues = self.check_templates(detailed)
        issues.extend(template_issues)
        
        # 7. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
        self.stdout.write('\n7Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...')
        checks['dependencies'], dep_issues = self.check_dependencies(detailed)
        issues.extend(dep_issues)
        
        # 8. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        self.stdout.write('\n8Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É...')
        checks['content'], content_issues = self.check_content(detailed)
        issues.extend(content_issues)
        
        # –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
        self.show_final_report(checks, issues, fix_issues)

    def check_production_settings(self, detailed):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î production –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        issues = []
        
        # –ö—Ä–∏—Ç–∏—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        required_settings = {
            'DEBUG': False,
            'STATIC_ROOT': True,
            'MEDIA_ROOT': True,
            'MEDIA_URL': '/static/media/',
            'DATABASES': True,
            'ALLOWED_HOSTS': True
        }
        
        for setting, expected in required_settings.items():
            if not hasattr(settings, setting):
                issues.append(f'–í—ñ–¥—Å—É—Ç–Ω—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {setting}')
            elif expected is not True and getattr(settings, setting) != expected:
                issues.append(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è {setting}: {getattr(settings, setting)}')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ WhiteNoise
        if 'whitenoise.middleware.WhiteNoiseMiddleware' not in settings.MIDDLEWARE:
            issues.append('WhiteNoise middleware –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π')
        
        if detailed:
            self.stdout.write(f'   üìä –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ {len(required_settings)} –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å')
        
        if not issues:
            self.stdout.write(self.style.SUCCESS('   ‚úÖ Production –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω—ñ'))
            return True, []
        else:
            for issue in issues:
                self.stdout.write(f'   ‚ùå {issue}')
            return False, issues

    def check_database(self, detailed):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
        issues = []
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            connection.ensure_connection()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ
            tables = connection.introspection.table_names()
            required_tables = ['mainapp_product', 'mainapp_category', 'mainapp_brand']
            
            for table in required_tables:
                if table not in tables:
                    issues.append(f'–í—ñ–¥—Å—É—Ç–Ω—è —Ç–∞–±–ª–∏—Ü—è: {table}')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ
            if Product.objects.count() == 0:
                issues.append('–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö')
            
            if Category.objects.count() == 0:
                issues.append('–ù–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö')
            
            if detailed:
                self.stdout.write(f'   üìä –¢–æ–≤–∞—Ä—ñ–≤: {Product.objects.count()}')
                self.stdout.write(f'   üìä –ö–∞—Ç–µ–≥–æ—Ä—ñ–π: {Category.objects.count()}')
                self.stdout.write(f'   üìä –ë—Ä–µ–Ω–¥—ñ–≤: {Brand.objects.count()}')
            
        except Exception as e:
            issues.append(f'–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î: {str(e)}')
        
        if not issues:
            self.stdout.write(self.style.SUCCESS('   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ'))
            return True, []
        else:
            for issue in issues:
                self.stdout.write(f'   ‚ùå {issue}')
            return False, issues

    def check_media_files(self, detailed, fix_issues):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏"""
        issues = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞–ø–∫–∏
        media_root = os.path.join(settings.BASE_DIR, 'media')
        staticfiles_media = os.path.join(settings.BASE_DIR, 'staticfiles', 'media')
        
        if not os.path.exists(media_root):
            issues.append('–ü–∞–ø–∫–∞ media –Ω–µ —ñ—Å–Ω—É—î')
            if fix_issues:
                os.makedirs(media_root, exist_ok=True)
                self.stdout.write('   üîß –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É media')
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–∞–π–ª—ñ–≤
        media_files = 0
        if os.path.exists(media_root):
            media_files = len(glob.glob(os.path.join(media_root, '**', '*.jpg'), recursive=True))
            media_files += len(glob.glob(os.path.join(media_root, '**', '*.jpeg'), recursive=True))
            media_files += len(glob.glob(os.path.join(media_root, '**', '*.png'), recursive=True))
        
        staticfiles_media_files = 0
        if os.path.exists(staticfiles_media):
            staticfiles_media_files = len(glob.glob(os.path.join(staticfiles_media, '**', '*.jpg'), recursive=True))
            staticfiles_media_files += len(glob.glob(os.path.join(staticfiles_media, '**', '*.jpeg'), recursive=True))
            staticfiles_media_files += len(glob.glob(os.path.join(staticfiles_media, '**', '*.png'), recursive=True))
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–≤–∞—Ä–∏ –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å
        products_without_images = Product.objects.filter(image='').count()
        if products_without_images > 0:
            issues.append(f'{products_without_images} —Ç–æ–≤–∞—Ä—ñ–≤ –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å')
        
        if detailed:
            self.stdout.write(f'   üìä –ú–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤ —É media/: {media_files}')
            self.stdout.write(f'   üìä –ú–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤ —É staticfiles/media/: {staticfiles_media_files}')
            self.stdout.write(f'   üìä –¢–æ–≤–∞—Ä—ñ–≤ –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {products_without_images}')
        
        if staticfiles_media_files == 0 and media_files > 0:
            issues.append('–ú–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏ –Ω–µ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –¥–ª—è production (–∑–∞–ø—É—Å—Ç—ñ—Ç—å setup_media_for_production)')
        
        if not issues:
            self.stdout.write(self.style.SUCCESS('   ‚úÖ –ú–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏ –≥–æ—Ç–æ–≤—ñ'))
            return True, []
        else:
            for issue in issues:
                self.stdout.write(f'   ‚ùå {issue}')
            return False, issues

    def check_static_files(self, detailed):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏"""
        issues = []
        
        static_root = getattr(settings, 'STATIC_ROOT', None)
        if not static_root:
            issues.append('STATIC_ROOT –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π')
            return False, issues
        
        if not os.path.exists(static_root):
            issues.append('–ü–∞–ø–∫–∞ staticfiles –Ω–µ —ñ—Å–Ω—É—î (–∑–∞–ø—É—Å—Ç—ñ—Ç—å collectstatic)')
        else:
            static_files = len(glob.glob(os.path.join(static_root, '**', '*'), recursive=True))
            if detailed:
                self.stdout.write(f'   üìä –°—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤: {static_files}')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ CSS/JS —Ñ–∞–π–ª–∏
        required_static = ['css/base.css', 'js/base.js']
        static_dir = os.path.join(settings.BASE_DIR, 'static')
        
        for file_path in required_static:
            full_path = os.path.join(static_dir, file_path)
            if not os.path.exists(full_path):
                issues.append(f'–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Å—Ç–∞—Ç–∏—á–Ω–∏–π —Ñ–∞–π–ª: {file_path}')
        
        if not issues:
            self.stdout.write(self.style.SUCCESS('   ‚úÖ –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –≥–æ—Ç–æ–≤—ñ'))
            return True, []
        else:
            for issue in issues:
                self.stdout.write(f'   ‚ùå {issue}')
            return False, issues

    def check_models(self, detailed):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –º–æ–¥–µ–ª—ñ"""
        issues = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–µ—Ç–æ–¥–∏ image_url
        products_with_images = Product.objects.exclude(image='').count()
        if products_with_images > 0:
            # –¢–µ—Å—Ç—É—î–º–æ –ø–µ—Ä—à–∏–π —Ç–æ–≤–∞—Ä
            test_product = Product.objects.exclude(image='').first()
            try:
                test_url = test_product.image_url
                if not test_url:
                    issues.append('–ú–µ—Ç–æ–¥ image_url –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
            except Exception as e:
                issues.append(f'–ü–æ–º–∏–ª–∫–∞ –≤ –º–µ—Ç–æ–¥—ñ image_url: {str(e)}')
        
        if detailed:
            self.stdout.write(f'   üìä –¢–æ–≤–∞—Ä—ñ–≤ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏: {products_with_images}')
        
        if not issues:
            self.stdout.write(self.style.SUCCESS('   ‚úÖ –ú–æ–¥–µ–ª—ñ –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ'))
            return True, []
        else:
            for issue in issues:
                self.stdout.write(f'   ‚ùå {issue}')
            return False, issues

    def check_templates(self, detailed):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —à–∞–±–ª–æ–Ω–∏"""
        issues = []
        
        template_dir = os.path.join(settings.BASE_DIR, 'mainapp', 'templates', 'mainapp')
        required_templates = ['base.html', 'index.html', 'catalog.html', 'product_detail.html']
        
        for template in required_templates:
            template_path = os.path.join(template_dir, template)
            if not os.path.exists(template_path):
                issues.append(f'–í—ñ–¥—Å—É—Ç–Ω—ñ–π —à–∞–±–ª–æ–Ω: {template}')
        
        if detailed:
            self.stdout.write(f'   üìä –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ {len(required_templates)} —à–∞–±–ª–æ–Ω—ñ–≤')
        
        if not issues:
            self.stdout.write(self.style.SUCCESS('   ‚úÖ –®–∞–±–ª–æ–Ω–∏ –Ω–∞ –º—ñ—Å—Ü—ñ'))
            return True, []
        else:
            for issue in issues:
                self.stdout.write(f'   ‚ùå {issue}')
            return False, issues

    def check_dependencies(self, detailed):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ"""
        issues = []
        
        requirements_file = os.path.join(settings.BASE_DIR, 'requirements-production.txt')
        if not os.path.exists(requirements_file):
            issues.append('–§–∞–π–ª requirements-production.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–∞–∫–µ—Ç–∏
        try:
            import django
            import psycopg2
            import whitenoise
            import gunicorn
        except ImportError as e:
            issues.append(f'–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∫—Ä–∏—Ç–∏—á–Ω–∏–π –ø–∞–∫–µ—Ç: {str(e)}')
        
        if detailed:
            self.stdout.write(f'   üìä Django –≤–µ—Ä—Å—ñ—è: {django.get_version()}')
        
        if not issues:
            self.stdout.write(self.style.SUCCESS('   ‚úÖ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ'))
            return True, []
        else:
            for issue in issues:
                self.stdout.write(f'   ‚ùå {issue}')
            return False, issues

    def check_content(self, detailed):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ä–æ—Å—ñ–π—Å—å–∫—É –º–æ–≤—É"""
        issues = []
        
        russian_patterns = ['—ã', '—ç', '—ä', '—ë']
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–≤–∞—Ä–∏
        for pattern in russian_patterns:
            russian_products = Product.objects.filter(name__icontains=pattern).count()
            if russian_products > 0:
                issues.append(f'–ó–Ω–∞–π–¥–µ–Ω–æ {russian_products} —Ç–æ–≤–∞—Ä—ñ–≤ –∑ —Ä–æ—Å—ñ–π—Å—å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏')
                break
        
        if detailed and not issues:
            self.stdout.write('   üìä –†–æ—Å—ñ–π—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π')
        
        if not issues:
            self.stdout.write(self.style.SUCCESS('   ‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É–∫—Ä–∞—ó–Ω—ñ–∑–æ–≤–∞–Ω–∏–π'))
            return True, []
        else:
            for issue in issues:
                self.stdout.write(f'   ‚ùå {issue}')
            return False, issues

    def show_final_report(self, checks, issues, fix_issues):
        """–ü–æ–∫–∞–∑—É—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç"""
        self.stdout.write('\n' + '='*70)
        
        passed_checks = sum(checks.values())
        total_checks = len(checks)
        
        if passed_checks == total_checks:
            self.stdout.write(self.style.SUCCESS('üéâ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í–ò–ô –î–û –î–ï–ü–õ–û–Æ –ù–ê RENDER!'))
            self.stdout.write(self.style.SUCCESS(f'‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ –≤—Å—ñ {total_checks} –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫'))
            self.stdout.write('\nüöÄ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –¥–µ–ø–ª–æ–π:')
            self.stdout.write('   git push origin main')
        else:
            self.stdout.write(self.style.ERROR(f'‚ùå –ó–ù–ê–ô–î–ï–ù–û {len(issues)} –ü–†–û–ë–õ–ï–ú'))
            self.stdout.write(f'üìä –ü—Ä–æ–π–¥–µ–Ω–æ {passed_checks}/{total_checks} –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫')
            
            self.stdout.write('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:')
            if not checks['settings']:
                self.stdout.write('   ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ config/settings_production.py')
            if not checks['media_files']:
                self.stdout.write('   ‚Ä¢ python manage.py setup_media_for_production')
            if not checks['content']:
                self.stdout.write('   ‚Ä¢ python manage.py clean_russian_content --fix')
            if not checks['database']:
                self.stdout.write('   ‚Ä¢ python manage.py migrate && python manage.py universal_import_products')
        
        self.stdout.write('='*70) 