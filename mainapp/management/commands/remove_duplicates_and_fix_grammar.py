import re
from django.core.management.base import BaseCommand
from django.db import transaction
from mainapp.models import Product
from collections import defaultdict

class Command(BaseCommand):
    help = '–í–∏–¥–∞–ª—è—î –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª—è—î –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É',
        )
        parser.add_argument(
            '--target-count',
            type=int,
            default=41,
            help='–¶—ñ–ª—å–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 41)',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        target_count = options['target_count']
        
        products = Product.objects.all()
        total_products = products.count()
        
        self.stdout.write(f"–ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {total_products}")
        self.stdout.write(f"–¶—ñ–ª—å–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {target_count}")
        
        if dry_run:
            self.stdout.write(self.style.WARNING("–†–ï–ñ–ò–ú –ü–û–ü–ï–†–ï–î–ù–¨–û–ì–û –ü–ï–†–ï–ì–õ–Ø–î–£ - –∑–º—ñ–Ω–∏ –Ω–µ –±—É–¥—É—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω—ñ"))
        
        # –ö—Ä–æ–∫ 1: –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ—á–Ω—ñ –¥—É–±–ª—ñ–∫–∞—Ç–∏
        self.stdout.write("\nüîç –ö—Ä–æ–∫ 1: –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ—á–Ω–∏—Ö –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤...")
        deleted_duplicates = self.remove_exact_duplicates(dry_run)
        
        # –ö—Ä–æ–∫ 2: –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏
        self.stdout.write("\n‚úèÔ∏è –ö—Ä–æ–∫ 2: –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≥—Ä–∞–º–∞—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫...")
        fixed_grammar = self.fix_grammar_errors(dry_run)
        
        # –ö—Ä–æ–∫ 3: –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ —Ç–æ–≤–∞—Ä–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        remaining_products = Product.objects.count() if not dry_run else total_products - deleted_duplicates
        if remaining_products > target_count:
            self.stdout.write(f"\nüóëÔ∏è –ö—Ä–æ–∫ 3: –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–π–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ (–ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ {remaining_products - target_count})...")
            deleted_extra = self.remove_extra_products(target_count, dry_run)
        else:
            deleted_extra = 0
        
        # –ü—ñ–¥—Å—É–º–∫–∏
        final_count = remaining_products - deleted_extra if not dry_run else remaining_products - deleted_extra
        
        if dry_run:
            self.stdout.write(
                self.style.WARNING(
                    f"\n–ü–û–ü–ï–†–ï–î–ù–Ü–ô –ü–ï–†–ï–ì–õ–Ø–î –ó–ê–í–ï–†–®–ï–ù–û\n"
                    f"–ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {total_products}\n"
                    f"–ë—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {deleted_duplicates}\n"
                    f"–ë—É–¥–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –≥—Ä–∞–º–∞—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫: {fixed_grammar}\n"
                    f"–ë—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ –∑–∞–π–≤–∏—Ö: {deleted_extra}\n"
                    f"–§—ñ–Ω–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {final_count}\n"
                    f"–î–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–µ–∑ --dry-run"
                )
            )
        else:
            self.stdout.write(
                self.style.SUCCESS(
                    f"\n–û–ß–ò–©–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û\n"
                    f"–í–∏–¥–∞–ª–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {deleted_duplicates}\n"
                    f"–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –≥—Ä–∞–º–∞—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫: {fixed_grammar}\n"
                    f"–í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–π–≤–∏—Ö: {deleted_extra}\n"
                    f"–§—ñ–Ω–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {Product.objects.count()}"
                )
            )

    def remove_exact_duplicates(self, dry_run):
        """–í–∏–¥–∞–ª—è—î —Ç–æ—á–Ω—ñ –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Ç–æ–≤–∞—Ä—ñ–≤"""
        # –ì—Ä—É–ø—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑–∞ –Ω–∞–∑–≤–æ—é (–≤ –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ)
        product_groups = defaultdict(list)
        
        for product in Product.objects.all():
            normalized_name = product.name.lower().strip()
            product_groups[normalized_name].append(product)
        
        deleted_count = 0
        
        for name, products in product_groups.items():
            if len(products) > 1:
                # –ó–∞–ª–∏—à–∞—î–º–æ –ø–µ—Ä—à–∏–π —Ç–æ–≤–∞—Ä, –≤–∏–¥–∞–ª—è—î–º–æ —Ä–µ—à—Ç—É
                products_to_delete = products[1:]
                
                for product in products_to_delete:
                    if dry_run:
                        self.stdout.write(f"–í–ò–î–ê–õ–ò–¢–ò –¥—É–±–ª—ñ–∫–∞—Ç: {product.name} (ID: {product.id})")
                    else:
                        product.delete()
                        self.stdout.write(f"–í–∏–¥–∞–ª–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç: {product.name}")
                    deleted_count += 1
        
        return deleted_count

    def fix_grammar_errors(self, dry_run):
        """–í–∏–ø—Ä–∞–≤–ª—è—î –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤ –Ω–∞–∑–≤–∞—Ö —Ç–∞ –æ–ø–∏—Å–∞—Ö"""
        fixed_count = 0
        
        # –°–ª–æ–≤–Ω–∏–∫ –≥—Ä–∞–º–∞—Ç–∏—á–Ω–∏—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
        grammar_fixes = {
            # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
            '—Å–æ–ª–Ω–µ—á–Ω—Ö': '—Å–æ–Ω—è—á–Ω–∏—Ö',
            '–µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–π': '–µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ–π',
            '–µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ–π': '–µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ–π',
            '–≤—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞—è': '–≤–∏—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞',
            '–≤—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–π': '–≤–∏—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∏–π',
            '—Ö—Ä–∞–Ω–µ–Ω–∏—è': '–∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è',
            '–µ–Ω–µ—Ä–≥–∏–∏': '–µ–Ω–µ—Ä–≥—ñ—ó',
            '–º–æ–¥—É–ª–µ–π': '–º–æ–¥—É–ª—ñ–≤',
            '–º–æ–¥—É–ª—ñ–≤': '–º–æ–¥—É–ª—ñ–≤',
            '–∫–≤—Ç–≥–æ–¥': '–∫–í—Ç¬∑–≥–æ–¥',
            '–∫–≤—Ç': '–∫–í—Ç',
            '–∫–≤—Ç ': '–∫–í—Ç ',
            '–≤—Ç': '–í—Ç',
            ' –≤—Ç ': ' –í—Ç ',
            '–∞–≥–æ–¥': '–ê¬∑–≥–æ–¥',
            '–º–Ω—ñ—Å—Ç—å': '—î–º–Ω—ñ—Å—Ç—å',
            '–∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è': '–∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è',
            
            # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ä–æ—Å—ñ–π—Å—å–∫–∏—Ö –ø–æ–º–∏–ª–æ–∫
            '–≤—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞': '–≤–∏—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞ —Å–∏—Å—Ç–µ–º–∞',
            '—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–Ω–µ—Ä–≥–∏–∏': '–∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó',
            '—Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è': '—Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è',
            '–∫–æ–º–ø–ª–µ–∫—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ': '–∫–æ–º–ø–ª–µ–∫—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ',
            '–º–æ–Ω—Ç–∞–∂ —Å–æ–ª–Ω–µ—á–Ω—Ö': '–º–æ–Ω—Ç–∞–∂ —Å–æ–Ω—è—á–Ω–∏—Ö',
            '–µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–π': '–µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ–π',
            
            # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ä–µ–≥—ñ—Å—Ç—Ä—É —Ç–∞ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó
            '–¥–µye': 'Deye',
            'must': 'Must',
            'longi': 'Longi',
            'solar': 'Solar',
            'sun-': 'SUN-',
            'pv18': 'PV18',
            'pv19': 'PV19',
            'lifepo4': 'LiFePO4',
            'lvts': 'LVTS',
            'bos-': 'BOS-',
            
            # –¢–µ—Ö–Ω—ñ—á–Ω—ñ –æ–¥–∏–Ω–∏—Ü—ñ
            '–∫–≤—Ç¬∑–≥–æ–¥': '–∫–í—Ç¬∑–≥–æ–¥',
            '–∞¬∑–≥–æ–¥': '–ê¬∑–≥–æ–¥',
            ' –≤ ': ' –í ',
            ' –∞)': ' –ê)',
            '( ': '(',
            ' )': ')',
            '  ': ' ',
        }
        
        products = Product.objects.all()
        
        for product in products:
            original_name = product.name
            original_description = product.description
            
            # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞–∑–≤—É
            fixed_name = self.apply_grammar_fixes(original_name, grammar_fixes)
            
            # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –æ–ø–∏—Å
            fixed_description = self.apply_grammar_fixes(original_description, grammar_fixes)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∑–º—ñ–Ω–∏
            if original_name != fixed_name or original_description != fixed_description:
                if dry_run:
                    if original_name != fixed_name:
                        self.stdout.write(f"–í–ò–ü–†–ê–í–ò–¢–ò –Ω–∞–∑–≤—É: {original_name} ‚Üí {fixed_name}")
                    if original_description != fixed_description:
                        self.stdout.write(f"–í–ò–ü–†–ê–í–ò–¢–ò –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É ID {product.id}")
                else:
                    with transaction.atomic():
                        product.name = fixed_name
                        product.description = fixed_description
                        product.save()
                        self.stdout.write(f"–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_name}")
                fixed_count += 1
        
        return fixed_count

    def apply_grammar_fixes(self, text, fixes_dict):
        """–ó–∞—Å—Ç–æ—Å–æ–≤—É—î –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–æ —Ç–µ–∫—Å—Ç—É"""
        if not text:
            return text
        
        result = str(text)
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        for wrong, correct in fixes_dict.items():
            result = result.replace(wrong, correct)
        
        # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—é –ø–µ—Ä—à–æ—ó –ª—ñ—Ç–µ—Ä–∏
        if result and result[0].islower():
            result = result[0].upper() + result[1:]
        
        # –û—á–∏—â–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
        result = re.sub(r'\s+', ' ', result).strip()
        
        # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞–≤–∫–æ–ª–æ –¥—É–∂–æ–∫
        result = re.sub(r'\s*\(\s*', ' (', result)
        result = re.sub(r'\s*\)\s*', ') ', result)
        result = result.strip()
        
        return result

    def remove_extra_products(self, target_count, dry_run):
        """–í–∏–¥–∞–ª—è—î –∑–∞–π–≤—ñ —Ç–æ–≤–∞—Ä–∏ —â–æ–± –¥–æ—Å—è–≥—Ç–∏ —Ü—ñ–ª—å–æ–≤–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ"""
        current_products = Product.objects.all()
        current_count = current_products.count()
        
        if current_count <= target_count:
            return 0
        
        to_delete = current_count - target_count
        
        # –°–æ—Ä—Ç—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑–∞ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—é (–º–µ–Ω—à –≤–∞–∂–ª–∏–≤—ñ –≤–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä—à–∏–º–∏)
        # –ö—Ä–∏—Ç–µ—Ä—ñ—ó: —Ç–æ–≤–∞—Ä–∏ –±–µ–∑ –æ–ø–∏—Å—É, –¥—É–±–ª—å–æ–≤–∞–Ω—ñ –º–æ–¥–µ–ª—ñ, –º–µ–Ω—à –ø–æ–ø—É–ª—è—Ä–Ω—ñ –±—Ä–µ–Ω–¥–∏
        products_by_priority = []
        
        for product in current_products:
            priority = 0
            
            # –ù–∏–∂—á–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–æ–≤–∞—Ä—ñ–≤ –±–µ–∑ –æ–ø–∏—Å—É
            if not product.description or len(product.description.strip()) < 10:
                priority -= 10
            
            # –ù–∏–∂—á–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –¥–µ—è–∫–∏—Ö –±—Ä–µ–Ω–¥—ñ–≤ –∑ –º–µ–Ω—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ç–æ–≤–∞—Ä—ñ–≤
            brand_count = Product.objects.filter(brand=product.brand).count()
            if brand_count == 1:  # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –±—Ä–µ–Ω–¥ –∑ –æ–¥–Ω–∏–º —Ç–æ–≤–∞—Ä–æ–º
                priority -= 5
            
            # –ù–∏–∂—á–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –¥—É–∂–µ —Å—Ö–æ–∂–∏—Ö –Ω–∞–∑–≤
            similar_count = Product.objects.filter(
                name__icontains=product.name.split()[0]  # –ü–µ—Ä—à–µ —Å–ª–æ–≤–æ –Ω–∞–∑–≤–∏
            ).count()
            if similar_count > 3:
                priority -= 3
            
            products_by_priority.append((priority, product))
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º (–Ω–∞–π–º–µ–Ω—à –≤–∞–∂–ª–∏–≤—ñ –ø–µ—Ä—à–∏–º–∏)
        products_by_priority.sort(key=lambda x: x[0])
        
        deleted_count = 0
        for priority, product in products_by_priority[:to_delete]:
            if dry_run:
                self.stdout.write(f"–í–ò–î–ê–õ–ò–¢–ò –∑–∞–π–≤–∏–π: {product.name} (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {priority})")
            else:
                product_name = product.name
                product.delete()
                self.stdout.write(f"–í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–π–≤–∏–π: {product_name}")
            deleted_count += 1
        
        return deleted_count 