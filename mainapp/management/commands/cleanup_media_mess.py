"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –±–µ–∑–ª–∞–¥—É –∑ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∞–º–∏
–ó–∞–ª–∏—à–∞—î —Ç—ñ–ª—å–∫–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
"""
import os
import shutil
from django.core.management.base import BaseCommand
from django.conf import settings
from mainapp.models import Product, ProductImage

class Command(BaseCommand):
    help = '–û—á–∏—â–∞—î –±–µ–∑–ª–∞–¥ –∑ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∞–º–∏ - –∑–∞–ª–∏—à–∞—î —Ç—ñ–ª—å–∫–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–†–µ–∂–∏–º –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –±–µ–∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è'
        )
        parser.add_argument(
            '--aggressive',
            action='store_true',
            help='–ê–≥—Ä–µ—Å–∏–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è - –≤–∏–¥–∞–ª—è—î –í–°–ï —ñ —Å—Ç–≤–æ—Ä—é—î –∑–∞–Ω–æ–≤–æ'
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        aggressive = options['aggressive']
        
        self.stdout.write('üî• –û–ß–ò–©–ï–ù–ù–Ø –ú–ï–î–Ü–ê –ë–ï–ó–õ–ê–î–£')
        self.stdout.write('='*50)
        
        media_root = os.path.join(settings.BASE_DIR, 'media')
        products_dir = os.path.join(media_root, 'products')
        gallery_dir = os.path.join(products_dir, 'gallery')
        
        if not os.path.exists(products_dir):
            self.stdout.write('‚ùå –ü–∞–ø–∫–∞ products –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞')
            return
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        current_main = len([f for f in os.listdir(products_dir) if f.endswith('.jpg')])
        current_gallery = len([f for f in os.listdir(gallery_dir) if f.endswith('.jpg')]) if os.path.exists(gallery_dir) else 0
        
        self.stdout.write(f'üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:')
        self.stdout.write(f'   ‚Ä¢ –¢–æ–≤–∞—Ä—ñ–≤ –≤ –±–∞–∑—ñ: {Product.objects.count()}')
        self.stdout.write(f'   ‚Ä¢ –ì–æ–ª–æ–≤–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å: {current_main}')
        self.stdout.write(f'   ‚Ä¢ –ó–æ–±—Ä–∞–∂–µ–Ω—å –≥–∞–ª–µ—Ä–µ—ó: {current_gallery}')
        self.stdout.write(f'   ‚Ä¢ –ó–ê–ì–ê–õ–û–ú: {current_main + current_gallery}')
        
        if aggressive:
            self.aggressive_cleanup(products_dir, dry_run)
        else:
            self.smart_cleanup(products_dir, gallery_dir, dry_run)
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
        if not dry_run:
            new_main = len([f for f in os.listdir(products_dir) if f.endswith('.jpg')])
            new_gallery = len([f for f in os.listdir(gallery_dir) if f.endswith('.jpg')]) if os.path.exists(gallery_dir) else 0
            
            self.stdout.write(f'\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:')
            self.stdout.write(f'   ‚Ä¢ –ì–æ–ª–æ–≤–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å: {new_main}')
            self.stdout.write(f'   ‚Ä¢ –ó–æ–±—Ä–∞–∂–µ–Ω—å –≥–∞–ª–µ—Ä–µ—ó: {new_gallery}')
            self.stdout.write(f'   ‚Ä¢ –ó–ê–ì–ê–õ–û–ú: {new_main + new_gallery}')
            self.stdout.write(f'   ‚Ä¢ –í–ò–î–ê–õ–ï–ù–û: {(current_main + current_gallery) - (new_main + new_gallery)}')

    def aggressive_cleanup(self, products_dir, dry_run):
        """–ê–≥—Ä–µ—Å–∏–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è - –≤–∏–¥–∞–ª—è—î –í–°–ï —ñ —Å—Ç–≤–æ—Ä—é—î –∑–∞–Ω–æ–≤–æ"""
        self.stdout.write('\nüî• –ê–ì–†–ï–°–ò–í–ù–ï –û–ß–ò–©–ï–ù–ù–Ø - –í–ò–î–ê–õ–Ø–Ñ–ú–û –í–°–ï!')
        
        if dry_run:
            self.stdout.write('   [DRY RUN] –í–∏–¥–∞–ª–∏–≤ –±–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤ products/')
            return
        
        # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—é –ø–∞–ø–∫—É products
        if os.path.exists(products_dir):
            shutil.rmtree(products_dir)
            self.stdout.write('   ‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –≤—Å—é –ø–∞–ø–∫—É products/')
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–Ω–æ–≤–æ
        os.makedirs(products_dir, exist_ok=True)
        os.makedirs(os.path.join(products_dir, 'gallery'), exist_ok=True)
        
        self.stdout.write('   ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —á–∏—Å—Ç—ñ –ø–∞–ø–∫–∏')
        self.stdout.write('\n‚ö†Ô∏è –¢–ï–ü–ï–† –ó–ê–ü–£–°–¢–Ü–¢–¨: python manage.py universal_import_products')

    def smart_cleanup(self, products_dir, gallery_dir, dry_run):
        """–†–æ–∑—É–º–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è - –∑–∞–ª–∏—à–∞—î —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ñ–∞–π–ª–∏"""
        self.stdout.write('\nüßπ –†–û–ó–£–ú–ù–ï –û–ß–ò–©–ï–ù–ù–Ø')
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –∑ –±–∞–∑–∏
        needed_files = set()
        
        for product in Product.objects.all():
            if product.image:
                # –í–∏—Ç—è–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —ñ–º'—è —Ñ–∞–π–ª—É
                image_name = os.path.basename(str(product.image))
                needed_files.add(image_name)
        
        # –î–æ–¥–∞—î–º–æ —Ñ–∞–π–ª–∏ –∑ ProductImage
        for img in ProductImage.objects.all():
            if img.image:
                image_name = os.path.basename(str(img.image))
                needed_files.add(image_name)
        
        self.stdout.write(f'   üìù –ù–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤: {len(needed_files)}')
        
        deleted_count = 0
        
        # –û—á–∏—â—É—î–º–æ –≥–æ–ª–æ–≤–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        for filename in os.listdir(products_dir):
            if filename.endswith('.jpg') and filename not in needed_files:
                file_path = os.path.join(products_dir, filename)
                if dry_run:
                    self.stdout.write(f'   [DRY RUN] –í–∏–¥–∞–ª–∏–≤ –±–∏: {filename}')
                else:
                    os.remove(file_path)
                deleted_count += 1
        
        # –û—á–∏—â—É—î–º–æ –≥–∞–ª–µ—Ä–µ—é - –∑–∞–ª–∏—à–∞—î–º–æ –º–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ –Ω–∞ —Ç–æ–≤–∞—Ä
        if os.path.exists(gallery_dir):
            gallery_files = {}
            
            # –ì—Ä—É–ø—É—î–º–æ —Ñ–∞–π–ª–∏ –≥–∞–ª–µ—Ä–µ—ó –ø–æ —Ç–æ–≤–∞—Ä–∞—Ö
            for filename in os.listdir(gallery_dir):
                if filename.endswith('.jpg'):
                    # –í–∏—Ç—è–≥—É—î–º–æ ID —Ç–æ–≤–∞—Ä—É –∑ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É
                    parts = filename.split('_')
                    if len(parts) >= 2:
                        product_id = parts[1]
                        if product_id not in gallery_files:
                            gallery_files[product_id] = []
                        gallery_files[product_id].append(filename)
            
            # –ó–∞–ª–∏—à–∞—î–º–æ –º–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ –Ω–∞ —Ç–æ–≤–∞—Ä
            for product_id, files in gallery_files.items():
                files.sort()  # –°–æ—Ä—Ç—É—î–º–æ –¥–ª—è –ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–æ—Å—Ç—ñ
                
                if len(files) > 3:
                    files_to_delete = files[3:]  # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å–µ –ø—ñ—Å–ª—è 3-–≥–æ
                    
                    for filename in files_to_delete:
                        file_path = os.path.join(gallery_dir, filename)
                        if dry_run:
                            self.stdout.write(f'   [DRY RUN] –í–∏–¥–∞–ª–∏–≤ –±–∏ –≥–∞–ª–µ—Ä–µ—é: {filename}')
                        else:
                            os.remove(file_path)
                        deleted_count += 1
        
        if not dry_run:
            self.stdout.write(f'   ‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–π–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤')
        else:
            self.stdout.write(f'   üìä –ë—É–ª–æ –± –≤–∏–¥–∞–ª–µ–Ω–æ {deleted_count} —Ñ–∞–π–ª—ñ–≤') 