from django.core.management.base import BaseCommand
from django.conf import settings
from mainapp.models import Product, ProductImage
import os
import shutil
import glob
from django.core.files.storage import default_storage


class Command(BaseCommand):
    help = '–í–∏–ø—Ä–∞–≤–ª—è—î –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –º—ñ–∂ ID —Ç–æ–≤–∞—Ä—ñ–≤ —É –ë–î —Ç–∞ —Ñ–∞–π–ª–∞–º–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç–∏ —â–æ –±—É–¥–µ –∑—Ä–æ–±–ª–µ–Ω–æ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è',
        )
        parser.add_argument(
            '--fix-method',
            choices=['copy', 'rename', 'update-db'],
            default='copy',
            help='–ú–µ—Ç–æ–¥ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: copy (–∫–æ–ø—ñ—é–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏), rename (–ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏), update-db (–æ–Ω–æ–≤–∏—Ç–∏ –ë–î)',
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üîß –ü–æ—á–∏–Ω–∞—é –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω—å...'))
        
        dry_run = options['dry_run']
        fix_method = options['fix_method']
        
        if dry_run:
            self.stdout.write(self.style.WARNING('üß™ –†–ï–ñ–ò–ú –¢–ï–°–¢–£–í–ê–ù–ù–Ø - –∑–º—ñ–Ω–∏ –Ω–µ –±—É–¥—É—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω—ñ'))
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ —Ñ–∞–π–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å
        media_root = settings.MEDIA_ROOT
        products_dir = os.path.join(media_root, 'products')
        
        existing_files = []
        if os.path.exists(products_dir):
            for filename in os.listdir(products_dir):
                if filename.startswith('product_') and filename.endswith('.jpg'):
                    existing_files.append(filename)
        
        self.stdout.write(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ {len(existing_files)} —Ñ–∞–π–ª—ñ–≤ –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ –ø—Ä–æ–±–ª–µ–º–Ω–∏–º–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
        problematic_products = []
        
        for product in Product.objects.all():
            if product.image:
                image_path = product.image.name
                full_path = os.path.join(media_root, image_path)
                
                if not os.path.exists(full_path):
                    problematic_products.append({
                        'product': product,
                        'missing_file': image_path,
                        'expected_pattern': f"product_{product.id}_"
                    })
        
        self.stdout.write(f"‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {len(problematic_products)} —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ–º–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏")
        
        if fix_method == 'copy':
            self.fix_by_copying(problematic_products, existing_files, media_root, dry_run)
        elif fix_method == 'update-db':
            self.fix_by_updating_db(problematic_products, existing_files, dry_run)
        else:
            self.stdout.write(self.style.ERROR('–ú–µ—Ç–æ–¥ "rename" –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π'))

    def fix_by_copying(self, problematic_products, existing_files, media_root, dry_run):
        """–ö–æ–ø—ñ—é—î —ñ—Å–Ω—É—é—á—ñ —Ñ–∞–π–ª–∏ –∑ –Ω–æ–≤–∏–º–∏ —ñ–º–µ–Ω–∞–º–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤"""
        self.stdout.write("üìã –ú–µ—Ç–æ–¥: –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑ –Ω–æ–≤–∏–º–∏ —ñ–º–µ–Ω–∞–º–∏")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø—ñ–Ω–≥ –ø–æ –Ω–∞–∑–≤–∞—Ö —Ç–æ–≤–∞—Ä—ñ–≤
        name_mapping = {}
        for product_data in problematic_products:
            product = product_data['product']
            # –í–∏—Ç—è–≥—É—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∑ –Ω–∞–∑–≤–∏ —Ç–æ–≤–∞—Ä—É
            name_words = product.name.lower().split()
            key_words = [word for word in name_words if len(word) > 3][:3]  # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 3 –∑–Ω–∞—á—É—â—ñ —Å–ª–æ–≤–∞
            name_mapping[product.id] = key_words
        
        fixed_count = 0
        
        for product_data in problematic_products:
            product = product_data['product']
            target_filename = f"product_{product.id}_0_{int(product.created_at.timestamp())}_{product.name[:20].replace(' ', '_').lower()}.jpg"
            target_path = os.path.join(media_root, 'products', target_filename)
            
            # –®—É–∫–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π match —Å–µ—Ä–µ–¥ —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–∞–π–ª—ñ–≤
            best_match = None
            best_score = 0
            
            key_words = name_mapping[product.id]
            
            for existing_file in existing_files:
                score = 0
                file_lower = existing_file.lower()
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±—ñ–≥–∏ –ø–æ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª–æ–≤–∞—Ö
                for word in key_words:
                    if word in file_lower:
                        score += 1
                
                # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ—á–∫–∏ –∑–∞ —Ç–∏–ø —Ç–æ–≤–∞—Ä—É
                if 'invertor' in file_lower or '–≥—ñ–±—Ä–∏–¥' in product.name.lower():
                    if 'invertor' in file_lower or 'gibrid' in file_lower:
                        score += 2
                elif 'panel' in file_lower or '–ø–∞–Ω–µ–ª' in product.name.lower():
                    if 'panel' in file_lower or 'solnech' in file_lower:
                        score += 2
                elif '–±–∞—Ç–∞—Ä' in product.name.lower() or 'battery' in product.name.lower():
                    if 'batare' in file_lower or 'battery' in file_lower:
                        score += 2
                elif '–∫–æ–º–ø–ª–µ–∫—Ç' in product.name.lower():
                    if 'komplekt' in file_lower:
                        score += 2
                
                if score > best_score:
                    best_score = score
                    best_match = existing_file
            
            if best_match and best_score > 0:
                source_path = os.path.join(media_root, 'products', best_match)
                
                self.stdout.write(f"   üì¶ {product.name[:50]}...")
                self.stdout.write(f"      üîç –ó–Ω–∞–π–¥–µ–Ω–æ match: {best_match} (score: {best_score})")
                self.stdout.write(f"      üìÇ –ë—É–¥–µ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —è–∫: {target_filename}")
                
                if not dry_run:
                    try:
                        # –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª
                        shutil.copy2(source_path, target_path)
                        
                        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —É –ë–î
                        product.image.name = f'products/{target_filename}'
                        product.save()
                        
                        fixed_count += 1
                        self.stdout.write(f"      ‚úÖ –§–∞–π–ª —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —Ç–∞ –ë–î –æ–Ω–æ–≤–ª–µ–Ω–æ")
                        
                    except Exception as e:
                        self.stdout.write(self.style.ERROR(f"      ‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}"))
            else:
                self.stdout.write(f"   ‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥—Ö–æ–¥—è—â–æ–≥–æ —Ñ–∞–π–ª—É –¥–ª—è: {product.name[:50]}...")
        
        if not dry_run:
            self.stdout.write(self.style.SUCCESS(f"‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} —Ç–æ–≤–∞—Ä—ñ–≤"))
        else:
            self.stdout.write(f"üß™ –ë—É–ª–æ –± –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ {len([p for p in problematic_products if self.find_best_match(p, existing_files)])} —Ç–æ–≤–∞—Ä—ñ–≤")

    def fix_by_updating_db(self, problematic_products, existing_files, dry_run):
        """–û–Ω–æ–≤–ª—é—î –ë–î —â–æ–± –ø–æ—Å–∏–ª–∞—Ç–∏—Å—å –Ω–∞ —ñ—Å–Ω—É—é—á—ñ —Ñ–∞–π–ª–∏"""
        self.stdout.write("üìã –ú–µ—Ç–æ–¥: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ë–î –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–∞–π–ª—ñ–≤")
        
        # –ü—Ä–æ—Å—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º: –ø—Ä–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ–∞–π–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
        fixed_count = 0
        
        for i, product_data in enumerate(problematic_products):
            if i < len(existing_files):
                product = product_data['product']
                new_file = existing_files[i]
                
                self.stdout.write(f"   üì¶ {product.name[:50]}...")
                self.stdout.write(f"      üîÑ –ë—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏: {new_file}")
                
                if not dry_run:
                    product.image.name = f'products/{new_file}'
                    product.save()
                    fixed_count += 1
                    self.stdout.write(f"      ‚úÖ –ë–î –æ–Ω–æ–≤–ª–µ–Ω–æ")
        
        if not dry_run:
            self.stdout.write(self.style.SUCCESS(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ {fixed_count} —Ç–æ–≤–∞—Ä—ñ–≤"))

    def find_best_match(self, product_data, existing_files):
        """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è"""
        product = product_data['product']
        name_words = product.name.lower().split()
        key_words = [word for word in name_words if len(word) > 3][:3]
        
        best_score = 0
        for existing_file in existing_files:
            score = 0
            file_lower = existing_file.lower()
            
            for word in key_words:
                if word in file_lower:
                    score += 1
                    
            if score > best_score:
                best_score = score
                
        return best_score > 0 