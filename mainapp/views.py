from django.shortcuts import render, get_object_or_404, redirect
from django.views.generic import TemplateView, View
from django.http import HttpResponse, JsonResponse
from django.contrib import messages
from .models import Product, Portfolio, Review, ProductImage, Category, Brand
from .forms import ReviewForm
from django.db.models import Q, Avg
from django.db import models
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.core.mail import send_mail
from django.conf import settings
import json
from datetime import datetime


class IndexView(TemplateView):
    template_name = 'mainapp/index.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context.update({
            'title': 'GreenSolarTech ‚Äî –°–æ–Ω—è—á–Ω—ñ –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—ó –≤ –£–∫—Ä–∞—ó–Ω—ñ',
            'description': '–ü—Ä–æ–µ–∫—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ —Å–æ–Ω—è—á–Ω–∏—Ö –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ–π –ø—ñ–¥ –∫–ª—é—á. –ü–æ–Ω–∞–¥ 50 –ú–í—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –ø–æ—Ç—É–∂–Ω–æ—Å—Ç–µ–π. –ó–µ–ª–µ–Ω–∏–π —Ç–∞—Ä–∏—Ñ —Ç–∞ –µ–Ω–µ—Ä–≥–æ–Ω–µ–∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å.',
            'keywords': '—Å–æ–Ω—è—á–Ω—ñ –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—ó, —Å–æ–Ω—è—á–Ω—ñ –ø–∞–Ω–µ–ª—ñ, GreenSolarTech, –ö–∏—ó–≤, –∑–µ–ª–µ–Ω–∏–π —Ç–∞—Ä–∏—Ñ, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ –µ–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞',
            'company_info': {
                'name': 'GreenSolarTech',
                'phones': ['+380737230675'],
                'email': 'GreenSolarTech.pe@gmail.com',
                'telegram': '@GreenSolarTech',
                'address': '–ë–¶ –¶–µ–Ω—Ç—Ä –≤—É–ª–∏—Ü—è –í–∞—Å–∏–ª—å–∫—ñ–≤—Å—å–∫–∞, 34, –ö–∏—ó–≤, 02000',
                'production_capacity': 1.8,  # –ú–í—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                'storage_area': 18,  # –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –°–ï–°
                'stock_capacity': 4,  # –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–∏—Ö –°–ï–°
            },
            'panel_types': [
                {
                    'name': '–ú–æ–Ω–æ–∫—Ä–∏—Å—Ç–∞–ª—ñ—á–Ω—ñ',
                    'power': '540-700 –í—Ç',
                    'efficiency': '–¥–æ 22%',
                    'warranty': '25 —Ä–æ–∫—ñ–≤',
                    'features': ['–ù–∞–π–≤–∏—â–∞ —è–∫—ñ—Å—Ç—å', '–ú–∞–∫—Å–∏–º—É–º –µ–Ω–µ—Ä–≥—ñ—ó', '–ù–∞–¥—ñ–π–Ω—ñ—Å—Ç—å']
                },
                {
                    'name': '–ü–æ–ª—ñ–∫—Ä–∏—Å—Ç–∞–ª—ñ—á–Ω—ñ', 
                    'power': '440-550 –í—Ç',
                    'efficiency': '–¥–æ 20%',
                    'warranty': '20-25 —Ä–æ–∫—ñ–≤',
                    'features': ['–í—ñ–¥–º—ñ–Ω–Ω–∞ —è–∫—ñ—Å—Ç—å', '–ï–∫–æ–Ω–æ–º—ñ—á–Ω–æ', '–°—Ç–∞–±—ñ–ª—å–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è']
                }
            ],
            'advantages': [
                {
                    'icon': 'üí∞',
                    'title': '–ï–∫–æ–Ω–æ–º—ñ—á–Ω–æ',
                    'description': '–û–∫—É–ø–Ω—ñ—Å—Ç—å –∑–∞ 5-7 —Ä–æ–∫—ñ–≤. –ó–µ–ª–µ–Ω–∏–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó.',
                },
                {
                    'icon': '‚ö°',
                    'title': '–ï–Ω–µ—Ä–≥–æ–Ω–µ–∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å',
                    'description': '–í–ª–∞—Å–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è —Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ. –†–µ–∑–µ—Ä–≤–Ω–µ –∂–∏–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è—Ö.',
                },
                {
                    'icon': 'üå±',
                    'title': '–ï–∫–æ–ª–æ–≥—ñ—á–Ω–æ',
                    'description': '100% —á–∏—Å—Ç–∞ –µ–Ω–µ—Ä–≥—ñ—è —Å–æ–Ω—Ü—è. –ó–Ω–∏–∂–µ–Ω–Ω—è –≤–∏–∫–∏–¥—ñ–≤ CO‚ÇÇ.',
                }
            ],
            'project_stages': [
                {'step': 1, 'title': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è', 'description': '–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –≤–∏—ó–∑–¥ —ñ–Ω–∂–µ–Ω–µ—Ä–∞'},
                {'step': 2, 'title': '–ü—Ä–æ–µ–∫—Ç—É–≤–∞–Ω–Ω—è', 'description': '–†–æ–∑—Ä–æ–±–∫–∞ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É'},
                {'step': 3, 'title': '–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è', 'description': '–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–∑–≤–æ–ª—ñ–≤ —Ç–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è'},
                {'step': 4, 'title': '–ü–æ—Å—Ç–∞—á–∞–Ω–Ω—è', 'description': '–î–æ—Å—Ç–∞–≤–∫–∞ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –Ω–∞ –æ–±\'—î–∫—Ç'},
                {'step': 5, 'title': '–ú–æ–Ω—Ç–∞–∂', 'description': '–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—Ü—ñ—ó'},
                {'step': 6, 'title': '–ü—É—Å–∫–æ-–Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è', 'description': '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –≤ –µ–∫—Å–ø–ª—É–∞—Ç–∞—Ü—ñ—é'},
                {'step': 7, 'title': '–°–µ—Ä–≤—ñ—Å', 'description': '–ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–µ —Ç–∞ –ø—ñ—Å–ª—è–≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è'},
            ],
            'energy_comparison': [
                {
                    'fuel': '–°–æ–Ω—è—á–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è',
                    'heat_value': '0.05-0.15 ‚Ç¨/–∫–í—Ç¬∑–≥–æ–¥',
                    'ash': '0 –≥/–∫–í—Ç¬∑–≥–æ–¥',
                    'co2': '100% –≤—ñ–¥–Ω–æ–≤–ª—é–≤–∞–Ω–∞',
                    'sulfur': '–ü–æ–≤–Ω–∞',
                    'highlight': True
                },
                {
                    'fuel': '–ú–µ—Ä–µ–∂–µ–≤–∞ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è',
                    'heat_value': '0.20-0.30 ‚Ç¨/–∫–í—Ç¬∑–≥–æ–¥', 
                    'ash': '400-800 –≥/–∫–í—Ç¬∑–≥–æ–¥',
                    'co2': '–ß–∞—Å—Ç–∫–æ–≤–æ',
                    'sulfur': '–û–±–º–µ–∂–µ–Ω–∞',
                    'highlight': False
                },
                {
                    'fuel': '–î–∏–∑–µ–ª—å-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä',
                    'heat_value': '0.40-0.60 ‚Ç¨/–∫–í—Ç¬∑–≥–æ–¥',
                    'ash': '1200 –≥/–∫–í—Ç¬∑–≥–æ–¥',
                    'co2': '–ù—ñ',
                    'sulfur': '–í—ñ–¥—Å—É—Ç–Ω—è',
                    'highlight': False
                },
                {
                    'fuel': '–ü—Ä–∏—Ä–æ–¥–Ω–∏–π –≥–∞–∑',
                    'heat_value': '0.25-0.35 ‚Ç¨/–∫–í—Ç¬∑–≥–æ–¥',
                    'ash': '600 –≥/–∫–í—Ç¬∑–≥–æ–¥',
                    'co2': '–ù—ñ',
                    'sulfur': '–ó–∞–ª–µ–∂–Ω–∞',
                    'highlight': False
                }
            ],
            'distances_to_borders': [
                {'country': '–ü–æ–ª—å—â–∞', 'distance': '205-432 –∫–º'},
                {'country': '–°–ª–æ–≤–∞—á—á–∏–Ω–∞', 'distance': '586 –∫–º'},
                {'country': '–£–≥–æ—Ä—â–∏–Ω–∞', 'distance': '581 –∫–º'},
            ]
        })
        
        # –î–æ–¥–∞—é —Ç–æ–≤–∞—Ä–∏ –¥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é –∑–∞–ø–∏—Ç—ñ–≤
        context['products'] = Product.objects.filter(in_stock=True).select_related('category', 'brand').prefetch_related('images').order_by('-featured', 'name')  # –í—Å—ñ —Ç–æ–≤–∞—Ä–∏ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –ø–µ—Ä—à–∏–º–∏)
        context['featured_products'] = Product.objects.filter(featured=True, in_stock=True).select_related('category', 'brand').prefetch_related('images')[:4]  # –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏
        
        return context


class PortfolioView(TemplateView):
    template_name = 'mainapp/portfolio.html'
    
    def get_project_images(self, project_prefix):
        """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ —Ñ–æ—Ç–æ –ø—Ä–æ–µ–∫—Ç—É –∑–∞ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º"""
        import os
        from django.conf import settings
        
        portfolio_path = os.path.join(settings.MEDIA_ROOT, 'portfolio')
        if not os.path.exists(portfolio_path):
            return []
            
        images = []
        for filename in os.listdir(portfolio_path):
            if filename.startswith(project_prefix) and filename.lower().endswith(('.jpg', '.jpeg', '.png')):
                # –í–∏–∫–ª—é—á–∞—î–º–æ main —Ñ–∞–π–ª–∏ –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ –¥—É–±–ª—ñ–∫–∞—Ç–∏
                if not filename.endswith('_main.jpg'):
                    images.append(f'portfolio/{filename}')
        
        return sorted(images)
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        # ‚úÖ –ë–ï–ó–ü–ï–ß–ù–ï –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∑ fallback
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∏ –∑–∞ ID
            project1 = Portfolio.objects.filter(id=4).first()
            project2 = Portfolio.objects.filter(id=5).first()  
            project3 = Portfolio.objects.filter(id=6).first()
            
            # –Ø–∫—â–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∑–∞ ID –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—Ö –∞–±–æ –±–µ—Ä–µ–º–æ —ñ—Å–Ω—É—é—á—ñ
            if not project1:
                project1, created = Portfolio.objects.get_or_create(
                    title__icontains='17.2',
                    defaults={
                        'title': '–ü—Ä–∏–≤–∞—Ç–Ω–∞ –°–ï–° –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é 17.2 –∫–í—Ç',
                        'description': '–ü—Ä–∏–≤–∞—Ç–Ω–∞ —Å–æ–Ω—è—á–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—è –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é 17.2 –∫–í—Ç –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –±—É–¥–∏–Ω–∫—É.',
                        'location': '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                        'power_capacity': '17.2 –∫–í—Ç',
                        'project_type': '–ü—Ä–∏–≤–∞—Ç–Ω–∞ –°–ï–°',
                        'client_name': '–ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—ñ—î–Ω—Ç',
                        'image': 'portfolio/project1_main.jpg'
                    }
                )
            
            if not project2:
                project2, created = Portfolio.objects.get_or_create(
                    title__icontains='43',
                    defaults={
                        'title': '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –°–ï–° –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é 43 –∫–í—Ç',
                        'description': '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ —Å–æ–Ω—è—á–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—è –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é 43 –∫–í—Ç –¥–ª—è –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞.',
                        'location': '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                        'power_capacity': '43 –∫–í—Ç',
                        'project_type': '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –°–ï–°',
                        'client_name': '–ü—Ä–æ–º–∏—Å–ª–æ–≤–µ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ',
                        'image': 'portfolio/project2_main.jpg'
                    }
                )
                
            if not project3:
                project3, created = Portfolio.objects.get_or_create(
                    title__icontains='10.6',
                    defaults={
                        'title': '–ü—Ä–∏–≤–∞—Ç–Ω–∞ –°–ï–° –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é 10.6 –∫–í—Ç',
                        'description': '–ü—Ä–∏–≤–∞—Ç–Ω–∞ —Å–æ–Ω—è—á–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—è –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é 10.6 –∫–í—Ç –¥–ª—è –µ–Ω–µ—Ä–≥–æ–Ω–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ.',
                        'location': '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 
                        'power_capacity': '10.6 –∫–í—Ç',
                        'project_type': '–ü—Ä–∏–≤–∞—Ç–Ω–∞ –°–ï–°',
                        'client_name': '–ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—ñ—î–Ω—Ç',
                        'image': 'portfolio/project3_main.jpg'
                    }
                )
                
        except Exception as e:
            # ‚úÖ BACKUP: —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ –ø—Ä–æ–µ–∫—Ç–∏ —è–∫—â–æ —â–æ—Å—å –Ω–µ —Ç–∞–∫
            print(f"Portfolio fallback mode: {e}")
            
            project1, _ = Portfolio.objects.get_or_create(
                title='–ü—Ä–∏–≤–∞—Ç–Ω–∞ –°–ï–° –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é 17.2 –∫–í—Ç',
                defaults={
                    'description': '–ü—Ä–∏–≤–∞—Ç–Ω–∞ —Å–æ–Ω—è—á–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—è –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é 17.2 –∫–í—Ç.',
                    'location': '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                    'power_capacity': '17.2 –∫–í—Ç',
                    'project_type': '–ü—Ä–∏–≤–∞—Ç–Ω–∞ –°–ï–°',
                    'image': 'portfolio/project1_main.jpg'
                }
            )
            
            project2, _ = Portfolio.objects.get_or_create(
                title='–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –°–ï–° –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é 43 –∫–í—Ç',
                defaults={
                    'description': '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ —Å–æ–Ω—è—á–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—è –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é 43 –∫–í—Ç.',
                    'location': '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                    'power_capacity': '43 –∫–í—Ç', 
                    'project_type': '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –°–ï–°',
                    'image': 'portfolio/project2_main.jpg'
                }
            )
            
            project3, _ = Portfolio.objects.get_or_create(
                title='–ü—Ä–∏–≤–∞—Ç–Ω–∞ –°–ï–° –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é 10.6 –∫–í—Ç',
                defaults={
                    'description': '–ü—Ä–∏–≤–∞—Ç–Ω–∞ —Å–æ–Ω—è—á–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—è –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é 10.6 –∫–í—Ç.',
                    'location': '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                    'power_capacity': '10.6 –∫–í—Ç',
                    'project_type': '–ü—Ä–∏–≤–∞—Ç–Ω–∞ –°–ï–°',
                    'image': 'portfolio/project3_main.jpg'
                }
            )
        
        context.update({
            'title': '–ü–æ—Ä—Ç—Ñ–æ–ª—ñ–æ –ø—Ä–æ—î–∫—Ç—ñ–≤ ‚Äî GreenSolarTech',
            'description': '–ì–æ—Ç–æ–≤—ñ –ø—Ä–æ—î–∫—Ç–∏ —Å–æ–Ω—è—á–Ω–∏—Ö –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ–π –≤—ñ–¥ GreenSolarTech. –ü—Ä–∏–≤–∞—Ç–Ω—ñ —Ç–∞ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω—ñ –°–ï–° –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ.',
            'keywords': '–ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ —Å–æ–Ω—è—á–Ω–∏—Ö –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ–π, –≥–æ—Ç–æ–≤—ñ –ø—Ä–æ—î–∫—Ç–∏ –°–ï–°, –ø—Ä–∏–≤–∞—Ç–Ω—ñ —Å–æ–Ω—è—á–Ω—ñ —Å—Ç–∞–Ω—Ü—ñ—ó',
            'project1': project1,
            'project2': project2,
            'project3': project3
        })
        return context


class CatalogView(TemplateView):
    template_name = 'mainapp/catalog.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        category = self.request.GET.get('category')
        brand = self.request.GET.get('brand')
        price_min = self.request.GET.get('price_min')
        price_max = self.request.GET.get('price_max')
        
        # –ë–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é
        products = Product.objects.filter(in_stock=True).select_related('category', 'brand').prefetch_related('images')
        
        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è
        if category:
            products = products.filter(category__name__icontains=category)
        if brand:
            products = products.filter(brand__name__icontains=brand)
        if price_min:
            products = products.filter(price__gte=price_min)
        if price_max:
            products = products.filter(price__lte=price_max)
        
        # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –±—Ä–µ–Ω–¥–∏ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ - –ª–∏—à–µ —Ç—ñ —â–æ –º–∞—é—Ç—å —Ç–æ–≤–∞—Ä–∏ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
        categories = Category.objects.filter(
            product__in_stock=True,
            is_active=True
        ).values_list('name', flat=True).distinct().order_by('name')
        
        brands = Brand.objects.filter(
            product__in_stock=True,
            is_active=True
        ).values_list('name', flat=True).distinct().order_by('name')
        
        # –¢–æ–≤–∞—Ä–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–µ–π (–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Ç–∞ —Ä–æ—Å—ñ–π—Å—å–∫–∏—Ö –Ω–∞–∑–≤)
        inverters = products.filter(
            Q(category__name__icontains='–Ü–Ω–≤–µ—Ä—Ç–æ—Ä') | Q(category__name__icontains='–ò–Ω–≤–µ—Ä—Ç–æ—Ä')
        ).order_by('-featured', 'name')[:10]
        
        solar_panels = products.filter(
            Q(category__name__icontains='–ø–∞–Ω–µ–ª') | Q(category__name__icontains='–ø–∞–Ω–µ–ª')
        ).order_by('-featured', 'name')[:10]
        
        batteries = products.filter(
            Q(category__name__icontains='–ê–∫—É–º—É–ª—è—Ç–æ—Ä') | Q(category__name__icontains='–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä')
        ).order_by('-featured', 'name')[:10]
        
        backup_kits = products.filter(
            Q(category__name__icontains='–∫–æ–º–ø–ª–µ–∫—Ç') | 
            Q(category__name__icontains='—Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ') |
            Q(category__name__icontains='–∂–∏–≤–ª–µ–Ω–Ω—è')
        ).order_by('-featured', 'name')[:10]
        
        context.update({
            'title': '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ ‚Äî GreenSolarTech',
            'description': '–ü–æ–≤–Ω–∏–π –∫–∞—Ç–∞–ª–æ–≥ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –¥–ª—è —Å–æ–Ω—è—á–Ω–∏—Ö –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ–π: —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∏, –ø–∞–Ω–µ–ª—ñ, –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∏, –∫–æ–º–ø–ª–µ–∫—Ç–∏.',
            'keywords': '–∫–∞—Ç–∞–ª–æ–≥ —Å–æ–Ω—è—á–Ω–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è, —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∏, —Å–æ–Ω—è—á–Ω—ñ –ø–∞–Ω–µ–ª—ñ, –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∏',
            'products': products.order_by('-featured', 'name'),  # –í—Å—ñ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥—É
            'categories': categories,
            'brands': brands,
            'selected_category': category,
            'selected_brand': brand,
            'price_min': price_min,
            'price_max': price_max,
            'inverters': inverters,
            'solar_panels': solar_panels,
            'batteries': batteries,
            'backup_kits': backup_kits,
        })
        return context


class CategoryView(TemplateView):
    template_name = 'mainapp/category.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        category_key = kwargs.get('category')
        
        # –ú–∞–ø–ø—ñ–Ω–≥ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö –∫–ª—é—á—ñ–≤ URL –Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Ç–∞ —Ä–æ—Å—ñ–π—Å—å–∫–∏—Ö –Ω–∞–∑–≤)
        category_mapping = {
            'inverters': ['–Ü–Ω–≤–µ—Ä—Ç–æ—Ä', '–ò–Ω–≤–µ—Ä—Ç–æ—Ä'],
            'solar-panels': ['–ø–∞–Ω–µ–ª', '–ø–∞–Ω–µ–ª'], 
            'batteries': ['–ê–∫—É–º—É–ª—è—Ç–æ—Ä', '–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä'],
            'backup-power': ['–∫–æ–º–ø–ª–µ–∫—Ç', '–∫–æ–º–ø–ª–µ–∫']
        }
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        category_keywords = category_mapping.get(category_key, [category_key])
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        brand = self.request.GET.get('brand')
        min_price = self.request.GET.get('min_price')
        max_price = self.request.GET.get('max_price')
        
        # –ë–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –º–Ω–æ–∂–∏–Ω–Ω–∏—Ö –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
        category_filter = Q()
        for keyword in category_keywords:
            category_filter |= Q(category__name__icontains=keyword)
        
        products = Product.objects.filter(in_stock=True).filter(category_filter).select_related('category', 'brand').prefetch_related('images')
        
        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è
        if brand:
            products = products.filter(brand__name__icontains=brand)
        if min_price:
            products = products.filter(price__gte=min_price)
        if max_price:
            products = products.filter(price__lte=max_price)
        
        # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –±—Ä–µ–Ω–¥–∏ –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é
        brands = Brand.objects.filter(
            product__in=Product.objects.filter(category_filter, in_stock=True),
            is_active=True
        ).values_list('name', flat=True).distinct().order_by('name')
        
        # –ù–∞–∑–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        category_names = {
            'inverters': '–Ü–Ω–≤–µ—Ä—Ç–æ—Ä–∏',
            'solar-panels': '–°–æ–Ω—è—á–Ω—ñ –ø–∞–Ω–µ–ª—ñ', 
            'batteries': '–ê–∫—É–º—É–ª—è—Ç–æ—Ä–Ω—ñ –±–∞—Ç–∞—Ä–µ—ó',
            'backup-power': '–ö–æ–º–ø–ª–µ–∫—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è'
        }
        
        category_name = category_names.get(category_key, category_key.title())
        
        context.update({
            'title': f'{category_name} ‚Äî GreenSolarTech',
            'description': f'–ö–∞—Ç–∞–ª–æ–≥ {category_name.lower()} –¥–ª—è —Å–æ–Ω—è—á–Ω–∏—Ö –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ–π –≤—ñ–¥ –ø—Ä–æ–≤—ñ–¥–Ω–∏—Ö –≤–∏—Ä–æ–±–Ω–∏–∫—ñ–≤.',
            'keywords': f'{category_name.lower()}, —Å–æ–Ω—è—á–Ω–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è, GreenSolarTech',
            'products': products.order_by('-featured', 'name'),
            'category_name': category_name,
            'category_key': category_key,
            'brands': brands,
            'selected_brand': brand,
            'min_price': min_price,
            'max_price': max_price
        })
        return context


class ReviewsView(View):
    template_name = 'mainapp/reviews.html'
    
    def get(self, request):
        form = ReviewForm()
        context = {
            'title': '–í—ñ–¥–≥—É–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤ ‚Äî GreenSolarTech',
            'description': '–í—ñ–¥–≥—É–∫–∏ –Ω–∞—à–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ —Å–æ–Ω—è—á–Ω–∏—Ö –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ–π —Ç–∞ —è–∫—ñ—Å—Ç—å –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è.',
            'keywords': '–≤—ñ–¥–≥—É–∫–∏ –ø—Ä–æ —Å–æ–Ω—è—á–Ω—ñ –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—ó, –≤—ñ–¥–≥—É–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤ GreenSolarTech',
            'reviews': Review.objects.filter(is_published=True).order_by('-created_at'),
            'average_rating': Review.objects.filter(is_published=True).aggregate(
                avg_rating=Avg('rating')
            )['avg_rating'] or 0,
            'total_reviews': Review.objects.filter(is_published=True).count(),
            'form': form
        }
        return render(request, self.template_name, context)
    
    def post(self, request):
        form = ReviewForm(request.POST)
        if form.is_valid():
            review = form.save(commit=False)
            review.is_published = False  # –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ–¥ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—î—é
            review.save()
            messages.success(request, '–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫! –í—ñ–Ω –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π –ø—ñ—Å–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.')
            return redirect('mainapp:reviews')
        
        # –Ø–∫—â–æ —Ñ–æ—Ä–º–∞ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∞, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫–∏
        context = {
            'title': '–í—ñ–¥–≥—É–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤ ‚Äî GreenSolarTech',
            'description': '–í—ñ–¥–≥—É–∫–∏ –Ω–∞—à–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ —Å–æ–Ω—è—á–Ω–∏—Ö –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ–π —Ç–∞ —è–∫—ñ—Å—Ç—å –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è.',
            'keywords': '–≤—ñ–¥–≥—É–∫–∏ –ø—Ä–æ —Å–æ–Ω—è—á–Ω—ñ –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—ó, –≤—ñ–¥–≥—É–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤ GreenSolarTech',
            'reviews': Review.objects.filter(is_published=True).order_by('-created_at'),
            'average_rating': Review.objects.filter(is_published=True).aggregate(
                avg_rating=Avg('rating')
            )['avg_rating'] or 0,
            'total_reviews': Review.objects.filter(is_published=True).count(),
            'form': form
        }
        return render(request, self.template_name, context)


def sitemap_xml(request):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è sitemap.xml –¥–ª—è SEO"""
    xml_content = '''<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
    <url>
        <loc>https://greensolartech.com.ua/</loc>
        <lastmod>2024-01-01</lastmod>
        <changefreq>monthly</changefreq>
        <priority>1.0</priority>
    </url>
    <url>
        <loc>https://greensolartech.com.ua/portfolio/</loc>
        <lastmod>2024-01-01</lastmod>
        <changefreq>monthly</changefreq>
        <priority>0.8</priority>
    </url>
    <url>
        <loc>https://greensolartech.com.ua/catalog/</loc>
        <lastmod>2024-01-01</lastmod>
        <changefreq>weekly</changefreq>
        <priority>0.9</priority>
    </url>
    <url>
        <loc>https://greensolartech.com.ua/reviews/</loc>
        <lastmod>2024-01-01</lastmod>
        <changefreq>monthly</changefreq>
        <priority>0.7</priority>
    </url>
</urlset>'''
    return HttpResponse(xml_content, content_type='application/xml')


def robots_txt(request):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è robots.txt –¥–ª—è SEO"""
    txt_content = '''User-agent: *
Allow: /
Sitemap: https://greensolartech.com.ua/sitemap.xml'''
    return HttpResponse(txt_content, content_type='text/plain')


class ProductDetailView(TemplateView):
    template_name = 'mainapp/product_detail.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        product_id = kwargs.get('product_id')
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–≤–∞—Ä –∞–±–æ 404 –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é
        product = get_object_or_404(
            Product.objects.select_related('category', 'brand').prefetch_related('images'),
            id=product_id, 
            in_stock=True
        )
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É (–≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —á–µ—Ä–µ–∑ prefetch_related)
        product_images = product.images.all().order_by('order', 'id')
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ
        if not product_images and product.image:
            main_image = product  # ‚úÖ –ü–ï–†–ï–î–ê–Ñ–ú–û –û–ë'–Ñ–ö–¢ –¢–û–í–ê–†–£, –ù–ï ImageField!
        else:
            main_image = product_images.first() if product_images else product  # ‚úÖ –û–ë'–Ñ–ö–¢ ProductImage –∞–±–æ Product!
        
        # –°—Ö–æ–∂—ñ —Ç–æ–≤–∞—Ä–∏ (–∑ —Ç—ñ—î—ó –∂ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∞–±–æ –±—Ä–µ–Ω–¥—É) –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é
        similar_products = Product.objects.filter(
            Q(category=product.category) | Q(brand=product.brand),
            in_stock=True
        ).exclude(id=product.id).select_related('category', 'brand').prefetch_related('images')[:6]
        
        context.update({
            'title': f'{product.name} ‚Äî GreenSolarTech',
            'description': f'{product.name} –≤—ñ–¥ {product.brand}. {product.description[:150]}...',
            'keywords': f'{product.name}, {product.brand}, {product.category}, —Å–æ–Ω—è—á–Ω–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
            'product': product,
            'product_images': product_images,
            'main_image': main_image,
            'similar_products': similar_products,
        })
        
        return context


# API Views
@method_decorator(csrf_exempt, name='dispatch')
class CallbackAPIView(View):
    """API –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞—è–≤–æ–∫ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É"""
    
    def post(self, request):
        try:
            data = json.loads(request.body)
            
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–Ω–∏—Ö
            name = data.get('name', '').strip()
            phone = data.get('phone', '').strip()
            message = data.get('message', '').strip()
            
            if not name:
                return JsonResponse({'error': '–Ü–º º—è —î –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–º'}, status=400)
            
            if not phone:
                return JsonResponse({'error': '–¢–µ–ª–µ—Ñ–æ–Ω —î –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–º'}, status=400)
            
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ email –ª–∏—Å—Ç–∞
            subject = f'–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤ º—è–∑–æ–∫ - {name}'
            
            email_message = f"""
–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤ º—è–∑–æ–∫ –∑ —Å–∞–π—Ç—É GreenSolarTech

–Ü–º'—è: {name}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone}
–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message if message else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}

–î–∞—Ç–∞ —Ç–∞ —á–∞—Å: {datetime.now().strftime('%d.%m.%Y –æ %H:%M')}

---
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É greensolartech.com.ua
            """
            
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email
            try:
                send_mail(
                    subject=subject,
                    message=email_message,
                    from_email=settings.DEFAULT_FROM_EMAIL,
                    recipient_list=[settings.CONTACT_EMAIL],
                    fail_silently=False,
                )
                
                return JsonResponse({
                    'success': True,
                    'message': '–ó–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ'
                })
                
            except Exception as email_error:
                print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email: {email_error}")
                return JsonResponse({
                    'error': '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'
                }, status=500)
                
        except json.JSONDecodeError:
            return JsonResponse({'error': '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω–∏—Ö'}, status=400)
        except Exception as e:
            print(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ API: {e}")
            return JsonResponse({'error': '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)
    
    def get(self, request):
        return JsonResponse({'error': '–ú–µ—Ç–æ–¥ –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π'}, status=405)


@method_decorator(csrf_exempt, name='dispatch')
class OrderAPIView(View):
    """API –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å –∑ –∫–æ—Ä–∑–∏–Ω–∏"""
    
    def post(self, request):
        try:
            data = json.loads(request.body)
            
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–Ω–∏—Ö
            name = data.get('name', '').strip()
            phone = data.get('phone', '').strip()
            email = data.get('email', '').strip()
            comment = data.get('comment', '').strip()
            items = data.get('items', [])
            total = data.get('total', 0)
            
            if not name:
                return JsonResponse({'error': '–Ü–º º—è —î –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–º'}, status=400)
            
            if not phone:
                return JsonResponse({'error': '–¢–µ–ª–µ—Ñ–æ–Ω —î –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–º'}, status=400)
            
            if not email:
                return JsonResponse({'error': 'Email —î –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–º'}, status=400)
            
            if not items:
                return JsonResponse({'error': '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'}, status=400)
            
            # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤
            items_list = []
            for item in items:
                item_text = f"‚Ä¢ {item.get('name', '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä')} x {item.get('quantity', 1)} —à—Ç. - ‚Ç¥{item.get('price', 0)}"
                items_list.append(item_text)
            
            items_text = '\n'.join(items_list)
            
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ email –ª–∏—Å—Ç–∞
            subject = f'–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{datetime.now().strftime("%Y%m%d%H%M")} - {name}'
            
            email_message = f"""
–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É GreenSolarTech

–î–ê–ù–Ü –ó–ê–ú–û–í–ù–ò–ö–ê:
–Ü–º'—è: {name}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone}
Email: {email}

–¢–û–í–ê–†–ò:
{items_text}

–ó–ê–ì–ê–õ–¨–ù–ê –°–£–ú–ê: ‚Ç¥{total}

–ö–û–ú–ï–ù–¢–ê–†: {comment if comment else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}

–î–∞—Ç–∞ —Ç–∞ —á–∞—Å: {datetime.now().strftime('%d.%m.%Y –æ %H:%M')}

---
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É greensolartech.com.ua
            """
            
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email
            try:
                send_mail(
                    subject=subject,
                    message=email_message,
                    from_email=settings.DEFAULT_FROM_EMAIL,
                    recipient_list=[settings.CONTACT_EMAIL],
                    fail_silently=False,
                )
                
                return JsonResponse({
                    'success': True,
                    'message': '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ'
                })
                
            except Exception as email_error:
                print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {email_error}")
                return JsonResponse({
                    'error': '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'
                }, status=500)
                
        except json.JSONDecodeError:
            return JsonResponse({'error': '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω–∏—Ö'}, status=400)
        except Exception as e:
            print(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ API –∑–∞–º–æ–≤–ª–µ–Ω—å: {e}")
            return JsonResponse({'error': '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)
    
    def get(self, request):
        return JsonResponse({'error': '–ú–µ—Ç–æ–¥ –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π'}, status=405)
